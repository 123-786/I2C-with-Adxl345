
HAL_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cbc  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08001e54  08001e54  00002e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e5c  08001e5c  0000300c  2**0
                  CONTENTS
  4 .ARM          00000008  08001e5c  08001e5c  00002e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001e64  08001e64  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e64  08001e64  00002e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001e68  08001e68  00002e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001e6c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  08001e78  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08001e78  000030b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000058fb  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000138a  00000000  00000000  00008937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000660  00000000  00000000  00009cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004b3  00000000  00000000  0000a328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015f09  00000000  00000000  0000a7db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007b8f  00000000  00000000  000206e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a6ad  00000000  00000000  00028273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b2920  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001924  00000000  00000000  000b2964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  000b4288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001e3c 	.word	0x08001e3c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08001e3c 	.word	0x08001e3c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000508 <HAL_Init+0x40>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000508 <HAL_Init+0x40>)
 80004d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000508 <HAL_Init+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000508 <HAL_Init+0x40>)
 80004de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e4:	4b08      	ldr	r3, [pc, #32]	@ (8000508 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a07      	ldr	r2, [pc, #28]	@ (8000508 <HAL_Init+0x40>)
 80004ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f0:	2003      	movs	r0, #3
 80004f2:	f000 fc39 	bl	8000d68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f6:	200f      	movs	r0, #15
 80004f8:	f000 f810 	bl	800051c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004fc:	f000 f806 	bl	800050c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40023c00 	.word	0x40023c00

0800050c <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
	...

0800051c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000524:	4b12      	ldr	r3, [pc, #72]	@ (8000570 <HAL_InitTick+0x54>)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	4b12      	ldr	r3, [pc, #72]	@ (8000574 <HAL_InitTick+0x58>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	4619      	mov	r1, r3
 800052e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000532:	fbb3 f3f1 	udiv	r3, r3, r1
 8000536:	fbb2 f3f3 	udiv	r3, r2, r3
 800053a:	4618      	mov	r0, r3
 800053c:	f000 fc3b 	bl	8000db6 <HAL_SYSTICK_Config>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000546:	2301      	movs	r3, #1
 8000548:	e00e      	b.n	8000568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2b0f      	cmp	r3, #15
 800054e:	d80a      	bhi.n	8000566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000550:	2200      	movs	r2, #0
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	f04f 30ff 	mov.w	r0, #4294967295
 8000558:	f000 fc11 	bl	8000d7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800055c:	4a06      	ldr	r2, [pc, #24]	@ (8000578 <HAL_InitTick+0x5c>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000562:	2300      	movs	r3, #0
 8000564:	e000      	b.n	8000568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000566:	2301      	movs	r3, #1
}
 8000568:	4618      	mov	r0, r3
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000008 	.word	0x20000008
 8000574:	20000004 	.word	0x20000004
 8000578:	20000000 	.word	0x20000000

0800057c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000580:	4b06      	ldr	r3, [pc, #24]	@ (800059c <HAL_IncTick+0x20>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	461a      	mov	r2, r3
 8000586:	4b06      	ldr	r3, [pc, #24]	@ (80005a0 <HAL_IncTick+0x24>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4413      	add	r3, r2
 800058c:	4a04      	ldr	r2, [pc, #16]	@ (80005a0 <HAL_IncTick+0x24>)
 800058e:	6013      	str	r3, [r2, #0]
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000004 	.word	0x20000004
 80005a0:	20000028 	.word	0x20000028

080005a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005ac:	2300      	movs	r3, #0
 80005ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d101      	bne.n	80005ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80005b6:	2301      	movs	r3, #1
 80005b8:	e033      	b.n	8000622 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d109      	bne.n	80005d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	f000 f831 	bl	800062a <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2200      	movs	r2, #0
 80005cc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2200      	movs	r2, #0
 80005d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005da:	f003 0310 	and.w	r3, r3, #16
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d118      	bne.n	8000614 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80005ea:	f023 0302 	bic.w	r3, r3, #2
 80005ee:	f043 0202 	orr.w	r2, r3, #2
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f000 fa08 	bl	8000a0c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2200      	movs	r2, #0
 8000600:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000606:	f023 0303 	bic.w	r3, r3, #3
 800060a:	f043 0201 	orr.w	r2, r3, #1
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	641a      	str	r2, [r3, #64]	@ 0x40
 8000612:	e001      	b.n	8000618 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000614:	2301      	movs	r3, #1
 8000616:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2200      	movs	r2, #0
 800061c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000620:	7bfb      	ldrb	r3, [r7, #15]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <HAL_ADC_MspInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800062a:	b480      	push	{r7}
 800062c:	b083      	sub	sp, #12
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
	...

08000640 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000648:	2300      	movs	r3, #0
 800064a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000652:	2b01      	cmp	r3, #1
 8000654:	d101      	bne.n	800065a <HAL_ADC_Start+0x1a>
 8000656:	2302      	movs	r3, #2
 8000658:	e08a      	b.n	8000770 <HAL_ADC_Start+0x130>
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2201      	movs	r2, #1
 800065e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	f003 0301 	and.w	r3, r3, #1
 800066c:	2b01      	cmp	r3, #1
 800066e:	d018      	beq.n	80006a2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	689a      	ldr	r2, [r3, #8]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f042 0201 	orr.w	r2, r2, #1
 800067e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000680:	4b3e      	ldr	r3, [pc, #248]	@ (800077c <HAL_ADC_Start+0x13c>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a3e      	ldr	r2, [pc, #248]	@ (8000780 <HAL_ADC_Start+0x140>)
 8000686:	fba2 2303 	umull	r2, r3, r2, r3
 800068a:	0c9a      	lsrs	r2, r3, #18
 800068c:	4613      	mov	r3, r2
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	4413      	add	r3, r2
 8000692:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000694:	e002      	b.n	800069c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	3b01      	subs	r3, #1
 800069a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d1f9      	bne.n	8000696 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	f003 0301 	and.w	r3, r3, #1
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d15e      	bne.n	800076e <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80006b8:	f023 0301 	bic.w	r3, r3, #1
 80006bc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	685b      	ldr	r3, [r3, #4]
 80006ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d007      	beq.n	80006e2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80006da:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80006ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80006ee:	d106      	bne.n	80006fe <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006f4:	f023 0206 	bic.w	r2, r3, #6
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	645a      	str	r2, [r3, #68]	@ 0x44
 80006fc:	e002      	b.n	8000704 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2200      	movs	r2, #0
 8000702:	645a      	str	r2, [r3, #68]	@ 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2200      	movs	r2, #0
 8000708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800070c:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <HAL_ADC_Start+0x144>)
 800070e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000718:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	685b      	ldr	r3, [r3, #4]
 800071e:	f003 031f 	and.w	r3, r3, #31
 8000722:	2b00      	cmp	r3, #0
 8000724:	d10f      	bne.n	8000746 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	689b      	ldr	r3, [r3, #8]
 800072c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000730:	2b00      	cmp	r3, #0
 8000732:	d11c      	bne.n	800076e <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	689a      	ldr	r2, [r3, #8]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	e013      	b.n	800076e <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a0f      	ldr	r2, [pc, #60]	@ (8000788 <HAL_ADC_Start+0x148>)
 800074c:	4293      	cmp	r3, r2
 800074e:	d10e      	bne.n	800076e <HAL_ADC_Start+0x12e>
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	689b      	ldr	r3, [r3, #8]
 8000756:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800075a:	2b00      	cmp	r3, #0
 800075c:	d107      	bne.n	800076e <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	689a      	ldr	r2, [r3, #8]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800076c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800076e:	2300      	movs	r3, #0
}
 8000770:	4618      	mov	r0, r3
 8000772:	3714      	adds	r7, #20
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	20000008 	.word	0x20000008
 8000780:	431bde83 	.word	0x431bde83
 8000784:	40012300 	.word	0x40012300
 8000788:	40012000 	.word	0x40012000

0800078c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800079a:	4618      	mov	r0, r3
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
	...

080007a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d101      	bne.n	80007c4 <HAL_ADC_ConfigChannel+0x1c>
 80007c0:	2302      	movs	r3, #2
 80007c2:	e113      	b.n	80009ec <HAL_ADC_ConfigChannel+0x244>
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2201      	movs	r2, #1
 80007c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2b09      	cmp	r3, #9
 80007d2:	d925      	bls.n	8000820 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	68d9      	ldr	r1, [r3, #12]
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	b29b      	uxth	r3, r3
 80007e0:	461a      	mov	r2, r3
 80007e2:	4613      	mov	r3, r2
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	4413      	add	r3, r2
 80007e8:	3b1e      	subs	r3, #30
 80007ea:	2207      	movs	r2, #7
 80007ec:	fa02 f303 	lsl.w	r3, r2, r3
 80007f0:	43da      	mvns	r2, r3
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	400a      	ands	r2, r1
 80007f8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	68d9      	ldr	r1, [r3, #12]
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	689a      	ldr	r2, [r3, #8]
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	b29b      	uxth	r3, r3
 800080a:	4618      	mov	r0, r3
 800080c:	4603      	mov	r3, r0
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	4403      	add	r3, r0
 8000812:	3b1e      	subs	r3, #30
 8000814:	409a      	lsls	r2, r3
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	430a      	orrs	r2, r1
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	e022      	b.n	8000866 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	6919      	ldr	r1, [r3, #16]
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	b29b      	uxth	r3, r3
 800082c:	461a      	mov	r2, r3
 800082e:	4613      	mov	r3, r2
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	4413      	add	r3, r2
 8000834:	2207      	movs	r2, #7
 8000836:	fa02 f303 	lsl.w	r3, r2, r3
 800083a:	43da      	mvns	r2, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	400a      	ands	r2, r1
 8000842:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	6919      	ldr	r1, [r3, #16]
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	689a      	ldr	r2, [r3, #8]
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	b29b      	uxth	r3, r3
 8000854:	4618      	mov	r0, r3
 8000856:	4603      	mov	r3, r0
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	4403      	add	r3, r0
 800085c:	409a      	lsls	r2, r3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	430a      	orrs	r2, r1
 8000864:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	2b06      	cmp	r3, #6
 800086c:	d824      	bhi.n	80008b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	685a      	ldr	r2, [r3, #4]
 8000878:	4613      	mov	r3, r2
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	4413      	add	r3, r2
 800087e:	3b05      	subs	r3, #5
 8000880:	221f      	movs	r2, #31
 8000882:	fa02 f303 	lsl.w	r3, r2, r3
 8000886:	43da      	mvns	r2, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	400a      	ands	r2, r1
 800088e:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	b29b      	uxth	r3, r3
 800089c:	4618      	mov	r0, r3
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	685a      	ldr	r2, [r3, #4]
 80008a2:	4613      	mov	r3, r2
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	4413      	add	r3, r2
 80008a8:	3b05      	subs	r3, #5
 80008aa:	fa00 f203 	lsl.w	r2, r0, r3
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	430a      	orrs	r2, r1
 80008b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80008b6:	e04c      	b.n	8000952 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	2b0c      	cmp	r3, #12
 80008be:	d824      	bhi.n	800090a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	685a      	ldr	r2, [r3, #4]
 80008ca:	4613      	mov	r3, r2
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	4413      	add	r3, r2
 80008d0:	3b23      	subs	r3, #35	@ 0x23
 80008d2:	221f      	movs	r2, #31
 80008d4:	fa02 f303 	lsl.w	r3, r2, r3
 80008d8:	43da      	mvns	r2, r3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	400a      	ands	r2, r1
 80008e0:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	4618      	mov	r0, r3
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	685a      	ldr	r2, [r3, #4]
 80008f4:	4613      	mov	r3, r2
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	4413      	add	r3, r2
 80008fa:	3b23      	subs	r3, #35	@ 0x23
 80008fc:	fa00 f203 	lsl.w	r2, r0, r3
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	430a      	orrs	r2, r1
 8000906:	631a      	str	r2, [r3, #48]	@ 0x30
 8000908:	e023      	b.n	8000952 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	685a      	ldr	r2, [r3, #4]
 8000914:	4613      	mov	r3, r2
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	4413      	add	r3, r2
 800091a:	3b41      	subs	r3, #65	@ 0x41
 800091c:	221f      	movs	r2, #31
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	43da      	mvns	r2, r3
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	400a      	ands	r2, r1
 800092a:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	b29b      	uxth	r3, r3
 8000938:	4618      	mov	r0, r3
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	685a      	ldr	r2, [r3, #4]
 800093e:	4613      	mov	r3, r2
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	4413      	add	r3, r2
 8000944:	3b41      	subs	r3, #65	@ 0x41
 8000946:	fa00 f203 	lsl.w	r2, r0, r3
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	430a      	orrs	r2, r1
 8000950:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000952:	4b29      	ldr	r3, [pc, #164]	@ (80009f8 <HAL_ADC_ConfigChannel+0x250>)
 8000954:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a28      	ldr	r2, [pc, #160]	@ (80009fc <HAL_ADC_ConfigChannel+0x254>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d10f      	bne.n	8000980 <HAL_ADC_ConfigChannel+0x1d8>
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b12      	cmp	r3, #18
 8000966:	d10b      	bne.n	8000980 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a1d      	ldr	r2, [pc, #116]	@ (80009fc <HAL_ADC_ConfigChannel+0x254>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d12b      	bne.n	80009e2 <HAL_ADC_ConfigChannel+0x23a>
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a1c      	ldr	r2, [pc, #112]	@ (8000a00 <HAL_ADC_ConfigChannel+0x258>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d003      	beq.n	800099c <HAL_ADC_ConfigChannel+0x1f4>
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b11      	cmp	r3, #17
 800099a:	d122      	bne.n	80009e2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a11      	ldr	r2, [pc, #68]	@ (8000a00 <HAL_ADC_ConfigChannel+0x258>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d111      	bne.n	80009e2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80009be:	4b11      	ldr	r3, [pc, #68]	@ (8000a04 <HAL_ADC_ConfigChannel+0x25c>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a11      	ldr	r2, [pc, #68]	@ (8000a08 <HAL_ADC_ConfigChannel+0x260>)
 80009c4:	fba2 2303 	umull	r2, r3, r2, r3
 80009c8:	0c9a      	lsrs	r2, r3, #18
 80009ca:	4613      	mov	r3, r2
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	4413      	add	r3, r2
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80009d4:	e002      	b.n	80009dc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	3b01      	subs	r3, #1
 80009da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d1f9      	bne.n	80009d6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2200      	movs	r2, #0
 80009e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80009ea:	2300      	movs	r3, #0
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3714      	adds	r7, #20
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	40012300 	.word	0x40012300
 80009fc:	40012000 	.word	0x40012000
 8000a00:	10000012 	.word	0x10000012
 8000a04:	20000008 	.word	0x20000008
 8000a08:	431bde83 	.word	0x431bde83

08000a0c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000a14:	4b79      	ldr	r3, [pc, #484]	@ (8000bfc <ADC_Init+0x1f0>)
 8000a16:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	685a      	ldr	r2, [r3, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	431a      	orrs	r2, r3
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	685a      	ldr	r2, [r3, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000a40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	6859      	ldr	r1, [r3, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	691b      	ldr	r3, [r3, #16]
 8000a4c:	021a      	lsls	r2, r3, #8
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	430a      	orrs	r2, r1
 8000a54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	685a      	ldr	r2, [r3, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8000a64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	6859      	ldr	r1, [r3, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	689a      	ldr	r2, [r3, #8]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	430a      	orrs	r2, r1
 8000a76:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	689a      	ldr	r2, [r3, #8]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000a86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	6899      	ldr	r1, [r3, #8]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	68da      	ldr	r2, [r3, #12]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	430a      	orrs	r2, r1
 8000a98:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a9e:	4a58      	ldr	r2, [pc, #352]	@ (8000c00 <ADC_Init+0x1f4>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d022      	beq.n	8000aea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	689a      	ldr	r2, [r3, #8]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000ab2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	6899      	ldr	r1, [r3, #8]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	430a      	orrs	r2, r1
 8000ac4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	689a      	ldr	r2, [r3, #8]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000ad4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	6899      	ldr	r1, [r3, #8]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	430a      	orrs	r2, r1
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	e00f      	b.n	8000b0a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	689a      	ldr	r2, [r3, #8]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000af8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	689a      	ldr	r2, [r3, #8]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000b08:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	689a      	ldr	r2, [r3, #8]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f022 0202 	bic.w	r2, r2, #2
 8000b18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	6899      	ldr	r1, [r3, #8]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	7e1b      	ldrb	r3, [r3, #24]
 8000b24:	005a      	lsls	r2, r3, #1
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	430a      	orrs	r2, r1
 8000b2c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d01b      	beq.n	8000b70 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	685a      	ldr	r2, [r3, #4]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000b46:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	685a      	ldr	r2, [r3, #4]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8000b56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	6859      	ldr	r1, [r3, #4]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b62:	3b01      	subs	r3, #1
 8000b64:	035a      	lsls	r2, r3, #13
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	430a      	orrs	r2, r1
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	e007      	b.n	8000b80 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	685a      	ldr	r2, [r3, #4]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000b7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8000b8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	69db      	ldr	r3, [r3, #28]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	051a      	lsls	r2, r3, #20
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	430a      	orrs	r2, r1
 8000ba4:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	689a      	ldr	r2, [r3, #8]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000bb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	6899      	ldr	r1, [r3, #8]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000bc2:	025a      	lsls	r2, r3, #9
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	689a      	ldr	r2, [r3, #8]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000bda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	6899      	ldr	r1, [r3, #8]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	695b      	ldr	r3, [r3, #20]
 8000be6:	029a      	lsls	r2, r3, #10
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	430a      	orrs	r2, r1
 8000bee:	609a      	str	r2, [r3, #8]
}
 8000bf0:	bf00      	nop
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	40012300 	.word	0x40012300
 8000c00:	0f000001 	.word	0x0f000001

08000c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f003 0307 	and.w	r3, r3, #7
 8000c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c14:	4b0c      	ldr	r3, [pc, #48]	@ (8000c48 <__NVIC_SetPriorityGrouping+0x44>)
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c1a:	68ba      	ldr	r2, [r7, #8]
 8000c1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c20:	4013      	ands	r3, r2
 8000c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c36:	4a04      	ldr	r2, [pc, #16]	@ (8000c48 <__NVIC_SetPriorityGrouping+0x44>)
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	60d3      	str	r3, [r2, #12]
}
 8000c3c:	bf00      	nop
 8000c3e:	3714      	adds	r7, #20
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c50:	4b04      	ldr	r3, [pc, #16]	@ (8000c64 <__NVIC_GetPriorityGrouping+0x18>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	0a1b      	lsrs	r3, r3, #8
 8000c56:	f003 0307 	and.w	r3, r3, #7
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	6039      	str	r1, [r7, #0]
 8000c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	db0a      	blt.n	8000c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	b2da      	uxtb	r2, r3
 8000c80:	490c      	ldr	r1, [pc, #48]	@ (8000cb4 <__NVIC_SetPriority+0x4c>)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	0112      	lsls	r2, r2, #4
 8000c88:	b2d2      	uxtb	r2, r2
 8000c8a:	440b      	add	r3, r1
 8000c8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c90:	e00a      	b.n	8000ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	4908      	ldr	r1, [pc, #32]	@ (8000cb8 <__NVIC_SetPriority+0x50>)
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	f003 030f 	and.w	r3, r3, #15
 8000c9e:	3b04      	subs	r3, #4
 8000ca0:	0112      	lsls	r2, r2, #4
 8000ca2:	b2d2      	uxtb	r2, r2
 8000ca4:	440b      	add	r3, r1
 8000ca6:	761a      	strb	r2, [r3, #24]
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000e100 	.word	0xe000e100
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b089      	sub	sp, #36	@ 0x24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	f1c3 0307 	rsb	r3, r3, #7
 8000cd6:	2b04      	cmp	r3, #4
 8000cd8:	bf28      	it	cs
 8000cda:	2304      	movcs	r3, #4
 8000cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	3304      	adds	r3, #4
 8000ce2:	2b06      	cmp	r3, #6
 8000ce4:	d902      	bls.n	8000cec <NVIC_EncodePriority+0x30>
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3b03      	subs	r3, #3
 8000cea:	e000      	b.n	8000cee <NVIC_EncodePriority+0x32>
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43da      	mvns	r2, r3
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	401a      	ands	r2, r3
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d04:	f04f 31ff 	mov.w	r1, #4294967295
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0e:	43d9      	mvns	r1, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d14:	4313      	orrs	r3, r2
         );
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3724      	adds	r7, #36	@ 0x24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
	...

08000d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d34:	d301      	bcc.n	8000d3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d36:	2301      	movs	r3, #1
 8000d38:	e00f      	b.n	8000d5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d64 <SysTick_Config+0x40>)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d42:	210f      	movs	r1, #15
 8000d44:	f04f 30ff 	mov.w	r0, #4294967295
 8000d48:	f7ff ff8e 	bl	8000c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d4c:	4b05      	ldr	r3, [pc, #20]	@ (8000d64 <SysTick_Config+0x40>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d52:	4b04      	ldr	r3, [pc, #16]	@ (8000d64 <SysTick_Config+0x40>)
 8000d54:	2207      	movs	r2, #7
 8000d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	e000e010 	.word	0xe000e010

08000d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f7ff ff47 	bl	8000c04 <__NVIC_SetPriorityGrouping>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b086      	sub	sp, #24
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	4603      	mov	r3, r0
 8000d86:	60b9      	str	r1, [r7, #8]
 8000d88:	607a      	str	r2, [r7, #4]
 8000d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d90:	f7ff ff5c 	bl	8000c4c <__NVIC_GetPriorityGrouping>
 8000d94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	68b9      	ldr	r1, [r7, #8]
 8000d9a:	6978      	ldr	r0, [r7, #20]
 8000d9c:	f7ff ff8e 	bl	8000cbc <NVIC_EncodePriority>
 8000da0:	4602      	mov	r2, r0
 8000da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da6:	4611      	mov	r1, r2
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff ff5d 	bl	8000c68 <__NVIC_SetPriority>
}
 8000dae:	bf00      	nop
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff ffb0 	bl	8000d24 <SysTick_Config>
 8000dc4:	4603      	mov	r3, r0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b089      	sub	sp, #36	@ 0x24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
 8000dea:	e159      	b.n	80010a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dec:	2201      	movs	r2, #1
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	697a      	ldr	r2, [r7, #20]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	f040 8148 	bne.w	800109a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d00b      	beq.n	8000e2a <HAL_GPIO_Init+0x5a>
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d007      	beq.n	8000e2a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e1e:	2b11      	cmp	r3, #17
 8000e20:	d003      	beq.n	8000e2a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	2b12      	cmp	r3, #18
 8000e28:	d130      	bne.n	8000e8c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	2203      	movs	r2, #3
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	68da      	ldr	r2, [r3, #12]
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e60:	2201      	movs	r2, #1
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	091b      	lsrs	r3, r3, #4
 8000e76:	f003 0201 	and.w	r2, r3, #1
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	2203      	movs	r2, #3
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	689a      	ldr	r2, [r3, #8]
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d003      	beq.n	8000ecc <HAL_GPIO_Init+0xfc>
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	2b12      	cmp	r3, #18
 8000eca:	d123      	bne.n	8000f14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	08da      	lsrs	r2, r3, #3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3208      	adds	r2, #8
 8000ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	f003 0307 	and.w	r3, r3, #7
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	220f      	movs	r2, #15
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4013      	ands	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	691a      	ldr	r2, [r3, #16]
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	08da      	lsrs	r2, r3, #3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	3208      	adds	r2, #8
 8000f0e:	69b9      	ldr	r1, [r7, #24]
 8000f10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	2203      	movs	r2, #3
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 0203 	and.w	r2, r3, #3
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	f000 80a2 	beq.w	800109a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	4b57      	ldr	r3, [pc, #348]	@ (80010b8 <HAL_GPIO_Init+0x2e8>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f5e:	4a56      	ldr	r2, [pc, #344]	@ (80010b8 <HAL_GPIO_Init+0x2e8>)
 8000f60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f64:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f66:	4b54      	ldr	r3, [pc, #336]	@ (80010b8 <HAL_GPIO_Init+0x2e8>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f72:	4a52      	ldr	r2, [pc, #328]	@ (80010bc <HAL_GPIO_Init+0x2ec>)
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	089b      	lsrs	r3, r3, #2
 8000f78:	3302      	adds	r3, #2
 8000f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	f003 0303 	and.w	r3, r3, #3
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	220f      	movs	r2, #15
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4013      	ands	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a49      	ldr	r2, [pc, #292]	@ (80010c0 <HAL_GPIO_Init+0x2f0>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d019      	beq.n	8000fd2 <HAL_GPIO_Init+0x202>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a48      	ldr	r2, [pc, #288]	@ (80010c4 <HAL_GPIO_Init+0x2f4>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d013      	beq.n	8000fce <HAL_GPIO_Init+0x1fe>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a47      	ldr	r2, [pc, #284]	@ (80010c8 <HAL_GPIO_Init+0x2f8>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d00d      	beq.n	8000fca <HAL_GPIO_Init+0x1fa>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a46      	ldr	r2, [pc, #280]	@ (80010cc <HAL_GPIO_Init+0x2fc>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d007      	beq.n	8000fc6 <HAL_GPIO_Init+0x1f6>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a45      	ldr	r2, [pc, #276]	@ (80010d0 <HAL_GPIO_Init+0x300>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d101      	bne.n	8000fc2 <HAL_GPIO_Init+0x1f2>
 8000fbe:	2304      	movs	r3, #4
 8000fc0:	e008      	b.n	8000fd4 <HAL_GPIO_Init+0x204>
 8000fc2:	2307      	movs	r3, #7
 8000fc4:	e006      	b.n	8000fd4 <HAL_GPIO_Init+0x204>
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	e004      	b.n	8000fd4 <HAL_GPIO_Init+0x204>
 8000fca:	2302      	movs	r3, #2
 8000fcc:	e002      	b.n	8000fd4 <HAL_GPIO_Init+0x204>
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e000      	b.n	8000fd4 <HAL_GPIO_Init+0x204>
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	69fa      	ldr	r2, [r7, #28]
 8000fd6:	f002 0203 	and.w	r2, r2, #3
 8000fda:	0092      	lsls	r2, r2, #2
 8000fdc:	4093      	lsls	r3, r2
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fe4:	4935      	ldr	r1, [pc, #212]	@ (80010bc <HAL_GPIO_Init+0x2ec>)
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	089b      	lsrs	r3, r3, #2
 8000fea:	3302      	adds	r3, #2
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ff2:	4b38      	ldr	r3, [pc, #224]	@ (80010d4 <HAL_GPIO_Init+0x304>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4013      	ands	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001016:	4a2f      	ldr	r2, [pc, #188]	@ (80010d4 <HAL_GPIO_Init+0x304>)
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800101c:	4b2d      	ldr	r3, [pc, #180]	@ (80010d4 <HAL_GPIO_Init+0x304>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d003      	beq.n	8001040 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	4313      	orrs	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001040:	4a24      	ldr	r2, [pc, #144]	@ (80010d4 <HAL_GPIO_Init+0x304>)
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001046:	4b23      	ldr	r3, [pc, #140]	@ (80010d4 <HAL_GPIO_Init+0x304>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	43db      	mvns	r3, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4013      	ands	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800106a:	4a1a      	ldr	r2, [pc, #104]	@ (80010d4 <HAL_GPIO_Init+0x304>)
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001070:	4b18      	ldr	r3, [pc, #96]	@ (80010d4 <HAL_GPIO_Init+0x304>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	4313      	orrs	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001094:	4a0f      	ldr	r2, [pc, #60]	@ (80010d4 <HAL_GPIO_Init+0x304>)
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3301      	adds	r3, #1
 800109e:	61fb      	str	r3, [r7, #28]
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	2b0f      	cmp	r3, #15
 80010a4:	f67f aea2 	bls.w	8000dec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010a8:	bf00      	nop
 80010aa:	bf00      	nop
 80010ac:	3724      	adds	r7, #36	@ 0x24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40013800 	.word	0x40013800
 80010c0:	40020000 	.word	0x40020000
 80010c4:	40020400 	.word	0x40020400
 80010c8:	40020800 	.word	0x40020800
 80010cc:	40020c00 	.word	0x40020c00
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40013c00 	.word	0x40013c00

080010d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80010dc:	4b03      	ldr	r3, [pc, #12]	@ (80010ec <HAL_RCC_GetHCLKFreq+0x14>)
 80010de:	681b      	ldr	r3, [r3, #0]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	20000008 	.word	0x20000008

080010f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80010f4:	f7ff fff0 	bl	80010d8 <HAL_RCC_GetHCLKFreq>
 80010f8:	4602      	mov	r2, r0
 80010fa:	4b05      	ldr	r3, [pc, #20]	@ (8001110 <HAL_RCC_GetPCLK1Freq+0x20>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	0a9b      	lsrs	r3, r3, #10
 8001100:	f003 0307 	and.w	r3, r3, #7
 8001104:	4903      	ldr	r1, [pc, #12]	@ (8001114 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001106:	5ccb      	ldrb	r3, [r1, r3]
 8001108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800110c:	4618      	mov	r0, r3
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40023800 	.word	0x40023800
 8001114:	08001e54 	.word	0x08001e54

08001118 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800111c:	f7ff ffdc 	bl	80010d8 <HAL_RCC_GetHCLKFreq>
 8001120:	4602      	mov	r2, r0
 8001122:	4b05      	ldr	r3, [pc, #20]	@ (8001138 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	0b5b      	lsrs	r3, r3, #13
 8001128:	f003 0307 	and.w	r3, r3, #7
 800112c:	4903      	ldr	r1, [pc, #12]	@ (800113c <HAL_RCC_GetPCLK2Freq+0x24>)
 800112e:	5ccb      	ldrb	r3, [r1, r3]
 8001130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001134:	4618      	mov	r0, r3
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40023800 	.word	0x40023800
 800113c:	08001e54 	.word	0x08001e54

08001140 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d101      	bne.n	8001152 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e03f      	b.n	80011d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b00      	cmp	r3, #0
 800115c:	d106      	bne.n	800116c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f000 f837 	bl	80011da <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2224      	movs	r2, #36	@ 0x24
 8001170:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	68da      	ldr	r2, [r3, #12]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001182:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f000 f833 	bl	80011f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	691a      	ldr	r2, [r3, #16]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001198:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	695a      	ldr	r2, [r3, #20]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80011a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	68da      	ldr	r2, [r3, #12]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80011b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2220      	movs	r2, #32
 80011c4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2220      	movs	r2, #32
 80011cc:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80011da:	b480      	push	{r7}
 80011dc:	b083      	sub	sp, #12
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80011f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011f4:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80011fe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800120a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800120e:	68d9      	ldr	r1, [r3, #12]
 8001210:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	ea40 0301 	orr.w	r3, r0, r1
 800121a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800121c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001220:	689a      	ldr	r2, [r3, #8]
 8001222:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	431a      	orrs	r2, r3
 800122a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800122e:	695b      	ldr	r3, [r3, #20]
 8001230:	431a      	orrs	r2, r3
 8001232:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001236:	69db      	ldr	r3, [r3, #28]
 8001238:	4313      	orrs	r3, r2
 800123a:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
  MODIFY_REG(huart->Instance->CR1,
 800123e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800124a:	f021 010c 	bic.w	r1, r1, #12
 800124e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8001258:	430b      	orrs	r3, r1
 800125a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800125c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001268:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800126c:	6999      	ldr	r1, [r3, #24]
 800126e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	ea40 0301 	orr.w	r3, r0, r1
 8001278:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800127a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800127e:	69db      	ldr	r3, [r3, #28]
 8001280:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001284:	f040 824a 	bne.w	800171c <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001288:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	4b96      	ldr	r3, [pc, #600]	@ (80014e8 <UART_SetConfig+0x2f8>)
 8001290:	429a      	cmp	r2, r3
 8001292:	d006      	beq.n	80012a2 <UART_SetConfig+0xb2>
 8001294:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	4b94      	ldr	r3, [pc, #592]	@ (80014ec <UART_SetConfig+0x2fc>)
 800129c:	429a      	cmp	r2, r3
 800129e:	f040 8129 	bne.w	80014f4 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80012a2:	f7ff ff39 	bl	8001118 <HAL_RCC_GetPCLK2Freq>
 80012a6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80012aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80012ae:	2200      	movs	r2, #0
 80012b0:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 80012b4:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 80012b8:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	@ 0x1f0
 80012bc:	4622      	mov	r2, r4
 80012be:	462b      	mov	r3, r5
 80012c0:	1891      	adds	r1, r2, r2
 80012c2:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 80012c6:	415b      	adcs	r3, r3
 80012c8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80012cc:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 80012d0:	4621      	mov	r1, r4
 80012d2:	1851      	adds	r1, r2, r1
 80012d4:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 80012d8:	4629      	mov	r1, r5
 80012da:	414b      	adcs	r3, r1
 80012dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80012e0:	f04f 0200 	mov.w	r2, #0
 80012e4:	f04f 0300 	mov.w	r3, #0
 80012e8:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	@ 0xc8
 80012ec:	4649      	mov	r1, r9
 80012ee:	00cb      	lsls	r3, r1, #3
 80012f0:	4641      	mov	r1, r8
 80012f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80012f6:	4641      	mov	r1, r8
 80012f8:	00ca      	lsls	r2, r1, #3
 80012fa:	4610      	mov	r0, r2
 80012fc:	4619      	mov	r1, r3
 80012fe:	4603      	mov	r3, r0
 8001300:	4622      	mov	r2, r4
 8001302:	189b      	adds	r3, r3, r2
 8001304:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001308:	462b      	mov	r3, r5
 800130a:	460a      	mov	r2, r1
 800130c:	eb42 0303 	adc.w	r3, r2, r3
 8001310:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 8001314:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001320:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 8001324:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	@ 0x1e0
 8001328:	460b      	mov	r3, r1
 800132a:	18db      	adds	r3, r3, r3
 800132c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001330:	4613      	mov	r3, r2
 8001332:	eb42 0303 	adc.w	r3, r2, r3
 8001336:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800133a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800133e:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 8001342:	f7fe ff49 	bl	80001d8 <__aeabi_uldivmod>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4b69      	ldr	r3, [pc, #420]	@ (80014f0 <UART_SetConfig+0x300>)
 800134c:	fba3 2302 	umull	r2, r3, r3, r2
 8001350:	095b      	lsrs	r3, r3, #5
 8001352:	011c      	lsls	r4, r3, #4
 8001354:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001358:	2200      	movs	r2, #0
 800135a:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 800135e:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001362:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	@ 0x1d8
 8001366:	4642      	mov	r2, r8
 8001368:	464b      	mov	r3, r9
 800136a:	1891      	adds	r1, r2, r2
 800136c:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 8001370:	415b      	adcs	r3, r3
 8001372:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001376:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800137a:	4641      	mov	r1, r8
 800137c:	1851      	adds	r1, r2, r1
 800137e:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8001382:	4649      	mov	r1, r9
 8001384:	414b      	adcs	r3, r1
 8001386:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800138a:	f04f 0200 	mov.w	r2, #0
 800138e:	f04f 0300 	mov.w	r3, #0
 8001392:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	@ 0xb0
 8001396:	4659      	mov	r1, fp
 8001398:	00cb      	lsls	r3, r1, #3
 800139a:	4651      	mov	r1, sl
 800139c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80013a0:	4651      	mov	r1, sl
 80013a2:	00ca      	lsls	r2, r1, #3
 80013a4:	4610      	mov	r0, r2
 80013a6:	4619      	mov	r1, r3
 80013a8:	4603      	mov	r3, r0
 80013aa:	4642      	mov	r2, r8
 80013ac:	189b      	adds	r3, r3, r2
 80013ae:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80013b2:	464b      	mov	r3, r9
 80013b4:	460a      	mov	r2, r1
 80013b6:	eb42 0303 	adc.w	r3, r2, r3
 80013ba:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80013be:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80013ca:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 80013ce:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	@ 0x1c8
 80013d2:	460b      	mov	r3, r1
 80013d4:	18db      	adds	r3, r3, r3
 80013d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80013da:	4613      	mov	r3, r2
 80013dc:	eb42 0303 	adc.w	r3, r2, r3
 80013e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80013e4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 80013e8:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 80013ec:	f7fe fef4 	bl	80001d8 <__aeabi_uldivmod>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4611      	mov	r1, r2
 80013f6:	4b3e      	ldr	r3, [pc, #248]	@ (80014f0 <UART_SetConfig+0x300>)
 80013f8:	fba3 2301 	umull	r2, r3, r3, r1
 80013fc:	095b      	lsrs	r3, r3, #5
 80013fe:	2264      	movs	r2, #100	@ 0x64
 8001400:	fb02 f303 	mul.w	r3, r2, r3
 8001404:	1acb      	subs	r3, r1, r3
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800140c:	4b38      	ldr	r3, [pc, #224]	@ (80014f0 <UART_SetConfig+0x300>)
 800140e:	fba3 2302 	umull	r2, r3, r3, r2
 8001412:	095b      	lsrs	r3, r3, #5
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800141a:	441c      	add	r4, r3
 800141c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001420:	2200      	movs	r2, #0
 8001422:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001426:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 800142a:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	@ 0x1c0
 800142e:	4642      	mov	r2, r8
 8001430:	464b      	mov	r3, r9
 8001432:	1891      	adds	r1, r2, r2
 8001434:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8001438:	415b      	adcs	r3, r3
 800143a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800143e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8001442:	4641      	mov	r1, r8
 8001444:	1851      	adds	r1, r2, r1
 8001446:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 800144a:	4649      	mov	r1, r9
 800144c:	414b      	adcs	r3, r1
 800144e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	f04f 0300 	mov.w	r3, #0
 800145a:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	@ 0x98
 800145e:	4659      	mov	r1, fp
 8001460:	00cb      	lsls	r3, r1, #3
 8001462:	4651      	mov	r1, sl
 8001464:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001468:	4651      	mov	r1, sl
 800146a:	00ca      	lsls	r2, r1, #3
 800146c:	4610      	mov	r0, r2
 800146e:	4619      	mov	r1, r3
 8001470:	4603      	mov	r3, r0
 8001472:	4642      	mov	r2, r8
 8001474:	189b      	adds	r3, r3, r2
 8001476:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 800147a:	464b      	mov	r3, r9
 800147c:	460a      	mov	r2, r1
 800147e:	eb42 0303 	adc.w	r3, r2, r3
 8001482:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001486:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8001492:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8001496:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	@ 0x1b0
 800149a:	460b      	mov	r3, r1
 800149c:	18db      	adds	r3, r3, r3
 800149e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80014a2:	4613      	mov	r3, r2
 80014a4:	eb42 0303 	adc.w	r3, r2, r3
 80014a8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80014ac:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80014b0:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 80014b4:	f7fe fe90 	bl	80001d8 <__aeabi_uldivmod>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	4b0c      	ldr	r3, [pc, #48]	@ (80014f0 <UART_SetConfig+0x300>)
 80014be:	fba3 1302 	umull	r1, r3, r3, r2
 80014c2:	095b      	lsrs	r3, r3, #5
 80014c4:	2164      	movs	r1, #100	@ 0x64
 80014c6:	fb01 f303 	mul.w	r3, r1, r3
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	3332      	adds	r3, #50	@ 0x32
 80014d0:	4a07      	ldr	r2, [pc, #28]	@ (80014f0 <UART_SetConfig+0x300>)
 80014d2:	fba2 2303 	umull	r2, r3, r2, r3
 80014d6:	095b      	lsrs	r3, r3, #5
 80014d8:	f003 0207 	and.w	r2, r3, #7
 80014dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4422      	add	r2, r4
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	e34a      	b.n	8001b7e <UART_SetConfig+0x98e>
 80014e8:	40011000 	.word	0x40011000
 80014ec:	40011400 	.word	0x40011400
 80014f0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80014f4:	f7ff fdfc 	bl	80010f0 <HAL_RCC_GetPCLK1Freq>
 80014f8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80014fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001500:	2200      	movs	r2, #0
 8001502:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001506:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 800150a:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	@ 0x1a8
 800150e:	4622      	mov	r2, r4
 8001510:	462b      	mov	r3, r5
 8001512:	1891      	adds	r1, r2, r2
 8001514:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8001518:	415b      	adcs	r3, r3
 800151a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800151e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001522:	4621      	mov	r1, r4
 8001524:	eb12 0a01 	adds.w	sl, r2, r1
 8001528:	4629      	mov	r1, r5
 800152a:	eb43 0b01 	adc.w	fp, r3, r1
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	f04f 0300 	mov.w	r3, #0
 8001536:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800153a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800153e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001542:	4692      	mov	sl, r2
 8001544:	469b      	mov	fp, r3
 8001546:	4623      	mov	r3, r4
 8001548:	eb1a 0303 	adds.w	r3, sl, r3
 800154c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001550:	462b      	mov	r3, r5
 8001552:	eb4b 0303 	adc.w	r3, fp, r3
 8001556:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800155a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8001566:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 800156a:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	@ 0x198
 800156e:	460b      	mov	r3, r1
 8001570:	18db      	adds	r3, r3, r3
 8001572:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001576:	4613      	mov	r3, r2
 8001578:	eb42 0303 	adc.w	r3, r2, r3
 800157c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001580:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001584:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 8001588:	f7fe fe26 	bl	80001d8 <__aeabi_uldivmod>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	4b61      	ldr	r3, [pc, #388]	@ (8001718 <UART_SetConfig+0x528>)
 8001592:	fba3 2302 	umull	r2, r3, r3, r2
 8001596:	095b      	lsrs	r3, r3, #5
 8001598:	011c      	lsls	r4, r3, #4
 800159a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800159e:	2200      	movs	r2, #0
 80015a0:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 80015a4:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 80015a8:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	@ 0x190
 80015ac:	4642      	mov	r2, r8
 80015ae:	464b      	mov	r3, r9
 80015b0:	1891      	adds	r1, r2, r2
 80015b2:	67b9      	str	r1, [r7, #120]	@ 0x78
 80015b4:	415b      	adcs	r3, r3
 80015b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80015b8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80015bc:	4641      	mov	r1, r8
 80015be:	1851      	adds	r1, r2, r1
 80015c0:	6739      	str	r1, [r7, #112]	@ 0x70
 80015c2:	4649      	mov	r1, r9
 80015c4:	414b      	adcs	r3, r1
 80015c6:	677b      	str	r3, [r7, #116]	@ 0x74
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	@ 0x70
 80015d4:	4659      	mov	r1, fp
 80015d6:	00cb      	lsls	r3, r1, #3
 80015d8:	4651      	mov	r1, sl
 80015da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80015de:	4651      	mov	r1, sl
 80015e0:	00ca      	lsls	r2, r1, #3
 80015e2:	4610      	mov	r0, r2
 80015e4:	4619      	mov	r1, r3
 80015e6:	4603      	mov	r3, r0
 80015e8:	4642      	mov	r2, r8
 80015ea:	189b      	adds	r3, r3, r2
 80015ec:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80015f0:	464b      	mov	r3, r9
 80015f2:	460a      	mov	r2, r1
 80015f4:	eb42 0303 	adc.w	r3, r2, r3
 80015f8:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 80015fc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001608:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 800160c:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	@ 0x180
 8001610:	460b      	mov	r3, r1
 8001612:	18db      	adds	r3, r3, r3
 8001614:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001616:	4613      	mov	r3, r2
 8001618:	eb42 0303 	adc.w	r3, r2, r3
 800161c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800161e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001622:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8001626:	f7fe fdd7 	bl	80001d8 <__aeabi_uldivmod>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4611      	mov	r1, r2
 8001630:	4b39      	ldr	r3, [pc, #228]	@ (8001718 <UART_SetConfig+0x528>)
 8001632:	fba3 2301 	umull	r2, r3, r3, r1
 8001636:	095b      	lsrs	r3, r3, #5
 8001638:	2264      	movs	r2, #100	@ 0x64
 800163a:	fb02 f303 	mul.w	r3, r2, r3
 800163e:	1acb      	subs	r3, r1, r3
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001646:	4b34      	ldr	r3, [pc, #208]	@ (8001718 <UART_SetConfig+0x528>)
 8001648:	fba3 2302 	umull	r2, r3, r3, r2
 800164c:	095b      	lsrs	r3, r3, #5
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001654:	441c      	add	r4, r3
 8001656:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800165a:	2200      	movs	r2, #0
 800165c:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8001660:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001664:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	@ 0x178
 8001668:	4642      	mov	r2, r8
 800166a:	464b      	mov	r3, r9
 800166c:	1891      	adds	r1, r2, r2
 800166e:	6639      	str	r1, [r7, #96]	@ 0x60
 8001670:	415b      	adcs	r3, r3
 8001672:	667b      	str	r3, [r7, #100]	@ 0x64
 8001674:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001678:	4641      	mov	r1, r8
 800167a:	1851      	adds	r1, r2, r1
 800167c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800167e:	4649      	mov	r1, r9
 8001680:	414b      	adcs	r3, r1
 8001682:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001684:	f04f 0200 	mov.w	r2, #0
 8001688:	f04f 0300 	mov.w	r3, #0
 800168c:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 8001690:	4659      	mov	r1, fp
 8001692:	00cb      	lsls	r3, r1, #3
 8001694:	4651      	mov	r1, sl
 8001696:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800169a:	4651      	mov	r1, sl
 800169c:	00ca      	lsls	r2, r1, #3
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	4603      	mov	r3, r0
 80016a4:	4642      	mov	r2, r8
 80016a6:	189b      	adds	r3, r3, r2
 80016a8:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80016ac:	464b      	mov	r3, r9
 80016ae:	460a      	mov	r2, r1
 80016b0:	eb42 0303 	adc.w	r3, r2, r3
 80016b4:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 80016b8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 80016c4:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 80016c8:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	@ 0x168
 80016cc:	460b      	mov	r3, r1
 80016ce:	18db      	adds	r3, r3, r3
 80016d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80016d2:	4613      	mov	r3, r2
 80016d4:	eb42 0303 	adc.w	r3, r2, r3
 80016d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80016da:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80016de:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 80016e2:	f7fe fd79 	bl	80001d8 <__aeabi_uldivmod>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001718 <UART_SetConfig+0x528>)
 80016ec:	fba3 1302 	umull	r1, r3, r3, r2
 80016f0:	095b      	lsrs	r3, r3, #5
 80016f2:	2164      	movs	r1, #100	@ 0x64
 80016f4:	fb01 f303 	mul.w	r3, r1, r3
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	3332      	adds	r3, #50	@ 0x32
 80016fe:	4a06      	ldr	r2, [pc, #24]	@ (8001718 <UART_SetConfig+0x528>)
 8001700:	fba2 2303 	umull	r2, r3, r2, r3
 8001704:	095b      	lsrs	r3, r3, #5
 8001706:	f003 0207 	and.w	r2, r3, #7
 800170a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4422      	add	r2, r4
 8001712:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8001714:	e233      	b.n	8001b7e <UART_SetConfig+0x98e>
 8001716:	bf00      	nop
 8001718:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800171c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	4b8d      	ldr	r3, [pc, #564]	@ (8001958 <UART_SetConfig+0x768>)
 8001724:	429a      	cmp	r2, r3
 8001726:	d006      	beq.n	8001736 <UART_SetConfig+0x546>
 8001728:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	4b8b      	ldr	r3, [pc, #556]	@ (800195c <UART_SetConfig+0x76c>)
 8001730:	429a      	cmp	r2, r3
 8001732:	f040 8117 	bne.w	8001964 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001736:	f7ff fcef 	bl	8001118 <HAL_RCC_GetPCLK2Freq>
 800173a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800173e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001742:	2200      	movs	r2, #0
 8001744:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8001748:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 800174c:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8001750:	4622      	mov	r2, r4
 8001752:	462b      	mov	r3, r5
 8001754:	1891      	adds	r1, r2, r2
 8001756:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001758:	415b      	adcs	r3, r3
 800175a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800175c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001760:	4621      	mov	r1, r4
 8001762:	eb12 0801 	adds.w	r8, r2, r1
 8001766:	4629      	mov	r1, r5
 8001768:	eb43 0901 	adc.w	r9, r3, r1
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001778:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800177c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001780:	4690      	mov	r8, r2
 8001782:	4699      	mov	r9, r3
 8001784:	4623      	mov	r3, r4
 8001786:	eb18 0303 	adds.w	r3, r8, r3
 800178a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800178e:	462b      	mov	r3, r5
 8001790:	eb49 0303 	adc.w	r3, r9, r3
 8001794:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8001798:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80017a4:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	f04f 0300 	mov.w	r3, #0
 80017b0:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	@ 0x150
 80017b4:	4629      	mov	r1, r5
 80017b6:	008b      	lsls	r3, r1, #2
 80017b8:	4621      	mov	r1, r4
 80017ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017be:	4621      	mov	r1, r4
 80017c0:	008a      	lsls	r2, r1, #2
 80017c2:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 80017c6:	f7fe fd07 	bl	80001d8 <__aeabi_uldivmod>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4b64      	ldr	r3, [pc, #400]	@ (8001960 <UART_SetConfig+0x770>)
 80017d0:	fba3 2302 	umull	r2, r3, r3, r2
 80017d4:	095b      	lsrs	r3, r3, #5
 80017d6:	011c      	lsls	r4, r3, #4
 80017d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80017dc:	2200      	movs	r2, #0
 80017de:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 80017e2:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80017e6:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	@ 0x148
 80017ea:	4642      	mov	r2, r8
 80017ec:	464b      	mov	r3, r9
 80017ee:	1891      	adds	r1, r2, r2
 80017f0:	6439      	str	r1, [r7, #64]	@ 0x40
 80017f2:	415b      	adcs	r3, r3
 80017f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80017f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80017fa:	4641      	mov	r1, r8
 80017fc:	1851      	adds	r1, r2, r1
 80017fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001800:	4649      	mov	r1, r9
 8001802:	414b      	adcs	r3, r1
 8001804:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001806:	f04f 0200 	mov.w	r2, #0
 800180a:	f04f 0300 	mov.w	r3, #0
 800180e:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	@ 0x38
 8001812:	4659      	mov	r1, fp
 8001814:	00cb      	lsls	r3, r1, #3
 8001816:	4651      	mov	r1, sl
 8001818:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800181c:	4651      	mov	r1, sl
 800181e:	00ca      	lsls	r2, r1, #3
 8001820:	4610      	mov	r0, r2
 8001822:	4619      	mov	r1, r3
 8001824:	4603      	mov	r3, r0
 8001826:	4642      	mov	r2, r8
 8001828:	189b      	adds	r3, r3, r2
 800182a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800182e:	464b      	mov	r3, r9
 8001830:	460a      	mov	r2, r1
 8001832:	eb42 0303 	adc.w	r3, r2, r3
 8001836:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800183a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001846:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	f04f 0300 	mov.w	r3, #0
 8001852:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	@ 0x138
 8001856:	4649      	mov	r1, r9
 8001858:	008b      	lsls	r3, r1, #2
 800185a:	4641      	mov	r1, r8
 800185c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001860:	4641      	mov	r1, r8
 8001862:	008a      	lsls	r2, r1, #2
 8001864:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8001868:	f7fe fcb6 	bl	80001d8 <__aeabi_uldivmod>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4611      	mov	r1, r2
 8001872:	4b3b      	ldr	r3, [pc, #236]	@ (8001960 <UART_SetConfig+0x770>)
 8001874:	fba3 2301 	umull	r2, r3, r3, r1
 8001878:	095b      	lsrs	r3, r3, #5
 800187a:	2264      	movs	r2, #100	@ 0x64
 800187c:	fb02 f303 	mul.w	r3, r2, r3
 8001880:	1acb      	subs	r3, r1, r3
 8001882:	011b      	lsls	r3, r3, #4
 8001884:	3332      	adds	r3, #50	@ 0x32
 8001886:	4a36      	ldr	r2, [pc, #216]	@ (8001960 <UART_SetConfig+0x770>)
 8001888:	fba2 2303 	umull	r2, r3, r2, r3
 800188c:	095b      	lsrs	r3, r3, #5
 800188e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001892:	441c      	add	r4, r3
 8001894:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001898:	2200      	movs	r2, #0
 800189a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800189e:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 80018a2:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	@ 0x130
 80018a6:	4642      	mov	r2, r8
 80018a8:	464b      	mov	r3, r9
 80018aa:	1891      	adds	r1, r2, r2
 80018ac:	6339      	str	r1, [r7, #48]	@ 0x30
 80018ae:	415b      	adcs	r3, r3
 80018b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80018b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80018b6:	4641      	mov	r1, r8
 80018b8:	1851      	adds	r1, r2, r1
 80018ba:	62b9      	str	r1, [r7, #40]	@ 0x28
 80018bc:	4649      	mov	r1, r9
 80018be:	414b      	adcs	r3, r1
 80018c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018c2:	f04f 0200 	mov.w	r2, #0
 80018c6:	f04f 0300 	mov.w	r3, #0
 80018ca:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	@ 0x28
 80018ce:	4659      	mov	r1, fp
 80018d0:	00cb      	lsls	r3, r1, #3
 80018d2:	4651      	mov	r1, sl
 80018d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80018d8:	4651      	mov	r1, sl
 80018da:	00ca      	lsls	r2, r1, #3
 80018dc:	4610      	mov	r0, r2
 80018de:	4619      	mov	r1, r3
 80018e0:	4603      	mov	r3, r0
 80018e2:	4642      	mov	r2, r8
 80018e4:	189b      	adds	r3, r3, r2
 80018e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80018ea:	464b      	mov	r3, r9
 80018ec:	460a      	mov	r2, r1
 80018ee:	eb42 0303 	adc.w	r3, r2, r3
 80018f2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80018f6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001902:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 8001906:	f04f 0200 	mov.w	r2, #0
 800190a:	f04f 0300 	mov.w	r3, #0
 800190e:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	@ 0x120
 8001912:	4649      	mov	r1, r9
 8001914:	008b      	lsls	r3, r1, #2
 8001916:	4641      	mov	r1, r8
 8001918:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800191c:	4641      	mov	r1, r8
 800191e:	008a      	lsls	r2, r1, #2
 8001920:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8001924:	f7fe fc58 	bl	80001d8 <__aeabi_uldivmod>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4b0c      	ldr	r3, [pc, #48]	@ (8001960 <UART_SetConfig+0x770>)
 800192e:	fba3 1302 	umull	r1, r3, r3, r2
 8001932:	095b      	lsrs	r3, r3, #5
 8001934:	2164      	movs	r1, #100	@ 0x64
 8001936:	fb01 f303 	mul.w	r3, r1, r3
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	011b      	lsls	r3, r3, #4
 800193e:	3332      	adds	r3, #50	@ 0x32
 8001940:	4a07      	ldr	r2, [pc, #28]	@ (8001960 <UART_SetConfig+0x770>)
 8001942:	fba2 2303 	umull	r2, r3, r2, r3
 8001946:	095b      	lsrs	r3, r3, #5
 8001948:	f003 020f 	and.w	r2, r3, #15
 800194c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4422      	add	r2, r4
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	e112      	b.n	8001b7e <UART_SetConfig+0x98e>
 8001958:	40011000 	.word	0x40011000
 800195c:	40011400 	.word	0x40011400
 8001960:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8001964:	f7ff fbc4 	bl	80010f0 <HAL_RCC_GetPCLK1Freq>
 8001968:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800196c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001970:	2200      	movs	r2, #0
 8001972:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001976:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800197a:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	@ 0x118
 800197e:	4642      	mov	r2, r8
 8001980:	464b      	mov	r3, r9
 8001982:	1891      	adds	r1, r2, r2
 8001984:	6239      	str	r1, [r7, #32]
 8001986:	415b      	adcs	r3, r3
 8001988:	627b      	str	r3, [r7, #36]	@ 0x24
 800198a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800198e:	4641      	mov	r1, r8
 8001990:	1854      	adds	r4, r2, r1
 8001992:	4649      	mov	r1, r9
 8001994:	eb43 0501 	adc.w	r5, r3, r1
 8001998:	f04f 0200 	mov.w	r2, #0
 800199c:	f04f 0300 	mov.w	r3, #0
 80019a0:	00eb      	lsls	r3, r5, #3
 80019a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019a6:	00e2      	lsls	r2, r4, #3
 80019a8:	4614      	mov	r4, r2
 80019aa:	461d      	mov	r5, r3
 80019ac:	4643      	mov	r3, r8
 80019ae:	18e3      	adds	r3, r4, r3
 80019b0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80019b4:	464b      	mov	r3, r9
 80019b6:	eb45 0303 	adc.w	r3, r5, r3
 80019ba:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80019be:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80019ca:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	f04f 0300 	mov.w	r3, #0
 80019d6:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 80019da:	4629      	mov	r1, r5
 80019dc:	008b      	lsls	r3, r1, #2
 80019de:	4621      	mov	r1, r4
 80019e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80019e4:	4621      	mov	r1, r4
 80019e6:	008a      	lsls	r2, r1, #2
 80019e8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 80019ec:	f7fe fbf4 	bl	80001d8 <__aeabi_uldivmod>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4b65      	ldr	r3, [pc, #404]	@ (8001b8c <UART_SetConfig+0x99c>)
 80019f6:	fba3 2302 	umull	r2, r3, r3, r2
 80019fa:	095b      	lsrs	r3, r3, #5
 80019fc:	011c      	lsls	r4, r3, #4
 80019fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001a02:	2200      	movs	r2, #0
 8001a04:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001a08:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8001a0c:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 8001a10:	4642      	mov	r2, r8
 8001a12:	464b      	mov	r3, r9
 8001a14:	1891      	adds	r1, r2, r2
 8001a16:	61b9      	str	r1, [r7, #24]
 8001a18:	415b      	adcs	r3, r3
 8001a1a:	61fb      	str	r3, [r7, #28]
 8001a1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a20:	4641      	mov	r1, r8
 8001a22:	1851      	adds	r1, r2, r1
 8001a24:	6139      	str	r1, [r7, #16]
 8001a26:	4649      	mov	r1, r9
 8001a28:	414b      	adcs	r3, r1
 8001a2a:	617b      	str	r3, [r7, #20]
 8001a2c:	f04f 0200 	mov.w	r2, #0
 8001a30:	f04f 0300 	mov.w	r3, #0
 8001a34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a38:	4659      	mov	r1, fp
 8001a3a:	00cb      	lsls	r3, r1, #3
 8001a3c:	4651      	mov	r1, sl
 8001a3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001a42:	4651      	mov	r1, sl
 8001a44:	00ca      	lsls	r2, r1, #3
 8001a46:	4610      	mov	r0, r2
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	4642      	mov	r2, r8
 8001a4e:	189b      	adds	r3, r3, r2
 8001a50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001a54:	464b      	mov	r3, r9
 8001a56:	460a      	mov	r2, r1
 8001a58:	eb42 0303 	adc.w	r3, r2, r3
 8001a5c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001a60:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001a6c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	f04f 0300 	mov.w	r3, #0
 8001a78:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8001a7c:	4649      	mov	r1, r9
 8001a7e:	008b      	lsls	r3, r1, #2
 8001a80:	4641      	mov	r1, r8
 8001a82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001a86:	4641      	mov	r1, r8
 8001a88:	008a      	lsls	r2, r1, #2
 8001a8a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8001a8e:	f7fe fba3 	bl	80001d8 <__aeabi_uldivmod>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4611      	mov	r1, r2
 8001a98:	4b3c      	ldr	r3, [pc, #240]	@ (8001b8c <UART_SetConfig+0x99c>)
 8001a9a:	fba3 2301 	umull	r2, r3, r3, r1
 8001a9e:	095b      	lsrs	r3, r3, #5
 8001aa0:	2264      	movs	r2, #100	@ 0x64
 8001aa2:	fb02 f303 	mul.w	r3, r2, r3
 8001aa6:	1acb      	subs	r3, r1, r3
 8001aa8:	011b      	lsls	r3, r3, #4
 8001aaa:	3332      	adds	r3, #50	@ 0x32
 8001aac:	4a37      	ldr	r2, [pc, #220]	@ (8001b8c <UART_SetConfig+0x99c>)
 8001aae:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab2:	095b      	lsrs	r3, r3, #5
 8001ab4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ab8:	441c      	add	r4, r3
 8001aba:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001ac4:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001ac8:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8001acc:	4642      	mov	r2, r8
 8001ace:	464b      	mov	r3, r9
 8001ad0:	1891      	adds	r1, r2, r2
 8001ad2:	60b9      	str	r1, [r7, #8]
 8001ad4:	415b      	adcs	r3, r3
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001adc:	4641      	mov	r1, r8
 8001ade:	1851      	adds	r1, r2, r1
 8001ae0:	6039      	str	r1, [r7, #0]
 8001ae2:	4649      	mov	r1, r9
 8001ae4:	414b      	adcs	r3, r1
 8001ae6:	607b      	str	r3, [r7, #4]
 8001ae8:	f04f 0200 	mov.w	r2, #0
 8001aec:	f04f 0300 	mov.w	r3, #0
 8001af0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001af4:	4659      	mov	r1, fp
 8001af6:	00cb      	lsls	r3, r1, #3
 8001af8:	4651      	mov	r1, sl
 8001afa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001afe:	4651      	mov	r1, sl
 8001b00:	00ca      	lsls	r2, r1, #3
 8001b02:	4610      	mov	r0, r2
 8001b04:	4619      	mov	r1, r3
 8001b06:	4603      	mov	r3, r0
 8001b08:	4642      	mov	r2, r8
 8001b0a:	189b      	adds	r3, r3, r2
 8001b0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001b10:	464b      	mov	r3, r9
 8001b12:	460a      	mov	r2, r1
 8001b14:	eb42 0303 	adc.w	r3, r2, r3
 8001b18:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001b1c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001b28:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001b2c:	f04f 0200 	mov.w	r2, #0
 8001b30:	f04f 0300 	mov.w	r3, #0
 8001b34:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8001b38:	4649      	mov	r1, r9
 8001b3a:	008b      	lsls	r3, r1, #2
 8001b3c:	4641      	mov	r1, r8
 8001b3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001b42:	4641      	mov	r1, r8
 8001b44:	008a      	lsls	r2, r1, #2
 8001b46:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001b4a:	f7fe fb45 	bl	80001d8 <__aeabi_uldivmod>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	4b0e      	ldr	r3, [pc, #56]	@ (8001b8c <UART_SetConfig+0x99c>)
 8001b54:	fba3 1302 	umull	r1, r3, r3, r2
 8001b58:	095b      	lsrs	r3, r3, #5
 8001b5a:	2164      	movs	r1, #100	@ 0x64
 8001b5c:	fb01 f303 	mul.w	r3, r1, r3
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	011b      	lsls	r3, r3, #4
 8001b64:	3332      	adds	r3, #50	@ 0x32
 8001b66:	4a09      	ldr	r2, [pc, #36]	@ (8001b8c <UART_SetConfig+0x99c>)
 8001b68:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6c:	095b      	lsrs	r3, r3, #5
 8001b6e:	f003 020f 	and.w	r2, r3, #15
 8001b72:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4422      	add	r2, r4
 8001b7a:	609a      	str	r2, [r3, #8]
}
 8001b7c:	e7ff      	b.n	8001b7e <UART_SetConfig+0x98e>
 8001b7e:	bf00      	nop
 8001b80:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8001b84:	46bd      	mov	sp, r7
 8001b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b8a:	bf00      	nop
 8001b8c:	51eb851f 	.word	0x51eb851f

08001b90 <pa0_adc_read>:

static void adc_pa0_continous_conv_init(void);


uint32_t pa0_adc_read(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
	return HAL_ADC_GetValue(&hadc1);
 8001b94:	4802      	ldr	r0, [pc, #8]	@ (8001ba0 <pa0_adc_read+0x10>)
 8001b96:	f7fe fdf9 	bl	800078c <HAL_ADC_GetValue>
 8001b9a:	4603      	mov	r3, r0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	2000002c 	.word	0x2000002c

08001ba4 <adc_init_start>:

void adc_init_start(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
	adc_pa0_continous_conv_init();
 8001ba8:	f000 f808 	bl	8001bbc <adc_pa0_continous_conv_init>
	HAL_ADC_Start(&hadc1);
 8001bac:	4802      	ldr	r0, [pc, #8]	@ (8001bb8 <adc_init_start+0x14>)
 8001bae:	f7fe fd47 	bl	8000640 <HAL_ADC_Start>
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	2000002c 	.word	0x2000002c

08001bbc <adc_pa0_continous_conv_init>:

void adc_pa0_continous_conv_init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08c      	sub	sp, #48	@ 0x30
 8001bc0:	af00      	add	r7, sp, #0
	//Configure pa0 as analog pin

	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc2:	f107 031c 	add.w	r3, r7, #28
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	609a      	str	r2, [r3, #8]
 8001bce:	60da      	str	r2, [r3, #12]
 8001bd0:	611a      	str	r2, [r3, #16]
	 ADC_ChannelConfTypeDef sConfig = {0};
 8001bd2:	f107 030c 	add.w	r3, r7, #12
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
 8001bde:	60da      	str	r2, [r3, #12]


    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be0:	2300      	movs	r3, #0
 8001be2:	60bb      	str	r3, [r7, #8]
 8001be4:	4b2e      	ldr	r3, [pc, #184]	@ (8001ca0 <adc_pa0_continous_conv_init+0xe4>)
 8001be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be8:	4a2d      	ldr	r2, [pc, #180]	@ (8001ca0 <adc_pa0_continous_conv_init+0xe4>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf0:	4b2b      	ldr	r3, [pc, #172]	@ (8001ca0 <adc_pa0_continous_conv_init+0xe4>)
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	68bb      	ldr	r3, [r7, #8]

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c00:	2303      	movs	r3, #3
 8001c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c08:	f107 031c 	add.w	r3, r7, #28
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4825      	ldr	r0, [pc, #148]	@ (8001ca4 <adc_pa0_continous_conv_init+0xe8>)
 8001c10:	f7ff f8de 	bl	8000dd0 <HAL_GPIO_Init>


	//Configure adc module for continuous conversion

    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c14:	2300      	movs	r3, #0
 8001c16:	607b      	str	r3, [r7, #4]
 8001c18:	4b21      	ldr	r3, [pc, #132]	@ (8001ca0 <adc_pa0_continous_conv_init+0xe4>)
 8001c1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1c:	4a20      	ldr	r2, [pc, #128]	@ (8001ca0 <adc_pa0_continous_conv_init+0xe4>)
 8001c1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c22:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c24:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca0 <adc_pa0_continous_conv_init+0xe4>)
 8001c26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c2c:	607b      	str	r3, [r7, #4]
 8001c2e:	687b      	ldr	r3, [r7, #4]

    hadc1.Instance = ADC1;
 8001c30:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca8 <adc_pa0_continous_conv_init+0xec>)
 8001c32:	4a1e      	ldr	r2, [pc, #120]	@ (8001cac <adc_pa0_continous_conv_init+0xf0>)
 8001c34:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001c36:	4b1c      	ldr	r3, [pc, #112]	@ (8001ca8 <adc_pa0_continous_conv_init+0xec>)
 8001c38:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001c3c:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca8 <adc_pa0_continous_conv_init+0xec>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	609a      	str	r2, [r3, #8]
    hadc1.Init.ContinuousConvMode = ENABLE;
 8001c44:	4b18      	ldr	r3, [pc, #96]	@ (8001ca8 <adc_pa0_continous_conv_init+0xec>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c4a:	4b17      	ldr	r3, [pc, #92]	@ (8001ca8 <adc_pa0_continous_conv_init+0xec>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c52:	4b15      	ldr	r3, [pc, #84]	@ (8001ca8 <adc_pa0_continous_conv_init+0xec>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c58:	4b13      	ldr	r3, [pc, #76]	@ (8001ca8 <adc_pa0_continous_conv_init+0xec>)
 8001c5a:	4a15      	ldr	r2, [pc, #84]	@ (8001cb0 <adc_pa0_continous_conv_init+0xf4>)
 8001c5c:	629a      	str	r2, [r3, #40]	@ 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c5e:	4b12      	ldr	r3, [pc, #72]	@ (8001ca8 <adc_pa0_continous_conv_init+0xec>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 8001c64:	4b10      	ldr	r3, [pc, #64]	@ (8001ca8 <adc_pa0_continous_conv_init+0xec>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca8 <adc_pa0_continous_conv_init+0xec>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c72:	4b0d      	ldr	r3, [pc, #52]	@ (8001ca8 <adc_pa0_continous_conv_init+0xec>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	615a      	str	r2, [r3, #20]

    HAL_ADC_Init(&hadc1);
 8001c78:	480b      	ldr	r0, [pc, #44]	@ (8001ca8 <adc_pa0_continous_conv_init+0xec>)
 8001c7a:	f7fe fc93 	bl	80005a4 <HAL_ADC_Init>

    sConfig.Channel =  ADC_CHANNEL_0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
    sConfig.Rank = 1;
 8001c82:	2301      	movs	r3, #1
 8001c84:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001c86:	2307      	movs	r3, #7
 8001c88:	617b      	str	r3, [r7, #20]

    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001c8a:	f107 030c 	add.w	r3, r7, #12
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4805      	ldr	r0, [pc, #20]	@ (8001ca8 <adc_pa0_continous_conv_init+0xec>)
 8001c92:	f7fe fd89 	bl	80007a8 <HAL_ADC_ConfigChannel>


}
 8001c96:	bf00      	nop
 8001c98:	3730      	adds	r7, #48	@ 0x30
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40020000 	.word	0x40020000
 8001ca8:	2000002c 	.word	0x2000002c
 8001cac:	40012000 	.word	0x40012000
 8001cb0:	0f000001 	.word	0x0f000001

08001cb4 <main>:


uint32_t  sensor_value;

int main()
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0

  HAL_Init();
 8001cb8:	f7fe fc06 	bl	80004c8 <HAL_Init>
  uart_init();
 8001cbc:	f000 f810 	bl	8001ce0 <uart_init>

  adc_init_start();
 8001cc0:	f7ff ff70 	bl	8001ba4 <adc_init_start>

  while(1)
  {
	  sensor_value =  pa0_adc_read();
 8001cc4:	f7ff ff64 	bl	8001b90 <pa0_adc_read>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	4a01      	ldr	r2, [pc, #4]	@ (8001cd0 <main+0x1c>)
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	e7f9      	b.n	8001cc4 <main+0x10>
 8001cd0:	20000074 	.word	0x20000074

08001cd4 <SysTick_Handler>:
}



void  SysTick_Handler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001cd8:	f7fe fc50 	bl	800057c <HAL_IncTick>
}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <uart_init>:
	  {
	  	HAL_UART_Transmit(&huart2,(uint8_t*)&ch,1,10);
	  	return ch;
	  }
void uart_init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b088      	sub	sp, #32
 8001ce4:	af00      	add	r7, sp, #0

	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce6:	f107 030c 	add.w	r3, r7, #12
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
 8001cf2:	60da      	str	r2, [r3, #12]
 8001cf4:	611a      	str	r2, [r3, #16]

    //Enable UART pins clock access
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	4b25      	ldr	r3, [pc, #148]	@ (8001d90 <uart_init+0xb0>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfe:	4a24      	ldr	r2, [pc, #144]	@ (8001d90 <uart_init+0xb0>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d06:	4b22      	ldr	r3, [pc, #136]	@ (8001d90 <uart_init+0xb0>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	60bb      	str	r3, [r7, #8]
 8001d10:	68bb      	ldr	r3, [r7, #8]

	//Enable UART module clock access
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	607b      	str	r3, [r7, #4]
 8001d16:	4b1e      	ldr	r3, [pc, #120]	@ (8001d90 <uart_init+0xb0>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1a:	4a1d      	ldr	r2, [pc, #116]	@ (8001d90 <uart_init+0xb0>)
 8001d1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d22:	4b1b      	ldr	r3, [pc, #108]	@ (8001d90 <uart_init+0xb0>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d2a:	607b      	str	r3, [r7, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]


	//Configure pins to act as alternate func pins(UART)

     GPIO_InitStruct.Pin  = GPIO_PIN_2|GPIO_PIN_3;
 8001d2e:	230c      	movs	r3, #12
 8001d30:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d32:	2302      	movs	r3, #2
 8001d34:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d36:	2307      	movs	r3, #7
 8001d38:	61fb      	str	r3, [r7, #28]
     GPIO_InitStruct.Pull =  GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	61bb      	str	r3, [r7, #24]

     HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 8001d42:	f107 030c 	add.w	r3, r7, #12
 8001d46:	4619      	mov	r1, r3
 8001d48:	4812      	ldr	r0, [pc, #72]	@ (8001d94 <uart_init+0xb4>)
 8001d4a:	f7ff f841 	bl	8000dd0 <HAL_GPIO_Init>

     //Configure UART TX module
     huart2.Instance = USART2;
 8001d4e:	4b12      	ldr	r3, [pc, #72]	@ (8001d98 <uart_init+0xb8>)
 8001d50:	4a12      	ldr	r2, [pc, #72]	@ (8001d9c <uart_init+0xbc>)
 8001d52:	601a      	str	r2, [r3, #0]
     huart2.Init.BaudRate = 115200;
 8001d54:	4b10      	ldr	r3, [pc, #64]	@ (8001d98 <uart_init+0xb8>)
 8001d56:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d5a:	605a      	str	r2, [r3, #4]
     huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d98 <uart_init+0xb8>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	609a      	str	r2, [r3, #8]
     huart2.Init.StopBits = UART_STOPBITS_1;
 8001d62:	4b0d      	ldr	r3, [pc, #52]	@ (8001d98 <uart_init+0xb8>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	60da      	str	r2, [r3, #12]
     huart2.Init.Parity = UART_PARITY_NONE;
 8001d68:	4b0b      	ldr	r3, [pc, #44]	@ (8001d98 <uart_init+0xb8>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	611a      	str	r2, [r3, #16]
     huart2.Init.Mode = UART_MODE_TX;
 8001d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d98 <uart_init+0xb8>)
 8001d70:	2208      	movs	r2, #8
 8001d72:	615a      	str	r2, [r3, #20]
     huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d74:	4b08      	ldr	r3, [pc, #32]	@ (8001d98 <uart_init+0xb8>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	619a      	str	r2, [r3, #24]
     huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d7a:	4b07      	ldr	r3, [pc, #28]	@ (8001d98 <uart_init+0xb8>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	61da      	str	r2, [r3, #28]

     HAL_UART_Init(&huart2);
 8001d80:	4805      	ldr	r0, [pc, #20]	@ (8001d98 <uart_init+0xb8>)
 8001d82:	f7ff f9dd 	bl	8001140 <HAL_UART_Init>
          huart2.Init.OverSampling = UART_OVERSAMPLING_16;

          HAL_UART_Init(&huart2);*/


}
 8001d86:	bf00      	nop
 8001d88:	3720      	adds	r7, #32
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40020000 	.word	0x40020000
 8001d98:	20000078 	.word	0x20000078
 8001d9c:	40004400 	.word	0x40004400

08001da0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001da0:	480d      	ldr	r0, [pc, #52]	@ (8001dd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001da2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001da4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001da8:	480c      	ldr	r0, [pc, #48]	@ (8001ddc <LoopForever+0x6>)
  ldr r1, =_edata
 8001daa:	490d      	ldr	r1, [pc, #52]	@ (8001de0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001dac:	4a0d      	ldr	r2, [pc, #52]	@ (8001de4 <LoopForever+0xe>)
  movs r3, #0
 8001dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001db0:	e002      	b.n	8001db8 <LoopCopyDataInit>

08001db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001db6:	3304      	adds	r3, #4

08001db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dbc:	d3f9      	bcc.n	8001db2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001de8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dc0:	4c0a      	ldr	r4, [pc, #40]	@ (8001dec <LoopForever+0x16>)
  movs r3, #0
 8001dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dc4:	e001      	b.n	8001dca <LoopFillZerobss>

08001dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dc8:	3204      	adds	r2, #4

08001dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dcc:	d3fb      	bcc.n	8001dc6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001dce:	f000 f811 	bl	8001df4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dd2:	f7ff ff6f 	bl	8001cb4 <main>

08001dd6 <LoopForever>:

LoopForever:
  b LoopForever
 8001dd6:	e7fe      	b.n	8001dd6 <LoopForever>
  ldr   r0, =_estack
 8001dd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001de0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001de4:	08001e6c 	.word	0x08001e6c
  ldr r2, =_sbss
 8001de8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001dec:	200000b8 	.word	0x200000b8

08001df0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001df0:	e7fe      	b.n	8001df0 <ADC_IRQHandler>
	...

08001df4 <__libc_init_array>:
 8001df4:	b570      	push	{r4, r5, r6, lr}
 8001df6:	4d0d      	ldr	r5, [pc, #52]	@ (8001e2c <__libc_init_array+0x38>)
 8001df8:	4c0d      	ldr	r4, [pc, #52]	@ (8001e30 <__libc_init_array+0x3c>)
 8001dfa:	1b64      	subs	r4, r4, r5
 8001dfc:	10a4      	asrs	r4, r4, #2
 8001dfe:	2600      	movs	r6, #0
 8001e00:	42a6      	cmp	r6, r4
 8001e02:	d109      	bne.n	8001e18 <__libc_init_array+0x24>
 8001e04:	4d0b      	ldr	r5, [pc, #44]	@ (8001e34 <__libc_init_array+0x40>)
 8001e06:	4c0c      	ldr	r4, [pc, #48]	@ (8001e38 <__libc_init_array+0x44>)
 8001e08:	f000 f818 	bl	8001e3c <_init>
 8001e0c:	1b64      	subs	r4, r4, r5
 8001e0e:	10a4      	asrs	r4, r4, #2
 8001e10:	2600      	movs	r6, #0
 8001e12:	42a6      	cmp	r6, r4
 8001e14:	d105      	bne.n	8001e22 <__libc_init_array+0x2e>
 8001e16:	bd70      	pop	{r4, r5, r6, pc}
 8001e18:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e1c:	4798      	blx	r3
 8001e1e:	3601      	adds	r6, #1
 8001e20:	e7ee      	b.n	8001e00 <__libc_init_array+0xc>
 8001e22:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e26:	4798      	blx	r3
 8001e28:	3601      	adds	r6, #1
 8001e2a:	e7f2      	b.n	8001e12 <__libc_init_array+0x1e>
 8001e2c:	08001e64 	.word	0x08001e64
 8001e30:	08001e64 	.word	0x08001e64
 8001e34:	08001e64 	.word	0x08001e64
 8001e38:	08001e68 	.word	0x08001e68

08001e3c <_init>:
 8001e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e3e:	bf00      	nop
 8001e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e42:	bc08      	pop	{r3}
 8001e44:	469e      	mov	lr, r3
 8001e46:	4770      	bx	lr

08001e48 <_fini>:
 8001e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e4a:	bf00      	nop
 8001e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e4e:	bc08      	pop	{r3}
 8001e50:	469e      	mov	lr, r3
 8001e52:	4770      	bx	lr
