
HAL_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018d8  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08001a70  08001a70  00002a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a84  08001a84  0000300c  2**0
                  CONTENTS
  4 .ARM          00000008  08001a84  08001a84  00002a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001a8c  08001a8c  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a8c  08001a8c  00002a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001a90  08001a90  00002a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001a94  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  2000000c  08001aa0  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08001aa0  0000306c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000041d3  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f1c  00000000  00000000  0000720f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000528  00000000  00000000  00008130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003cb  00000000  00000000  00008658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000144a4  00000000  00000000  00008a23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000560f  00000000  00000000  0001cec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000823c8  00000000  00000000  000224d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a489e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000148c  00000000  00000000  000a48e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  000a5d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001a58 	.word	0x08001a58

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08001a58 	.word	0x08001a58

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000508 <HAL_Init+0x40>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000508 <HAL_Init+0x40>)
 80004d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000508 <HAL_Init+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000508 <HAL_Init+0x40>)
 80004de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e4:	4b08      	ldr	r3, [pc, #32]	@ (8000508 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a07      	ldr	r2, [pc, #28]	@ (8000508 <HAL_Init+0x40>)
 80004ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f0:	2003      	movs	r0, #3
 80004f2:	f000 f939 	bl	8000768 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f6:	200f      	movs	r0, #15
 80004f8:	f000 f810 	bl	800051c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004fc:	f000 f806 	bl	800050c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40023c00 	.word	0x40023c00

0800050c <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
	...

0800051c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000524:	4b12      	ldr	r3, [pc, #72]	@ (8000570 <HAL_InitTick+0x54>)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	4b12      	ldr	r3, [pc, #72]	@ (8000574 <HAL_InitTick+0x58>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	4619      	mov	r1, r3
 800052e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000532:	fbb3 f3f1 	udiv	r3, r3, r1
 8000536:	fbb2 f3f3 	udiv	r3, r2, r3
 800053a:	4618      	mov	r0, r3
 800053c:	f000 f93b 	bl	80007b6 <HAL_SYSTICK_Config>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000546:	2301      	movs	r3, #1
 8000548:	e00e      	b.n	8000568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2b0f      	cmp	r3, #15
 800054e:	d80a      	bhi.n	8000566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000550:	2200      	movs	r2, #0
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	f04f 30ff 	mov.w	r0, #4294967295
 8000558:	f000 f911 	bl	800077e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800055c:	4a06      	ldr	r2, [pc, #24]	@ (8000578 <HAL_InitTick+0x5c>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000562:	2300      	movs	r3, #0
 8000564:	e000      	b.n	8000568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000566:	2301      	movs	r3, #1
}
 8000568:	4618      	mov	r0, r3
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000008 	.word	0x20000008
 8000574:	20000004 	.word	0x20000004
 8000578:	20000000 	.word	0x20000000

0800057c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000580:	4b06      	ldr	r3, [pc, #24]	@ (800059c <HAL_IncTick+0x20>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	461a      	mov	r2, r3
 8000586:	4b06      	ldr	r3, [pc, #24]	@ (80005a0 <HAL_IncTick+0x24>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4413      	add	r3, r2
 800058c:	4a04      	ldr	r2, [pc, #16]	@ (80005a0 <HAL_IncTick+0x24>)
 800058e:	6013      	str	r3, [r2, #0]
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000004 	.word	0x20000004
 80005a0:	20000028 	.word	0x20000028

080005a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  return uwTick;
 80005a8:	4b03      	ldr	r3, [pc, #12]	@ (80005b8 <HAL_GetTick+0x14>)
 80005aa:	681b      	ldr	r3, [r3, #0]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000028 	.word	0x20000028

080005bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005c4:	f7ff ffee 	bl	80005a4 <HAL_GetTick>
 80005c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d4:	d005      	beq.n	80005e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000600 <HAL_Delay+0x44>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	461a      	mov	r2, r3
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	4413      	add	r3, r2
 80005e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005e2:	bf00      	nop
 80005e4:	f7ff ffde 	bl	80005a4 <HAL_GetTick>
 80005e8:	4602      	mov	r2, r0
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	1ad3      	subs	r3, r2, r3
 80005ee:	68fa      	ldr	r2, [r7, #12]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d8f7      	bhi.n	80005e4 <HAL_Delay+0x28>
  {
  }
}
 80005f4:	bf00      	nop
 80005f6:	bf00      	nop
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000004 	.word	0x20000004

08000604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	f003 0307 	and.w	r3, r3, #7
 8000612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000614:	4b0c      	ldr	r3, [pc, #48]	@ (8000648 <__NVIC_SetPriorityGrouping+0x44>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800061a:	68ba      	ldr	r2, [r7, #8]
 800061c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000620:	4013      	ands	r3, r2
 8000622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800062c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000630:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000636:	4a04      	ldr	r2, [pc, #16]	@ (8000648 <__NVIC_SetPriorityGrouping+0x44>)
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	60d3      	str	r3, [r2, #12]
}
 800063c:	bf00      	nop
 800063e:	3714      	adds	r7, #20
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000650:	4b04      	ldr	r3, [pc, #16]	@ (8000664 <__NVIC_GetPriorityGrouping+0x18>)
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	0a1b      	lsrs	r3, r3, #8
 8000656:	f003 0307 	and.w	r3, r3, #7
}
 800065a:	4618      	mov	r0, r3
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	e000ed00 	.word	0xe000ed00

08000668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	6039      	str	r1, [r7, #0]
 8000672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000678:	2b00      	cmp	r3, #0
 800067a:	db0a      	blt.n	8000692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	b2da      	uxtb	r2, r3
 8000680:	490c      	ldr	r1, [pc, #48]	@ (80006b4 <__NVIC_SetPriority+0x4c>)
 8000682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000686:	0112      	lsls	r2, r2, #4
 8000688:	b2d2      	uxtb	r2, r2
 800068a:	440b      	add	r3, r1
 800068c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000690:	e00a      	b.n	80006a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	b2da      	uxtb	r2, r3
 8000696:	4908      	ldr	r1, [pc, #32]	@ (80006b8 <__NVIC_SetPriority+0x50>)
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	f003 030f 	and.w	r3, r3, #15
 800069e:	3b04      	subs	r3, #4
 80006a0:	0112      	lsls	r2, r2, #4
 80006a2:	b2d2      	uxtb	r2, r2
 80006a4:	440b      	add	r3, r1
 80006a6:	761a      	strb	r2, [r3, #24]
}
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	e000e100 	.word	0xe000e100
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006bc:	b480      	push	{r7}
 80006be:	b089      	sub	sp, #36	@ 0x24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	f003 0307 	and.w	r3, r3, #7
 80006ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d0:	69fb      	ldr	r3, [r7, #28]
 80006d2:	f1c3 0307 	rsb	r3, r3, #7
 80006d6:	2b04      	cmp	r3, #4
 80006d8:	bf28      	it	cs
 80006da:	2304      	movcs	r3, #4
 80006dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	3304      	adds	r3, #4
 80006e2:	2b06      	cmp	r3, #6
 80006e4:	d902      	bls.n	80006ec <NVIC_EncodePriority+0x30>
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	3b03      	subs	r3, #3
 80006ea:	e000      	b.n	80006ee <NVIC_EncodePriority+0x32>
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f0:	f04f 32ff 	mov.w	r2, #4294967295
 80006f4:	69bb      	ldr	r3, [r7, #24]
 80006f6:	fa02 f303 	lsl.w	r3, r2, r3
 80006fa:	43da      	mvns	r2, r3
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	401a      	ands	r2, r3
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000704:	f04f 31ff 	mov.w	r1, #4294967295
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	fa01 f303 	lsl.w	r3, r1, r3
 800070e:	43d9      	mvns	r1, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000714:	4313      	orrs	r3, r2
         );
}
 8000716:	4618      	mov	r0, r3
 8000718:	3724      	adds	r7, #36	@ 0x24
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
	...

08000724 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3b01      	subs	r3, #1
 8000730:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000734:	d301      	bcc.n	800073a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000736:	2301      	movs	r3, #1
 8000738:	e00f      	b.n	800075a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800073a:	4a0a      	ldr	r2, [pc, #40]	@ (8000764 <SysTick_Config+0x40>)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3b01      	subs	r3, #1
 8000740:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000742:	210f      	movs	r1, #15
 8000744:	f04f 30ff 	mov.w	r0, #4294967295
 8000748:	f7ff ff8e 	bl	8000668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800074c:	4b05      	ldr	r3, [pc, #20]	@ (8000764 <SysTick_Config+0x40>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000752:	4b04      	ldr	r3, [pc, #16]	@ (8000764 <SysTick_Config+0x40>)
 8000754:	2207      	movs	r2, #7
 8000756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000758:	2300      	movs	r3, #0
}
 800075a:	4618      	mov	r0, r3
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	e000e010 	.word	0xe000e010

08000768 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f7ff ff47 	bl	8000604 <__NVIC_SetPriorityGrouping>
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800077e:	b580      	push	{r7, lr}
 8000780:	b086      	sub	sp, #24
 8000782:	af00      	add	r7, sp, #0
 8000784:	4603      	mov	r3, r0
 8000786:	60b9      	str	r1, [r7, #8]
 8000788:	607a      	str	r2, [r7, #4]
 800078a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000790:	f7ff ff5c 	bl	800064c <__NVIC_GetPriorityGrouping>
 8000794:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	68b9      	ldr	r1, [r7, #8]
 800079a:	6978      	ldr	r0, [r7, #20]
 800079c:	f7ff ff8e 	bl	80006bc <NVIC_EncodePriority>
 80007a0:	4602      	mov	r2, r0
 80007a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007a6:	4611      	mov	r1, r2
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff ff5d 	bl	8000668 <__NVIC_SetPriority>
}
 80007ae:	bf00      	nop
 80007b0:	3718      	adds	r7, #24
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b082      	sub	sp, #8
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f7ff ffb0 	bl	8000724 <SysTick_Config>
 80007c4:	4603      	mov	r3, r0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b089      	sub	sp, #36	@ 0x24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
 80007ea:	e159      	b.n	8000aa0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80007ec:	2201      	movs	r2, #1
 80007ee:	69fb      	ldr	r3, [r7, #28]
 80007f0:	fa02 f303 	lsl.w	r3, r2, r3
 80007f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	697a      	ldr	r2, [r7, #20]
 80007fc:	4013      	ands	r3, r2
 80007fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000800:	693a      	ldr	r2, [r7, #16]
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	429a      	cmp	r2, r3
 8000806:	f040 8148 	bne.w	8000a9a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	2b01      	cmp	r3, #1
 8000810:	d00b      	beq.n	800082a <HAL_GPIO_Init+0x5a>
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	2b02      	cmp	r3, #2
 8000818:	d007      	beq.n	800082a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800081e:	2b11      	cmp	r3, #17
 8000820:	d003      	beq.n	800082a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	2b12      	cmp	r3, #18
 8000828:	d130      	bne.n	800088c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	689b      	ldr	r3, [r3, #8]
 800082e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	2203      	movs	r2, #3
 8000836:	fa02 f303 	lsl.w	r3, r2, r3
 800083a:	43db      	mvns	r3, r3
 800083c:	69ba      	ldr	r2, [r7, #24]
 800083e:	4013      	ands	r3, r2
 8000840:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	68da      	ldr	r2, [r3, #12]
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	fa02 f303 	lsl.w	r3, r2, r3
 800084e:	69ba      	ldr	r2, [r7, #24]
 8000850:	4313      	orrs	r3, r2
 8000852:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	69ba      	ldr	r2, [r7, #24]
 8000858:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000860:	2201      	movs	r2, #1
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	fa02 f303 	lsl.w	r3, r2, r3
 8000868:	43db      	mvns	r3, r3
 800086a:	69ba      	ldr	r2, [r7, #24]
 800086c:	4013      	ands	r3, r2
 800086e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	091b      	lsrs	r3, r3, #4
 8000876:	f003 0201 	and.w	r2, r3, #1
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	fa02 f303 	lsl.w	r3, r2, r3
 8000880:	69ba      	ldr	r2, [r7, #24]
 8000882:	4313      	orrs	r3, r2
 8000884:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	69ba      	ldr	r2, [r7, #24]
 800088a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	005b      	lsls	r3, r3, #1
 8000896:	2203      	movs	r2, #3
 8000898:	fa02 f303 	lsl.w	r3, r2, r3
 800089c:	43db      	mvns	r3, r3
 800089e:	69ba      	ldr	r2, [r7, #24]
 80008a0:	4013      	ands	r3, r2
 80008a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	689a      	ldr	r2, [r3, #8]
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	fa02 f303 	lsl.w	r3, r2, r3
 80008b0:	69ba      	ldr	r2, [r7, #24]
 80008b2:	4313      	orrs	r3, r2
 80008b4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	69ba      	ldr	r2, [r7, #24]
 80008ba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	2b02      	cmp	r3, #2
 80008c2:	d003      	beq.n	80008cc <HAL_GPIO_Init+0xfc>
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	2b12      	cmp	r3, #18
 80008ca:	d123      	bne.n	8000914 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008cc:	69fb      	ldr	r3, [r7, #28]
 80008ce:	08da      	lsrs	r2, r3, #3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	3208      	adds	r2, #8
 80008d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	f003 0307 	and.w	r3, r3, #7
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	220f      	movs	r2, #15
 80008e4:	fa02 f303 	lsl.w	r3, r2, r3
 80008e8:	43db      	mvns	r3, r3
 80008ea:	69ba      	ldr	r2, [r7, #24]
 80008ec:	4013      	ands	r3, r2
 80008ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	691a      	ldr	r2, [r3, #16]
 80008f4:	69fb      	ldr	r3, [r7, #28]
 80008f6:	f003 0307 	and.w	r3, r3, #7
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	69ba      	ldr	r2, [r7, #24]
 8000902:	4313      	orrs	r3, r2
 8000904:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	08da      	lsrs	r2, r3, #3
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	3208      	adds	r2, #8
 800090e:	69b9      	ldr	r1, [r7, #24]
 8000910:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	2203      	movs	r2, #3
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	43db      	mvns	r3, r3
 8000926:	69ba      	ldr	r2, [r7, #24]
 8000928:	4013      	ands	r3, r2
 800092a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	f003 0203 	and.w	r2, r3, #3
 8000934:	69fb      	ldr	r3, [r7, #28]
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	69ba      	ldr	r2, [r7, #24]
 800093e:	4313      	orrs	r3, r2
 8000940:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	69ba      	ldr	r2, [r7, #24]
 8000946:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000950:	2b00      	cmp	r3, #0
 8000952:	f000 80a2 	beq.w	8000a9a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	4b57      	ldr	r3, [pc, #348]	@ (8000ab8 <HAL_GPIO_Init+0x2e8>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800095e:	4a56      	ldr	r2, [pc, #344]	@ (8000ab8 <HAL_GPIO_Init+0x2e8>)
 8000960:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000964:	6453      	str	r3, [r2, #68]	@ 0x44
 8000966:	4b54      	ldr	r3, [pc, #336]	@ (8000ab8 <HAL_GPIO_Init+0x2e8>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800096a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000972:	4a52      	ldr	r2, [pc, #328]	@ (8000abc <HAL_GPIO_Init+0x2ec>)
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	089b      	lsrs	r3, r3, #2
 8000978:	3302      	adds	r3, #2
 800097a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800097e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	f003 0303 	and.w	r3, r3, #3
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	220f      	movs	r2, #15
 800098a:	fa02 f303 	lsl.w	r3, r2, r3
 800098e:	43db      	mvns	r3, r3
 8000990:	69ba      	ldr	r2, [r7, #24]
 8000992:	4013      	ands	r3, r2
 8000994:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a49      	ldr	r2, [pc, #292]	@ (8000ac0 <HAL_GPIO_Init+0x2f0>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d019      	beq.n	80009d2 <HAL_GPIO_Init+0x202>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4a48      	ldr	r2, [pc, #288]	@ (8000ac4 <HAL_GPIO_Init+0x2f4>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d013      	beq.n	80009ce <HAL_GPIO_Init+0x1fe>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a47      	ldr	r2, [pc, #284]	@ (8000ac8 <HAL_GPIO_Init+0x2f8>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d00d      	beq.n	80009ca <HAL_GPIO_Init+0x1fa>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4a46      	ldr	r2, [pc, #280]	@ (8000acc <HAL_GPIO_Init+0x2fc>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d007      	beq.n	80009c6 <HAL_GPIO_Init+0x1f6>
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4a45      	ldr	r2, [pc, #276]	@ (8000ad0 <HAL_GPIO_Init+0x300>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d101      	bne.n	80009c2 <HAL_GPIO_Init+0x1f2>
 80009be:	2304      	movs	r3, #4
 80009c0:	e008      	b.n	80009d4 <HAL_GPIO_Init+0x204>
 80009c2:	2307      	movs	r3, #7
 80009c4:	e006      	b.n	80009d4 <HAL_GPIO_Init+0x204>
 80009c6:	2303      	movs	r3, #3
 80009c8:	e004      	b.n	80009d4 <HAL_GPIO_Init+0x204>
 80009ca:	2302      	movs	r3, #2
 80009cc:	e002      	b.n	80009d4 <HAL_GPIO_Init+0x204>
 80009ce:	2301      	movs	r3, #1
 80009d0:	e000      	b.n	80009d4 <HAL_GPIO_Init+0x204>
 80009d2:	2300      	movs	r3, #0
 80009d4:	69fa      	ldr	r2, [r7, #28]
 80009d6:	f002 0203 	and.w	r2, r2, #3
 80009da:	0092      	lsls	r2, r2, #2
 80009dc:	4093      	lsls	r3, r2
 80009de:	69ba      	ldr	r2, [r7, #24]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009e4:	4935      	ldr	r1, [pc, #212]	@ (8000abc <HAL_GPIO_Init+0x2ec>)
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	089b      	lsrs	r3, r3, #2
 80009ea:	3302      	adds	r3, #2
 80009ec:	69ba      	ldr	r2, [r7, #24]
 80009ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009f2:	4b38      	ldr	r3, [pc, #224]	@ (8000ad4 <HAL_GPIO_Init+0x304>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	43db      	mvns	r3, r3
 80009fc:	69ba      	ldr	r2, [r7, #24]
 80009fe:	4013      	ands	r3, r2
 8000a00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d003      	beq.n	8000a16 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000a0e:	69ba      	ldr	r2, [r7, #24]
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	4313      	orrs	r3, r2
 8000a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a16:	4a2f      	ldr	r2, [pc, #188]	@ (8000ad4 <HAL_GPIO_Init+0x304>)
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a1c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ad4 <HAL_GPIO_Init+0x304>)
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a22:	693b      	ldr	r3, [r7, #16]
 8000a24:	43db      	mvns	r3, r3
 8000a26:	69ba      	ldr	r2, [r7, #24]
 8000a28:	4013      	ands	r3, r2
 8000a2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d003      	beq.n	8000a40 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000a38:	69ba      	ldr	r2, [r7, #24]
 8000a3a:	693b      	ldr	r3, [r7, #16]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a40:	4a24      	ldr	r2, [pc, #144]	@ (8000ad4 <HAL_GPIO_Init+0x304>)
 8000a42:	69bb      	ldr	r3, [r7, #24]
 8000a44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a46:	4b23      	ldr	r3, [pc, #140]	@ (8000ad4 <HAL_GPIO_Init+0x304>)
 8000a48:	689b      	ldr	r3, [r3, #8]
 8000a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	43db      	mvns	r3, r3
 8000a50:	69ba      	ldr	r2, [r7, #24]
 8000a52:	4013      	ands	r3, r2
 8000a54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d003      	beq.n	8000a6a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000a62:	69ba      	ldr	r2, [r7, #24]
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a6a:	4a1a      	ldr	r2, [pc, #104]	@ (8000ad4 <HAL_GPIO_Init+0x304>)
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a70:	4b18      	ldr	r3, [pc, #96]	@ (8000ad4 <HAL_GPIO_Init+0x304>)
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	43db      	mvns	r3, r3
 8000a7a:	69ba      	ldr	r2, [r7, #24]
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d003      	beq.n	8000a94 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000a8c:	69ba      	ldr	r2, [r7, #24]
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a94:	4a0f      	ldr	r2, [pc, #60]	@ (8000ad4 <HAL_GPIO_Init+0x304>)
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	61fb      	str	r3, [r7, #28]
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	2b0f      	cmp	r3, #15
 8000aa4:	f67f aea2 	bls.w	80007ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000aa8:	bf00      	nop
 8000aaa:	bf00      	nop
 8000aac:	3724      	adds	r7, #36	@ 0x24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40013800 	.word	0x40013800
 8000ac0:	40020000 	.word	0x40020000
 8000ac4:	40020400 	.word	0x40020400
 8000ac8:	40020800 	.word	0x40020800
 8000acc:	40020c00 	.word	0x40020c00
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	40013c00 	.word	0x40013c00

08000ad8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000adc:	4b03      	ldr	r3, [pc, #12]	@ (8000aec <HAL_RCC_GetHCLKFreq+0x14>)
 8000ade:	681b      	ldr	r3, [r3, #0]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	20000008 	.word	0x20000008

08000af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000af4:	f7ff fff0 	bl	8000ad8 <HAL_RCC_GetHCLKFreq>
 8000af8:	4602      	mov	r2, r0
 8000afa:	4b05      	ldr	r3, [pc, #20]	@ (8000b10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000afc:	689b      	ldr	r3, [r3, #8]
 8000afe:	0a9b      	lsrs	r3, r3, #10
 8000b00:	f003 0307 	and.w	r3, r3, #7
 8000b04:	4903      	ldr	r1, [pc, #12]	@ (8000b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000b06:	5ccb      	ldrb	r3, [r1, r3]
 8000b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40023800 	.word	0x40023800
 8000b14:	08001a7c 	.word	0x08001a7c

08000b18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000b1c:	f7ff ffdc 	bl	8000ad8 <HAL_RCC_GetHCLKFreq>
 8000b20:	4602      	mov	r2, r0
 8000b22:	4b05      	ldr	r3, [pc, #20]	@ (8000b38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000b24:	689b      	ldr	r3, [r3, #8]
 8000b26:	0b5b      	lsrs	r3, r3, #13
 8000b28:	f003 0307 	and.w	r3, r3, #7
 8000b2c:	4903      	ldr	r1, [pc, #12]	@ (8000b3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8000b2e:	5ccb      	ldrb	r3, [r1, r3]
 8000b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	08001a7c 	.word	0x08001a7c

08000b40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d101      	bne.n	8000b52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e03f      	b.n	8000bd2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d106      	bne.n	8000b6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2200      	movs	r2, #0
 8000b62:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f000 f837 	bl	8000bda <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2224      	movs	r2, #36	@ 0x24
 8000b70:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	68da      	ldr	r2, [r3, #12]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000b82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f000 f9bb 	bl	8000f00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	691a      	ldr	r2, [r3, #16]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8000b98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	695a      	ldr	r2, [r3, #20]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8000ba8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	68da      	ldr	r2, [r3, #12]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000bb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2220      	movs	r2, #32
 8000bc4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2220      	movs	r2, #32
 8000bcc:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	b083      	sub	sp, #12
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b088      	sub	sp, #32
 8000bf2:	af02      	add	r7, sp, #8
 8000bf4:	60f8      	str	r0, [r7, #12]
 8000bf6:	60b9      	str	r1, [r7, #8]
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	2b20      	cmp	r3, #32
 8000c0c:	f040 8083 	bne.w	8000d16 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d002      	beq.n	8000c1c <HAL_UART_Transmit+0x2e>
 8000c16:	88fb      	ldrh	r3, [r7, #6]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d101      	bne.n	8000c20 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	e07b      	b.n	8000d18 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d101      	bne.n	8000c2e <HAL_UART_Transmit+0x40>
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	e074      	b.n	8000d18 <HAL_UART_Transmit+0x12a>
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	2201      	movs	r2, #1
 8000c32:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	2221      	movs	r2, #33	@ 0x21
 8000c40:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8000c44:	f7ff fcae 	bl	80005a4 <HAL_GetTick>
 8000c48:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	88fa      	ldrh	r2, [r7, #6]
 8000c4e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	88fa      	ldrh	r2, [r7, #6]
 8000c54:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    while (huart->TxXferCount > 0U)
 8000c5e:	e042      	b.n	8000ce6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	3b01      	subs	r3, #1
 8000c68:	b29a      	uxth	r2, r3
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	84da      	strh	r2, [r3, #38]	@ 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000c76:	d122      	bne.n	8000cbe <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	9300      	str	r3, [sp, #0]
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2180      	movs	r1, #128	@ 0x80
 8000c82:	68f8      	ldr	r0, [r7, #12]
 8000c84:	f000 f8f2 	bl	8000e6c <UART_WaitOnFlagUntilTimeout>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	e042      	b.n	8000d18 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	881b      	ldrh	r3, [r3, #0]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000ca4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	691b      	ldr	r3, [r3, #16]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d103      	bne.n	8000cb6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	3302      	adds	r3, #2
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	e017      	b.n	8000ce6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	e013      	b.n	8000ce6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	9300      	str	r3, [sp, #0]
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2180      	movs	r1, #128	@ 0x80
 8000cc8:	68f8      	ldr	r0, [r7, #12]
 8000cca:	f000 f8cf 	bl	8000e6c <UART_WaitOnFlagUntilTimeout>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	e01f      	b.n	8000d18 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	1c5a      	adds	r2, r3, #1
 8000cdc:	60ba      	str	r2, [r7, #8]
 8000cde:	781a      	ldrb	r2, [r3, #0]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d1b7      	bne.n	8000c60 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	9300      	str	r3, [sp, #0]
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2140      	movs	r1, #64	@ 0x40
 8000cfa:	68f8      	ldr	r0, [r7, #12]
 8000cfc:	f000 f8b6 	bl	8000e6c <UART_WaitOnFlagUntilTimeout>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8000d06:	2303      	movs	r3, #3
 8000d08:	e006      	b.n	8000d18 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	2220      	movs	r2, #32
 8000d0e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    return HAL_OK;
 8000d12:	2300      	movs	r3, #0
 8000d14:	e000      	b.n	8000d18 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8000d16:	2302      	movs	r3, #2
  }
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b088      	sub	sp, #32
 8000d24:	af02      	add	r7, sp, #8
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	603b      	str	r3, [r7, #0]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	2b20      	cmp	r3, #32
 8000d3e:	f040 8090 	bne.w	8000e62 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d002      	beq.n	8000d4e <HAL_UART_Receive+0x2e>
 8000d48:	88fb      	ldrh	r3, [r7, #6]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d101      	bne.n	8000d52 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e088      	b.n	8000e64 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d101      	bne.n	8000d60 <HAL_UART_Receive+0x40>
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	e081      	b.n	8000e64 <HAL_UART_Receive+0x144>
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	2201      	movs	r2, #1
 8000d64:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	2222      	movs	r2, #34	@ 0x22
 8000d72:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8000d76:	f7ff fc15 	bl	80005a4 <HAL_GetTick>
 8000d7a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	88fa      	ldrh	r2, [r7, #6]
 8000d80:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	88fa      	ldrh	r2, [r7, #6]
 8000d86:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8000d90:	e05c      	b.n	8000e4c <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	b29a      	uxth	r2, r3
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	85da      	strh	r2, [r3, #46]	@ 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000da8:	d12b      	bne.n	8000e02 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	9300      	str	r3, [sp, #0]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	2200      	movs	r2, #0
 8000db2:	2120      	movs	r1, #32
 8000db4:	68f8      	ldr	r0, [r7, #12]
 8000db6:	f000 f859 	bl	8000e6c <UART_WaitOnFlagUntilTimeout>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	e04f      	b.n	8000e64 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	691b      	ldr	r3, [r3, #16]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d10c      	bne.n	8000dea <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	3302      	adds	r3, #2
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	e030      	b.n	8000e4c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	b29a      	uxth	r2, r3
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	e024      	b.n	8000e4c <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	9300      	str	r3, [sp, #0]
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2120      	movs	r1, #32
 8000e0c:	68f8      	ldr	r0, [r7, #12]
 8000e0e:	f000 f82d 	bl	8000e6c <UART_WaitOnFlagUntilTimeout>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	e023      	b.n	8000e64 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	691b      	ldr	r3, [r3, #16]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d108      	bne.n	8000e36 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	6859      	ldr	r1, [r3, #4]
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	1c5a      	adds	r2, r3, #1
 8000e2e:	60ba      	str	r2, [r7, #8]
 8000e30:	b2ca      	uxtb	r2, r1
 8000e32:	701a      	strb	r2, [r3, #0]
 8000e34:	e00a      	b.n	8000e4c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	1c59      	adds	r1, r3, #1
 8000e42:	60b9      	str	r1, [r7, #8]
 8000e44:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8000e48:	b2d2      	uxtb	r2, r2
 8000e4a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d19d      	bne.n	8000d92 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	2220      	movs	r2, #32
 8000e5a:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

    return HAL_OK;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	e000      	b.n	8000e64 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8000e62:	2302      	movs	r3, #2
  }
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3718      	adds	r7, #24
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	603b      	str	r3, [r7, #0]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000e7c:	e02c      	b.n	8000ed8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e84:	d028      	beq.n	8000ed8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d007      	beq.n	8000e9c <UART_WaitOnFlagUntilTimeout+0x30>
 8000e8c:	f7ff fb8a 	bl	80005a4 <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d21d      	bcs.n	8000ed8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	68da      	ldr	r2, [r3, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8000eaa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	695a      	ldr	r2, [r3, #20]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f022 0201 	bic.w	r2, r2, #1
 8000eba:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2220      	movs	r2, #32
 8000ec0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2220      	movs	r2, #32
 8000ec8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	e00f      	b.n	8000ef8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	bf0c      	ite	eq
 8000ee8:	2301      	moveq	r3, #1
 8000eea:	2300      	movne	r3, #0
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	461a      	mov	r2, r3
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d0c3      	beq.n	8000e7e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000f00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f04:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000f0e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	691b      	ldr	r3, [r3, #16]
 8000f16:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8000f1a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8000f1e:	68d9      	ldr	r1, [r3, #12]
 8000f20:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	ea40 0301 	orr.w	r3, r0, r1
 8000f2a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f2c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8000f30:	689a      	ldr	r2, [r3, #8]
 8000f32:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8000f36:	691b      	ldr	r3, [r3, #16]
 8000f38:	431a      	orrs	r2, r3
 8000f3a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8000f3e:	695b      	ldr	r3, [r3, #20]
 8000f40:	431a      	orrs	r2, r3
 8000f42:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8000f46:	69db      	ldr	r3, [r3, #28]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
  MODIFY_REG(huart->Instance->CR1,
 8000f4e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8000f5a:	f021 010c 	bic.w	r1, r1, #12
 8000f5e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8000f68:	430b      	orrs	r3, r1
 8000f6a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000f6c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	695b      	ldr	r3, [r3, #20]
 8000f74:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8000f78:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8000f7c:	6999      	ldr	r1, [r3, #24]
 8000f7e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	ea40 0301 	orr.w	r3, r0, r1
 8000f88:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f8a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8000f8e:	69db      	ldr	r3, [r3, #28]
 8000f90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000f94:	f040 824a 	bne.w	800142c <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000f98:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	4b96      	ldr	r3, [pc, #600]	@ (80011f8 <UART_SetConfig+0x2f8>)
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d006      	beq.n	8000fb2 <UART_SetConfig+0xb2>
 8000fa4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	4b94      	ldr	r3, [pc, #592]	@ (80011fc <UART_SetConfig+0x2fc>)
 8000fac:	429a      	cmp	r2, r3
 8000fae:	f040 8129 	bne.w	8001204 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8000fb2:	f7ff fdb1 	bl	8000b18 <HAL_RCC_GetPCLK2Freq>
 8000fb6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8000fba:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 8000fc4:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 8000fc8:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	@ 0x1f0
 8000fcc:	4622      	mov	r2, r4
 8000fce:	462b      	mov	r3, r5
 8000fd0:	1891      	adds	r1, r2, r2
 8000fd2:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8000fd6:	415b      	adcs	r3, r3
 8000fd8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000fdc:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8000fe0:	4621      	mov	r1, r4
 8000fe2:	1851      	adds	r1, r2, r1
 8000fe4:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 8000fe8:	4629      	mov	r1, r5
 8000fea:	414b      	adcs	r3, r1
 8000fec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000ff0:	f04f 0200 	mov.w	r2, #0
 8000ff4:	f04f 0300 	mov.w	r3, #0
 8000ff8:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	@ 0xc8
 8000ffc:	4649      	mov	r1, r9
 8000ffe:	00cb      	lsls	r3, r1, #3
 8001000:	4641      	mov	r1, r8
 8001002:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001006:	4641      	mov	r1, r8
 8001008:	00ca      	lsls	r2, r1, #3
 800100a:	4610      	mov	r0, r2
 800100c:	4619      	mov	r1, r3
 800100e:	4603      	mov	r3, r0
 8001010:	4622      	mov	r2, r4
 8001012:	189b      	adds	r3, r3, r2
 8001014:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001018:	462b      	mov	r3, r5
 800101a:	460a      	mov	r2, r1
 800101c:	eb42 0303 	adc.w	r3, r2, r3
 8001020:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 8001024:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001030:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 8001034:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	@ 0x1e0
 8001038:	460b      	mov	r3, r1
 800103a:	18db      	adds	r3, r3, r3
 800103c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001040:	4613      	mov	r3, r2
 8001042:	eb42 0303 	adc.w	r3, r2, r3
 8001046:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800104a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800104e:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 8001052:	f7ff f8c1 	bl	80001d8 <__aeabi_uldivmod>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	4b69      	ldr	r3, [pc, #420]	@ (8001200 <UART_SetConfig+0x300>)
 800105c:	fba3 2302 	umull	r2, r3, r3, r2
 8001060:	095b      	lsrs	r3, r3, #5
 8001062:	011c      	lsls	r4, r3, #4
 8001064:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001068:	2200      	movs	r2, #0
 800106a:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 800106e:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001072:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	@ 0x1d8
 8001076:	4642      	mov	r2, r8
 8001078:	464b      	mov	r3, r9
 800107a:	1891      	adds	r1, r2, r2
 800107c:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 8001080:	415b      	adcs	r3, r3
 8001082:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001086:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800108a:	4641      	mov	r1, r8
 800108c:	1851      	adds	r1, r2, r1
 800108e:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8001092:	4649      	mov	r1, r9
 8001094:	414b      	adcs	r3, r1
 8001096:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	f04f 0300 	mov.w	r3, #0
 80010a2:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	@ 0xb0
 80010a6:	4659      	mov	r1, fp
 80010a8:	00cb      	lsls	r3, r1, #3
 80010aa:	4651      	mov	r1, sl
 80010ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80010b0:	4651      	mov	r1, sl
 80010b2:	00ca      	lsls	r2, r1, #3
 80010b4:	4610      	mov	r0, r2
 80010b6:	4619      	mov	r1, r3
 80010b8:	4603      	mov	r3, r0
 80010ba:	4642      	mov	r2, r8
 80010bc:	189b      	adds	r3, r3, r2
 80010be:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80010c2:	464b      	mov	r3, r9
 80010c4:	460a      	mov	r2, r1
 80010c6:	eb42 0303 	adc.w	r3, r2, r3
 80010ca:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80010ce:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80010da:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 80010de:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	@ 0x1c8
 80010e2:	460b      	mov	r3, r1
 80010e4:	18db      	adds	r3, r3, r3
 80010e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80010ea:	4613      	mov	r3, r2
 80010ec:	eb42 0303 	adc.w	r3, r2, r3
 80010f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80010f4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 80010f8:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 80010fc:	f7ff f86c 	bl	80001d8 <__aeabi_uldivmod>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4611      	mov	r1, r2
 8001106:	4b3e      	ldr	r3, [pc, #248]	@ (8001200 <UART_SetConfig+0x300>)
 8001108:	fba3 2301 	umull	r2, r3, r3, r1
 800110c:	095b      	lsrs	r3, r3, #5
 800110e:	2264      	movs	r2, #100	@ 0x64
 8001110:	fb02 f303 	mul.w	r3, r2, r3
 8001114:	1acb      	subs	r3, r1, r3
 8001116:	00db      	lsls	r3, r3, #3
 8001118:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800111c:	4b38      	ldr	r3, [pc, #224]	@ (8001200 <UART_SetConfig+0x300>)
 800111e:	fba3 2302 	umull	r2, r3, r3, r2
 8001122:	095b      	lsrs	r3, r3, #5
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800112a:	441c      	add	r4, r3
 800112c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001130:	2200      	movs	r2, #0
 8001132:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001136:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 800113a:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	@ 0x1c0
 800113e:	4642      	mov	r2, r8
 8001140:	464b      	mov	r3, r9
 8001142:	1891      	adds	r1, r2, r2
 8001144:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8001148:	415b      	adcs	r3, r3
 800114a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800114e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8001152:	4641      	mov	r1, r8
 8001154:	1851      	adds	r1, r2, r1
 8001156:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 800115a:	4649      	mov	r1, r9
 800115c:	414b      	adcs	r3, r1
 800115e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	f04f 0300 	mov.w	r3, #0
 800116a:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	@ 0x98
 800116e:	4659      	mov	r1, fp
 8001170:	00cb      	lsls	r3, r1, #3
 8001172:	4651      	mov	r1, sl
 8001174:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001178:	4651      	mov	r1, sl
 800117a:	00ca      	lsls	r2, r1, #3
 800117c:	4610      	mov	r0, r2
 800117e:	4619      	mov	r1, r3
 8001180:	4603      	mov	r3, r0
 8001182:	4642      	mov	r2, r8
 8001184:	189b      	adds	r3, r3, r2
 8001186:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 800118a:	464b      	mov	r3, r9
 800118c:	460a      	mov	r2, r1
 800118e:	eb42 0303 	adc.w	r3, r2, r3
 8001192:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001196:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 80011a2:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 80011a6:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	@ 0x1b0
 80011aa:	460b      	mov	r3, r1
 80011ac:	18db      	adds	r3, r3, r3
 80011ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80011b2:	4613      	mov	r3, r2
 80011b4:	eb42 0303 	adc.w	r3, r2, r3
 80011b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80011bc:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80011c0:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 80011c4:	f7ff f808 	bl	80001d8 <__aeabi_uldivmod>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001200 <UART_SetConfig+0x300>)
 80011ce:	fba3 1302 	umull	r1, r3, r3, r2
 80011d2:	095b      	lsrs	r3, r3, #5
 80011d4:	2164      	movs	r1, #100	@ 0x64
 80011d6:	fb01 f303 	mul.w	r3, r1, r3
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	3332      	adds	r3, #50	@ 0x32
 80011e0:	4a07      	ldr	r2, [pc, #28]	@ (8001200 <UART_SetConfig+0x300>)
 80011e2:	fba2 2303 	umull	r2, r3, r2, r3
 80011e6:	095b      	lsrs	r3, r3, #5
 80011e8:	f003 0207 	and.w	r2, r3, #7
 80011ec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4422      	add	r2, r4
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	e34a      	b.n	800188e <UART_SetConfig+0x98e>
 80011f8:	40011000 	.word	0x40011000
 80011fc:	40011400 	.word	0x40011400
 8001200:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001204:	f7ff fc74 	bl	8000af0 <HAL_RCC_GetPCLK1Freq>
 8001208:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800120c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001210:	2200      	movs	r2, #0
 8001212:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001216:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 800121a:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	@ 0x1a8
 800121e:	4622      	mov	r2, r4
 8001220:	462b      	mov	r3, r5
 8001222:	1891      	adds	r1, r2, r2
 8001224:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8001228:	415b      	adcs	r3, r3
 800122a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800122e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001232:	4621      	mov	r1, r4
 8001234:	eb12 0a01 	adds.w	sl, r2, r1
 8001238:	4629      	mov	r1, r5
 800123a:	eb43 0b01 	adc.w	fp, r3, r1
 800123e:	f04f 0200 	mov.w	r2, #0
 8001242:	f04f 0300 	mov.w	r3, #0
 8001246:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800124a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800124e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001252:	4692      	mov	sl, r2
 8001254:	469b      	mov	fp, r3
 8001256:	4623      	mov	r3, r4
 8001258:	eb1a 0303 	adds.w	r3, sl, r3
 800125c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001260:	462b      	mov	r3, r5
 8001262:	eb4b 0303 	adc.w	r3, fp, r3
 8001266:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800126a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8001276:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 800127a:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	@ 0x198
 800127e:	460b      	mov	r3, r1
 8001280:	18db      	adds	r3, r3, r3
 8001282:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001286:	4613      	mov	r3, r2
 8001288:	eb42 0303 	adc.w	r3, r2, r3
 800128c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001290:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001294:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 8001298:	f7fe ff9e 	bl	80001d8 <__aeabi_uldivmod>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4b61      	ldr	r3, [pc, #388]	@ (8001428 <UART_SetConfig+0x528>)
 80012a2:	fba3 2302 	umull	r2, r3, r3, r2
 80012a6:	095b      	lsrs	r3, r3, #5
 80012a8:	011c      	lsls	r4, r3, #4
 80012aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80012ae:	2200      	movs	r2, #0
 80012b0:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 80012b4:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 80012b8:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	@ 0x190
 80012bc:	4642      	mov	r2, r8
 80012be:	464b      	mov	r3, r9
 80012c0:	1891      	adds	r1, r2, r2
 80012c2:	67b9      	str	r1, [r7, #120]	@ 0x78
 80012c4:	415b      	adcs	r3, r3
 80012c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80012c8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80012cc:	4641      	mov	r1, r8
 80012ce:	1851      	adds	r1, r2, r1
 80012d0:	6739      	str	r1, [r7, #112]	@ 0x70
 80012d2:	4649      	mov	r1, r9
 80012d4:	414b      	adcs	r3, r1
 80012d6:	677b      	str	r3, [r7, #116]	@ 0x74
 80012d8:	f04f 0200 	mov.w	r2, #0
 80012dc:	f04f 0300 	mov.w	r3, #0
 80012e0:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	@ 0x70
 80012e4:	4659      	mov	r1, fp
 80012e6:	00cb      	lsls	r3, r1, #3
 80012e8:	4651      	mov	r1, sl
 80012ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80012ee:	4651      	mov	r1, sl
 80012f0:	00ca      	lsls	r2, r1, #3
 80012f2:	4610      	mov	r0, r2
 80012f4:	4619      	mov	r1, r3
 80012f6:	4603      	mov	r3, r0
 80012f8:	4642      	mov	r2, r8
 80012fa:	189b      	adds	r3, r3, r2
 80012fc:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001300:	464b      	mov	r3, r9
 8001302:	460a      	mov	r2, r1
 8001304:	eb42 0303 	adc.w	r3, r2, r3
 8001308:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 800130c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001318:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 800131c:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	@ 0x180
 8001320:	460b      	mov	r3, r1
 8001322:	18db      	adds	r3, r3, r3
 8001324:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001326:	4613      	mov	r3, r2
 8001328:	eb42 0303 	adc.w	r3, r2, r3
 800132c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800132e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001332:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8001336:	f7fe ff4f 	bl	80001d8 <__aeabi_uldivmod>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	4611      	mov	r1, r2
 8001340:	4b39      	ldr	r3, [pc, #228]	@ (8001428 <UART_SetConfig+0x528>)
 8001342:	fba3 2301 	umull	r2, r3, r3, r1
 8001346:	095b      	lsrs	r3, r3, #5
 8001348:	2264      	movs	r2, #100	@ 0x64
 800134a:	fb02 f303 	mul.w	r3, r2, r3
 800134e:	1acb      	subs	r3, r1, r3
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001356:	4b34      	ldr	r3, [pc, #208]	@ (8001428 <UART_SetConfig+0x528>)
 8001358:	fba3 2302 	umull	r2, r3, r3, r2
 800135c:	095b      	lsrs	r3, r3, #5
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001364:	441c      	add	r4, r3
 8001366:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800136a:	2200      	movs	r2, #0
 800136c:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8001370:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001374:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	@ 0x178
 8001378:	4642      	mov	r2, r8
 800137a:	464b      	mov	r3, r9
 800137c:	1891      	adds	r1, r2, r2
 800137e:	6639      	str	r1, [r7, #96]	@ 0x60
 8001380:	415b      	adcs	r3, r3
 8001382:	667b      	str	r3, [r7, #100]	@ 0x64
 8001384:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001388:	4641      	mov	r1, r8
 800138a:	1851      	adds	r1, r2, r1
 800138c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800138e:	4649      	mov	r1, r9
 8001390:	414b      	adcs	r3, r1
 8001392:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001394:	f04f 0200 	mov.w	r2, #0
 8001398:	f04f 0300 	mov.w	r3, #0
 800139c:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 80013a0:	4659      	mov	r1, fp
 80013a2:	00cb      	lsls	r3, r1, #3
 80013a4:	4651      	mov	r1, sl
 80013a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80013aa:	4651      	mov	r1, sl
 80013ac:	00ca      	lsls	r2, r1, #3
 80013ae:	4610      	mov	r0, r2
 80013b0:	4619      	mov	r1, r3
 80013b2:	4603      	mov	r3, r0
 80013b4:	4642      	mov	r2, r8
 80013b6:	189b      	adds	r3, r3, r2
 80013b8:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80013bc:	464b      	mov	r3, r9
 80013be:	460a      	mov	r2, r1
 80013c0:	eb42 0303 	adc.w	r3, r2, r3
 80013c4:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 80013c8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 80013d4:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 80013d8:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	@ 0x168
 80013dc:	460b      	mov	r3, r1
 80013de:	18db      	adds	r3, r3, r3
 80013e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80013e2:	4613      	mov	r3, r2
 80013e4:	eb42 0303 	adc.w	r3, r2, r3
 80013e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80013ea:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80013ee:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 80013f2:	f7fe fef1 	bl	80001d8 <__aeabi_uldivmod>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001428 <UART_SetConfig+0x528>)
 80013fc:	fba3 1302 	umull	r1, r3, r3, r2
 8001400:	095b      	lsrs	r3, r3, #5
 8001402:	2164      	movs	r1, #100	@ 0x64
 8001404:	fb01 f303 	mul.w	r3, r1, r3
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	3332      	adds	r3, #50	@ 0x32
 800140e:	4a06      	ldr	r2, [pc, #24]	@ (8001428 <UART_SetConfig+0x528>)
 8001410:	fba2 2303 	umull	r2, r3, r2, r3
 8001414:	095b      	lsrs	r3, r3, #5
 8001416:	f003 0207 	and.w	r2, r3, #7
 800141a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4422      	add	r2, r4
 8001422:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8001424:	e233      	b.n	800188e <UART_SetConfig+0x98e>
 8001426:	bf00      	nop
 8001428:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800142c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	4b8d      	ldr	r3, [pc, #564]	@ (8001668 <UART_SetConfig+0x768>)
 8001434:	429a      	cmp	r2, r3
 8001436:	d006      	beq.n	8001446 <UART_SetConfig+0x546>
 8001438:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	4b8b      	ldr	r3, [pc, #556]	@ (800166c <UART_SetConfig+0x76c>)
 8001440:	429a      	cmp	r2, r3
 8001442:	f040 8117 	bne.w	8001674 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001446:	f7ff fb67 	bl	8000b18 <HAL_RCC_GetPCLK2Freq>
 800144a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800144e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001452:	2200      	movs	r2, #0
 8001454:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8001458:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 800145c:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8001460:	4622      	mov	r2, r4
 8001462:	462b      	mov	r3, r5
 8001464:	1891      	adds	r1, r2, r2
 8001466:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001468:	415b      	adcs	r3, r3
 800146a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800146c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001470:	4621      	mov	r1, r4
 8001472:	eb12 0801 	adds.w	r8, r2, r1
 8001476:	4629      	mov	r1, r5
 8001478:	eb43 0901 	adc.w	r9, r3, r1
 800147c:	f04f 0200 	mov.w	r2, #0
 8001480:	f04f 0300 	mov.w	r3, #0
 8001484:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001488:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800148c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001490:	4690      	mov	r8, r2
 8001492:	4699      	mov	r9, r3
 8001494:	4623      	mov	r3, r4
 8001496:	eb18 0303 	adds.w	r3, r8, r3
 800149a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800149e:	462b      	mov	r3, r5
 80014a0:	eb49 0303 	adc.w	r3, r9, r3
 80014a4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 80014a8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80014b4:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 80014b8:	f04f 0200 	mov.w	r2, #0
 80014bc:	f04f 0300 	mov.w	r3, #0
 80014c0:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	@ 0x150
 80014c4:	4629      	mov	r1, r5
 80014c6:	008b      	lsls	r3, r1, #2
 80014c8:	4621      	mov	r1, r4
 80014ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80014ce:	4621      	mov	r1, r4
 80014d0:	008a      	lsls	r2, r1, #2
 80014d2:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 80014d6:	f7fe fe7f 	bl	80001d8 <__aeabi_uldivmod>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4b64      	ldr	r3, [pc, #400]	@ (8001670 <UART_SetConfig+0x770>)
 80014e0:	fba3 2302 	umull	r2, r3, r3, r2
 80014e4:	095b      	lsrs	r3, r3, #5
 80014e6:	011c      	lsls	r4, r3, #4
 80014e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80014ec:	2200      	movs	r2, #0
 80014ee:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 80014f2:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80014f6:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	@ 0x148
 80014fa:	4642      	mov	r2, r8
 80014fc:	464b      	mov	r3, r9
 80014fe:	1891      	adds	r1, r2, r2
 8001500:	6439      	str	r1, [r7, #64]	@ 0x40
 8001502:	415b      	adcs	r3, r3
 8001504:	647b      	str	r3, [r7, #68]	@ 0x44
 8001506:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800150a:	4641      	mov	r1, r8
 800150c:	1851      	adds	r1, r2, r1
 800150e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001510:	4649      	mov	r1, r9
 8001512:	414b      	adcs	r3, r1
 8001514:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001516:	f04f 0200 	mov.w	r2, #0
 800151a:	f04f 0300 	mov.w	r3, #0
 800151e:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	@ 0x38
 8001522:	4659      	mov	r1, fp
 8001524:	00cb      	lsls	r3, r1, #3
 8001526:	4651      	mov	r1, sl
 8001528:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800152c:	4651      	mov	r1, sl
 800152e:	00ca      	lsls	r2, r1, #3
 8001530:	4610      	mov	r0, r2
 8001532:	4619      	mov	r1, r3
 8001534:	4603      	mov	r3, r0
 8001536:	4642      	mov	r2, r8
 8001538:	189b      	adds	r3, r3, r2
 800153a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800153e:	464b      	mov	r3, r9
 8001540:	460a      	mov	r2, r1
 8001542:	eb42 0303 	adc.w	r3, r2, r3
 8001546:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800154a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001556:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 800155a:	f04f 0200 	mov.w	r2, #0
 800155e:	f04f 0300 	mov.w	r3, #0
 8001562:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	@ 0x138
 8001566:	4649      	mov	r1, r9
 8001568:	008b      	lsls	r3, r1, #2
 800156a:	4641      	mov	r1, r8
 800156c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001570:	4641      	mov	r1, r8
 8001572:	008a      	lsls	r2, r1, #2
 8001574:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8001578:	f7fe fe2e 	bl	80001d8 <__aeabi_uldivmod>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4611      	mov	r1, r2
 8001582:	4b3b      	ldr	r3, [pc, #236]	@ (8001670 <UART_SetConfig+0x770>)
 8001584:	fba3 2301 	umull	r2, r3, r3, r1
 8001588:	095b      	lsrs	r3, r3, #5
 800158a:	2264      	movs	r2, #100	@ 0x64
 800158c:	fb02 f303 	mul.w	r3, r2, r3
 8001590:	1acb      	subs	r3, r1, r3
 8001592:	011b      	lsls	r3, r3, #4
 8001594:	3332      	adds	r3, #50	@ 0x32
 8001596:	4a36      	ldr	r2, [pc, #216]	@ (8001670 <UART_SetConfig+0x770>)
 8001598:	fba2 2303 	umull	r2, r3, r2, r3
 800159c:	095b      	lsrs	r3, r3, #5
 800159e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015a2:	441c      	add	r4, r3
 80015a4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80015a8:	2200      	movs	r2, #0
 80015aa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80015ae:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 80015b2:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	@ 0x130
 80015b6:	4642      	mov	r2, r8
 80015b8:	464b      	mov	r3, r9
 80015ba:	1891      	adds	r1, r2, r2
 80015bc:	6339      	str	r1, [r7, #48]	@ 0x30
 80015be:	415b      	adcs	r3, r3
 80015c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80015c2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80015c6:	4641      	mov	r1, r8
 80015c8:	1851      	adds	r1, r2, r1
 80015ca:	62b9      	str	r1, [r7, #40]	@ 0x28
 80015cc:	4649      	mov	r1, r9
 80015ce:	414b      	adcs	r3, r1
 80015d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015d2:	f04f 0200 	mov.w	r2, #0
 80015d6:	f04f 0300 	mov.w	r3, #0
 80015da:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	@ 0x28
 80015de:	4659      	mov	r1, fp
 80015e0:	00cb      	lsls	r3, r1, #3
 80015e2:	4651      	mov	r1, sl
 80015e4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80015e8:	4651      	mov	r1, sl
 80015ea:	00ca      	lsls	r2, r1, #3
 80015ec:	4610      	mov	r0, r2
 80015ee:	4619      	mov	r1, r3
 80015f0:	4603      	mov	r3, r0
 80015f2:	4642      	mov	r2, r8
 80015f4:	189b      	adds	r3, r3, r2
 80015f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80015fa:	464b      	mov	r3, r9
 80015fc:	460a      	mov	r2, r1
 80015fe:	eb42 0303 	adc.w	r3, r2, r3
 8001602:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001606:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001612:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 8001616:	f04f 0200 	mov.w	r2, #0
 800161a:	f04f 0300 	mov.w	r3, #0
 800161e:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	@ 0x120
 8001622:	4649      	mov	r1, r9
 8001624:	008b      	lsls	r3, r1, #2
 8001626:	4641      	mov	r1, r8
 8001628:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800162c:	4641      	mov	r1, r8
 800162e:	008a      	lsls	r2, r1, #2
 8001630:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8001634:	f7fe fdd0 	bl	80001d8 <__aeabi_uldivmod>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4b0c      	ldr	r3, [pc, #48]	@ (8001670 <UART_SetConfig+0x770>)
 800163e:	fba3 1302 	umull	r1, r3, r3, r2
 8001642:	095b      	lsrs	r3, r3, #5
 8001644:	2164      	movs	r1, #100	@ 0x64
 8001646:	fb01 f303 	mul.w	r3, r1, r3
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	011b      	lsls	r3, r3, #4
 800164e:	3332      	adds	r3, #50	@ 0x32
 8001650:	4a07      	ldr	r2, [pc, #28]	@ (8001670 <UART_SetConfig+0x770>)
 8001652:	fba2 2303 	umull	r2, r3, r2, r3
 8001656:	095b      	lsrs	r3, r3, #5
 8001658:	f003 020f 	and.w	r2, r3, #15
 800165c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4422      	add	r2, r4
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	e112      	b.n	800188e <UART_SetConfig+0x98e>
 8001668:	40011000 	.word	0x40011000
 800166c:	40011400 	.word	0x40011400
 8001670:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8001674:	f7ff fa3c 	bl	8000af0 <HAL_RCC_GetPCLK1Freq>
 8001678:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800167c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001680:	2200      	movs	r2, #0
 8001682:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001686:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800168a:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	@ 0x118
 800168e:	4642      	mov	r2, r8
 8001690:	464b      	mov	r3, r9
 8001692:	1891      	adds	r1, r2, r2
 8001694:	6239      	str	r1, [r7, #32]
 8001696:	415b      	adcs	r3, r3
 8001698:	627b      	str	r3, [r7, #36]	@ 0x24
 800169a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800169e:	4641      	mov	r1, r8
 80016a0:	1854      	adds	r4, r2, r1
 80016a2:	4649      	mov	r1, r9
 80016a4:	eb43 0501 	adc.w	r5, r3, r1
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	f04f 0300 	mov.w	r3, #0
 80016b0:	00eb      	lsls	r3, r5, #3
 80016b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016b6:	00e2      	lsls	r2, r4, #3
 80016b8:	4614      	mov	r4, r2
 80016ba:	461d      	mov	r5, r3
 80016bc:	4643      	mov	r3, r8
 80016be:	18e3      	adds	r3, r4, r3
 80016c0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80016c4:	464b      	mov	r3, r9
 80016c6:	eb45 0303 	adc.w	r3, r5, r3
 80016ca:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80016ce:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80016da:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	f04f 0300 	mov.w	r3, #0
 80016e6:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 80016ea:	4629      	mov	r1, r5
 80016ec:	008b      	lsls	r3, r1, #2
 80016ee:	4621      	mov	r1, r4
 80016f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80016f4:	4621      	mov	r1, r4
 80016f6:	008a      	lsls	r2, r1, #2
 80016f8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 80016fc:	f7fe fd6c 	bl	80001d8 <__aeabi_uldivmod>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	4b65      	ldr	r3, [pc, #404]	@ (800189c <UART_SetConfig+0x99c>)
 8001706:	fba3 2302 	umull	r2, r3, r3, r2
 800170a:	095b      	lsrs	r3, r3, #5
 800170c:	011c      	lsls	r4, r3, #4
 800170e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001712:	2200      	movs	r2, #0
 8001714:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001718:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 800171c:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 8001720:	4642      	mov	r2, r8
 8001722:	464b      	mov	r3, r9
 8001724:	1891      	adds	r1, r2, r2
 8001726:	61b9      	str	r1, [r7, #24]
 8001728:	415b      	adcs	r3, r3
 800172a:	61fb      	str	r3, [r7, #28]
 800172c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001730:	4641      	mov	r1, r8
 8001732:	1851      	adds	r1, r2, r1
 8001734:	6139      	str	r1, [r7, #16]
 8001736:	4649      	mov	r1, r9
 8001738:	414b      	adcs	r3, r1
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	f04f 0200 	mov.w	r2, #0
 8001740:	f04f 0300 	mov.w	r3, #0
 8001744:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001748:	4659      	mov	r1, fp
 800174a:	00cb      	lsls	r3, r1, #3
 800174c:	4651      	mov	r1, sl
 800174e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001752:	4651      	mov	r1, sl
 8001754:	00ca      	lsls	r2, r1, #3
 8001756:	4610      	mov	r0, r2
 8001758:	4619      	mov	r1, r3
 800175a:	4603      	mov	r3, r0
 800175c:	4642      	mov	r2, r8
 800175e:	189b      	adds	r3, r3, r2
 8001760:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001764:	464b      	mov	r3, r9
 8001766:	460a      	mov	r2, r1
 8001768:	eb42 0303 	adc.w	r3, r2, r3
 800176c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001770:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800177c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	f04f 0300 	mov.w	r3, #0
 8001788:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 800178c:	4649      	mov	r1, r9
 800178e:	008b      	lsls	r3, r1, #2
 8001790:	4641      	mov	r1, r8
 8001792:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001796:	4641      	mov	r1, r8
 8001798:	008a      	lsls	r2, r1, #2
 800179a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 800179e:	f7fe fd1b 	bl	80001d8 <__aeabi_uldivmod>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4611      	mov	r1, r2
 80017a8:	4b3c      	ldr	r3, [pc, #240]	@ (800189c <UART_SetConfig+0x99c>)
 80017aa:	fba3 2301 	umull	r2, r3, r3, r1
 80017ae:	095b      	lsrs	r3, r3, #5
 80017b0:	2264      	movs	r2, #100	@ 0x64
 80017b2:	fb02 f303 	mul.w	r3, r2, r3
 80017b6:	1acb      	subs	r3, r1, r3
 80017b8:	011b      	lsls	r3, r3, #4
 80017ba:	3332      	adds	r3, #50	@ 0x32
 80017bc:	4a37      	ldr	r2, [pc, #220]	@ (800189c <UART_SetConfig+0x99c>)
 80017be:	fba2 2303 	umull	r2, r3, r2, r3
 80017c2:	095b      	lsrs	r3, r3, #5
 80017c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017c8:	441c      	add	r4, r3
 80017ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80017ce:	2200      	movs	r2, #0
 80017d0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80017d4:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80017d8:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80017dc:	4642      	mov	r2, r8
 80017de:	464b      	mov	r3, r9
 80017e0:	1891      	adds	r1, r2, r2
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	415b      	adcs	r3, r3
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017ec:	4641      	mov	r1, r8
 80017ee:	1851      	adds	r1, r2, r1
 80017f0:	6039      	str	r1, [r7, #0]
 80017f2:	4649      	mov	r1, r9
 80017f4:	414b      	adcs	r3, r1
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	f04f 0300 	mov.w	r3, #0
 8001800:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001804:	4659      	mov	r1, fp
 8001806:	00cb      	lsls	r3, r1, #3
 8001808:	4651      	mov	r1, sl
 800180a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800180e:	4651      	mov	r1, sl
 8001810:	00ca      	lsls	r2, r1, #3
 8001812:	4610      	mov	r0, r2
 8001814:	4619      	mov	r1, r3
 8001816:	4603      	mov	r3, r0
 8001818:	4642      	mov	r2, r8
 800181a:	189b      	adds	r3, r3, r2
 800181c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001820:	464b      	mov	r3, r9
 8001822:	460a      	mov	r2, r1
 8001824:	eb42 0303 	adc.w	r3, r2, r3
 8001828:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800182c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001838:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800183c:	f04f 0200 	mov.w	r2, #0
 8001840:	f04f 0300 	mov.w	r3, #0
 8001844:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8001848:	4649      	mov	r1, r9
 800184a:	008b      	lsls	r3, r1, #2
 800184c:	4641      	mov	r1, r8
 800184e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001852:	4641      	mov	r1, r8
 8001854:	008a      	lsls	r2, r1, #2
 8001856:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800185a:	f7fe fcbd 	bl	80001d8 <__aeabi_uldivmod>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4b0e      	ldr	r3, [pc, #56]	@ (800189c <UART_SetConfig+0x99c>)
 8001864:	fba3 1302 	umull	r1, r3, r3, r2
 8001868:	095b      	lsrs	r3, r3, #5
 800186a:	2164      	movs	r1, #100	@ 0x64
 800186c:	fb01 f303 	mul.w	r3, r1, r3
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	011b      	lsls	r3, r3, #4
 8001874:	3332      	adds	r3, #50	@ 0x32
 8001876:	4a09      	ldr	r2, [pc, #36]	@ (800189c <UART_SetConfig+0x99c>)
 8001878:	fba2 2303 	umull	r2, r3, r2, r3
 800187c:	095b      	lsrs	r3, r3, #5
 800187e:	f003 020f 	and.w	r2, r3, #15
 8001882:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4422      	add	r2, r4
 800188a:	609a      	str	r2, [r3, #8]
}
 800188c:	e7ff      	b.n	800188e <UART_SetConfig+0x98e>
 800188e:	bf00      	nop
 8001890:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8001894:	46bd      	mov	sp, r7
 8001896:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800189a:	bf00      	nop
 800189c:	51eb851f 	.word	0x51eb851f

080018a0 <main>:
	  	HAL_UART_Transmit(&huart2,(uint8_t*)&ch,1,10);
	  	return ch;
	  }*/

int main()
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0

  HAL_Init();
 80018a6:	f7fe fe0f 	bl	80004c8 <HAL_Init>
  uart_init();
 80018aa:	f000 f827 	bl	80018fc <uart_init>

  }*/

  //RX

  uint8_t message[9]= "anurag\r\n";
 80018ae:	4a0e      	ldr	r2, [pc, #56]	@ (80018e8 <main+0x48>)
 80018b0:	1d3b      	adds	r3, r7, #4
 80018b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80018b4:	c303      	stmia	r3!, {r0, r1}
 80018b6:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit (&huart2, message,9,100);
 80018b8:	1d39      	adds	r1, r7, #4
 80018ba:	2364      	movs	r3, #100	@ 0x64
 80018bc:	2209      	movs	r2, #9
 80018be:	480b      	ldr	r0, [pc, #44]	@ (80018ec <main+0x4c>)
 80018c0:	f7ff f995 	bl	8000bee <HAL_UART_Transmit>
  uint8_t  data;
while(1){
	  HAL_UART_Receive (&huart2, &data, 1,100);
 80018c4:	1cf9      	adds	r1, r7, #3
 80018c6:	2364      	movs	r3, #100	@ 0x64
 80018c8:	2201      	movs	r2, #1
 80018ca:	4808      	ldr	r0, [pc, #32]	@ (80018ec <main+0x4c>)
 80018cc:	f7ff fa28 	bl	8000d20 <HAL_UART_Receive>
	  HAL_UART_Transmit (&huart2, &data,1,100);
 80018d0:	1cf9      	adds	r1, r7, #3
 80018d2:	2364      	movs	r3, #100	@ 0x64
 80018d4:	2201      	movs	r2, #1
 80018d6:	4805      	ldr	r0, [pc, #20]	@ (80018ec <main+0x4c>)
 80018d8:	f7ff f989 	bl	8000bee <HAL_UART_Transmit>
	  HAL_Delay(100);
 80018dc:	2064      	movs	r0, #100	@ 0x64
 80018de:	f7fe fe6d 	bl	80005bc <HAL_Delay>
	  HAL_UART_Receive (&huart2, &data, 1,100);
 80018e2:	bf00      	nop
 80018e4:	e7ee      	b.n	80018c4 <main+0x24>
 80018e6:	bf00      	nop
 80018e8:	08001a70 	.word	0x08001a70
 80018ec:	2000002c 	.word	0x2000002c

080018f0 <SysTick_Handler>:
}



void  SysTick_Handler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80018f4:	f7fe fe42 	bl	800057c <HAL_IncTick>
}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}

080018fc <uart_init>:


void uart_init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b088      	sub	sp, #32
 8001900:	af00      	add	r7, sp, #0

	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001902:	f107 030c 	add.w	r3, r7, #12
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]
 8001910:	611a      	str	r2, [r3, #16]

    //Enable UART pins clock access
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	60bb      	str	r3, [r7, #8]
 8001916:	4b25      	ldr	r3, [pc, #148]	@ (80019ac <uart_init+0xb0>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	4a24      	ldr	r2, [pc, #144]	@ (80019ac <uart_init+0xb0>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6313      	str	r3, [r2, #48]	@ 0x30
 8001922:	4b22      	ldr	r3, [pc, #136]	@ (80019ac <uart_init+0xb0>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	68bb      	ldr	r3, [r7, #8]

	//Enable UART module clock access
    __HAL_RCC_USART2_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	4b1e      	ldr	r3, [pc, #120]	@ (80019ac <uart_init+0xb0>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001936:	4a1d      	ldr	r2, [pc, #116]	@ (80019ac <uart_init+0xb0>)
 8001938:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800193c:	6413      	str	r3, [r2, #64]	@ 0x40
 800193e:	4b1b      	ldr	r3, [pc, #108]	@ (80019ac <uart_init+0xb0>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	687b      	ldr	r3, [r7, #4]


	//Configure pins to act as alternate func pins(UART)

     GPIO_InitStruct.Pin  = GPIO_PIN_2|GPIO_PIN_3;
 800194a:	230c      	movs	r3, #12
 800194c:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194e:	2302      	movs	r3, #2
 8001950:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001952:	2307      	movs	r3, #7
 8001954:	61fb      	str	r3, [r7, #28]
     GPIO_InitStruct.Pull =  GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195a:	2303      	movs	r3, #3
 800195c:	61bb      	str	r3, [r7, #24]

     HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 800195e:	f107 030c 	add.w	r3, r7, #12
 8001962:	4619      	mov	r1, r3
 8001964:	4812      	ldr	r0, [pc, #72]	@ (80019b0 <uart_init+0xb4>)
 8001966:	f7fe ff33 	bl	80007d0 <HAL_GPIO_Init>
     huart2.Init.OverSampling = UART_OVERSAMPLING_16;

     HAL_UART_Init(&huart2);*/

     //Configure UART RX module
          huart2.Instance = USART2;
 800196a:	4b12      	ldr	r3, [pc, #72]	@ (80019b4 <uart_init+0xb8>)
 800196c:	4a12      	ldr	r2, [pc, #72]	@ (80019b8 <uart_init+0xbc>)
 800196e:	601a      	str	r2, [r3, #0]
          huart2.Init.BaudRate = 115200;
 8001970:	4b10      	ldr	r3, [pc, #64]	@ (80019b4 <uart_init+0xb8>)
 8001972:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001976:	605a      	str	r2, [r3, #4]
          huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001978:	4b0e      	ldr	r3, [pc, #56]	@ (80019b4 <uart_init+0xb8>)
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
          huart2.Init.StopBits = UART_STOPBITS_1;
 800197e:	4b0d      	ldr	r3, [pc, #52]	@ (80019b4 <uart_init+0xb8>)
 8001980:	2200      	movs	r2, #0
 8001982:	60da      	str	r2, [r3, #12]
          huart2.Init.Parity = UART_PARITY_NONE;
 8001984:	4b0b      	ldr	r3, [pc, #44]	@ (80019b4 <uart_init+0xb8>)
 8001986:	2200      	movs	r2, #0
 8001988:	611a      	str	r2, [r3, #16]
          huart2.Init.Mode = UART_MODE_TX_RX;
 800198a:	4b0a      	ldr	r3, [pc, #40]	@ (80019b4 <uart_init+0xb8>)
 800198c:	220c      	movs	r2, #12
 800198e:	615a      	str	r2, [r3, #20]
          huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001990:	4b08      	ldr	r3, [pc, #32]	@ (80019b4 <uart_init+0xb8>)
 8001992:	2200      	movs	r2, #0
 8001994:	619a      	str	r2, [r3, #24]
          huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001996:	4b07      	ldr	r3, [pc, #28]	@ (80019b4 <uart_init+0xb8>)
 8001998:	2200      	movs	r2, #0
 800199a:	61da      	str	r2, [r3, #28]

          HAL_UART_Init(&huart2);
 800199c:	4805      	ldr	r0, [pc, #20]	@ (80019b4 <uart_init+0xb8>)
 800199e:	f7ff f8cf 	bl	8000b40 <HAL_UART_Init>


}
 80019a2:	bf00      	nop
 80019a4:	3720      	adds	r7, #32
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40020000 	.word	0x40020000
 80019b4:	2000002c 	.word	0x2000002c
 80019b8:	40004400 	.word	0x40004400

080019bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019bc:	480d      	ldr	r0, [pc, #52]	@ (80019f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80019c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019c4:	480c      	ldr	r0, [pc, #48]	@ (80019f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80019c6:	490d      	ldr	r1, [pc, #52]	@ (80019fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80019c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a00 <LoopForever+0xe>)
  movs r3, #0
 80019ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019cc:	e002      	b.n	80019d4 <LoopCopyDataInit>

080019ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d2:	3304      	adds	r3, #4

080019d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d8:	d3f9      	bcc.n	80019ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019da:	4a0a      	ldr	r2, [pc, #40]	@ (8001a04 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001a08 <LoopForever+0x16>)
  movs r3, #0
 80019de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e0:	e001      	b.n	80019e6 <LoopFillZerobss>

080019e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e4:	3204      	adds	r2, #4

080019e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e8:	d3fb      	bcc.n	80019e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80019ea:	f000 f811 	bl	8001a10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019ee:	f7ff ff57 	bl	80018a0 <main>

080019f2 <LoopForever>:

LoopForever:
  b LoopForever
 80019f2:	e7fe      	b.n	80019f2 <LoopForever>
  ldr   r0, =_estack
 80019f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001a00:	08001a94 	.word	0x08001a94
  ldr r2, =_sbss
 8001a04:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001a08:	2000006c 	.word	0x2000006c

08001a0c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a0c:	e7fe      	b.n	8001a0c <ADC_IRQHandler>
	...

08001a10 <__libc_init_array>:
 8001a10:	b570      	push	{r4, r5, r6, lr}
 8001a12:	4d0d      	ldr	r5, [pc, #52]	@ (8001a48 <__libc_init_array+0x38>)
 8001a14:	4c0d      	ldr	r4, [pc, #52]	@ (8001a4c <__libc_init_array+0x3c>)
 8001a16:	1b64      	subs	r4, r4, r5
 8001a18:	10a4      	asrs	r4, r4, #2
 8001a1a:	2600      	movs	r6, #0
 8001a1c:	42a6      	cmp	r6, r4
 8001a1e:	d109      	bne.n	8001a34 <__libc_init_array+0x24>
 8001a20:	4d0b      	ldr	r5, [pc, #44]	@ (8001a50 <__libc_init_array+0x40>)
 8001a22:	4c0c      	ldr	r4, [pc, #48]	@ (8001a54 <__libc_init_array+0x44>)
 8001a24:	f000 f818 	bl	8001a58 <_init>
 8001a28:	1b64      	subs	r4, r4, r5
 8001a2a:	10a4      	asrs	r4, r4, #2
 8001a2c:	2600      	movs	r6, #0
 8001a2e:	42a6      	cmp	r6, r4
 8001a30:	d105      	bne.n	8001a3e <__libc_init_array+0x2e>
 8001a32:	bd70      	pop	{r4, r5, r6, pc}
 8001a34:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a38:	4798      	blx	r3
 8001a3a:	3601      	adds	r6, #1
 8001a3c:	e7ee      	b.n	8001a1c <__libc_init_array+0xc>
 8001a3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a42:	4798      	blx	r3
 8001a44:	3601      	adds	r6, #1
 8001a46:	e7f2      	b.n	8001a2e <__libc_init_array+0x1e>
 8001a48:	08001a8c 	.word	0x08001a8c
 8001a4c:	08001a8c 	.word	0x08001a8c
 8001a50:	08001a8c 	.word	0x08001a8c
 8001a54:	08001a90 	.word	0x08001a90

08001a58 <_init>:
 8001a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a5a:	bf00      	nop
 8001a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a5e:	bc08      	pop	{r3}
 8001a60:	469e      	mov	lr, r3
 8001a62:	4770      	bx	lr

08001a64 <_fini>:
 8001a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a66:	bf00      	nop
 8001a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a6a:	bc08      	pop	{r3}
 8001a6c:	469e      	mov	lr, r3
 8001a6e:	4770      	bx	lr
