
HAL_I2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003524  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080036c4  080036c4  000046c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003714  08003714  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003714  08003714  00004714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800371c  0800371c  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800371c  0800371c  0000471c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003720  08003720  00004720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003724  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  20000068  0800378c  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  0800378c  000052d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a1d7  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e4e  00000000  00000000  0000f26f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  000110c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000082a  00000000  00000000  00011b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178d2  00000000  00000000  0001239a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df43  00000000  00000000  00029c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f2cc  00000000  00000000  00037baf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6e7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003410  00000000  00000000  000c6ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000ca2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080036ac 	.word	0x080036ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080036ac 	.word	0x080036ac

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	@ 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2f>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000854:	bf24      	itt	cs
 8000856:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800085a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800085e:	d90d      	bls.n	800087c <__aeabi_d2f+0x30>
 8000860:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000864:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000868:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800086c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000870:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000874:	bf08      	it	eq
 8000876:	f020 0001 	biceq.w	r0, r0, #1
 800087a:	4770      	bx	lr
 800087c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000880:	d121      	bne.n	80008c6 <__aeabi_d2f+0x7a>
 8000882:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000886:	bfbc      	itt	lt
 8000888:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800088c:	4770      	bxlt	lr
 800088e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000892:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000896:	f1c2 0218 	rsb	r2, r2, #24
 800089a:	f1c2 0c20 	rsb	ip, r2, #32
 800089e:	fa10 f30c 	lsls.w	r3, r0, ip
 80008a2:	fa20 f002 	lsr.w	r0, r0, r2
 80008a6:	bf18      	it	ne
 80008a8:	f040 0001 	orrne.w	r0, r0, #1
 80008ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008b8:	ea40 000c 	orr.w	r0, r0, ip
 80008bc:	fa23 f302 	lsr.w	r3, r3, r2
 80008c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008c4:	e7cc      	b.n	8000860 <__aeabi_d2f+0x14>
 80008c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ca:	d107      	bne.n	80008dc <__aeabi_d2f+0x90>
 80008cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008d0:	bf1e      	ittt	ne
 80008d2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80008d6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80008da:	4770      	bxne	lr
 80008dc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80008e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008f0:	4b0e      	ldr	r3, [pc, #56]	@ (800092c <HAL_Init+0x40>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a0d      	ldr	r2, [pc, #52]	@ (800092c <HAL_Init+0x40>)
 80008f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008fc:	4b0b      	ldr	r3, [pc, #44]	@ (800092c <HAL_Init+0x40>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a0a      	ldr	r2, [pc, #40]	@ (800092c <HAL_Init+0x40>)
 8000902:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000906:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000908:	4b08      	ldr	r3, [pc, #32]	@ (800092c <HAL_Init+0x40>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a07      	ldr	r2, [pc, #28]	@ (800092c <HAL_Init+0x40>)
 800090e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000912:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000914:	2003      	movs	r0, #3
 8000916:	f000 faa3 	bl	8000e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800091a:	200f      	movs	r0, #15
 800091c:	f000 f810 	bl	8000940 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000920:	f000 f806 	bl	8000930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000924:	2300      	movs	r3, #0
}
 8000926:	4618      	mov	r0, r3
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40023c00 	.word	0x40023c00

08000930 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
	...

08000940 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000948:	4b12      	ldr	r3, [pc, #72]	@ (8000994 <HAL_InitTick+0x54>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	4b12      	ldr	r3, [pc, #72]	@ (8000998 <HAL_InitTick+0x58>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	4619      	mov	r1, r3
 8000952:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000956:	fbb3 f3f1 	udiv	r3, r3, r1
 800095a:	fbb2 f3f3 	udiv	r3, r2, r3
 800095e:	4618      	mov	r0, r3
 8000960:	f000 faa5 	bl	8000eae <HAL_SYSTICK_Config>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
 800096c:	e00e      	b.n	800098c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2b0f      	cmp	r3, #15
 8000972:	d80a      	bhi.n	800098a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000974:	2200      	movs	r2, #0
 8000976:	6879      	ldr	r1, [r7, #4]
 8000978:	f04f 30ff 	mov.w	r0, #4294967295
 800097c:	f000 fa7b 	bl	8000e76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000980:	4a06      	ldr	r2, [pc, #24]	@ (800099c <HAL_InitTick+0x5c>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000986:	2300      	movs	r3, #0
 8000988:	e000      	b.n	800098c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
}
 800098c:	4618      	mov	r0, r3
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20000008 	.word	0x20000008
 8000998:	20000004 	.word	0x20000004
 800099c:	20000000 	.word	0x20000000

080009a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009a4:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <HAL_IncTick+0x20>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	461a      	mov	r2, r3
 80009aa:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <HAL_IncTick+0x24>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4413      	add	r3, r2
 80009b0:	4a04      	ldr	r2, [pc, #16]	@ (80009c4 <HAL_IncTick+0x24>)
 80009b2:	6013      	str	r3, [r2, #0]
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	20000004 	.word	0x20000004
 80009c4:	20000084 	.word	0x20000084

080009c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  return uwTick;
 80009cc:	4b03      	ldr	r3, [pc, #12]	@ (80009dc <HAL_GetTick+0x14>)
 80009ce:	681b      	ldr	r3, [r3, #0]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	20000084 	.word	0x20000084

080009e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009e8:	f7ff ffee 	bl	80009c8 <HAL_GetTick>
 80009ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009f8:	d005      	beq.n	8000a06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000a24 <HAL_Delay+0x44>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	461a      	mov	r2, r3
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	4413      	add	r3, r2
 8000a04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a06:	bf00      	nop
 8000a08:	f7ff ffde 	bl	80009c8 <HAL_GetTick>
 8000a0c:	4602      	mov	r2, r0
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d8f7      	bhi.n	8000a08 <HAL_Delay+0x28>
  {
  }
}
 8000a18:	bf00      	nop
 8000a1a:	bf00      	nop
 8000a1c:	3710      	adds	r7, #16
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000004 	.word	0x20000004

08000a28 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000a30:	2300      	movs	r3, #0
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	2300      	movs	r3, #0
 8000a36:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f003 0302 	and.w	r3, r3, #2
 8000a42:	2b02      	cmp	r3, #2
 8000a44:	bf0c      	ite	eq
 8000a46:	2301      	moveq	r3, #1
 8000a48:	2300      	movne	r3, #0
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f003 0320 	and.w	r3, r3, #32
 8000a58:	2b20      	cmp	r3, #32
 8000a5a:	bf0c      	ite	eq
 8000a5c:	2301      	moveq	r3, #1
 8000a5e:	2300      	movne	r3, #0
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d049      	beq.n	8000afe <HAL_ADC_IRQHandler+0xd6>
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d046      	beq.n	8000afe <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a74:	f003 0310 	and.w	r3, r3, #16
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d105      	bne.n	8000a88 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a80:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	689b      	ldr	r3, [r3, #8]
 8000a8e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d12b      	bne.n	8000aee <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d127      	bne.n	8000aee <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000aa4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d006      	beq.n	8000aba <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d119      	bne.n	8000aee <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	685a      	ldr	r2, [r3, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f022 0220 	bic.w	r2, r2, #32
 8000ac8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ace:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ada:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d105      	bne.n	8000aee <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae6:	f043 0201 	orr.w	r2, r3, #1
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f000 f8db 	bl	8000caa <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f06f 0212 	mvn.w	r2, #18
 8000afc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f003 0304 	and.w	r3, r3, #4
 8000b08:	2b04      	cmp	r3, #4
 8000b0a:	bf0c      	ite	eq
 8000b0c:	2301      	moveq	r3, #1
 8000b0e:	2300      	movne	r3, #0
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b1e:	2b80      	cmp	r3, #128	@ 0x80
 8000b20:	bf0c      	ite	eq
 8000b22:	2301      	moveq	r3, #1
 8000b24:	2300      	movne	r3, #0
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d057      	beq.n	8000be0 <HAL_ADC_IRQHandler+0x1b8>
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d054      	beq.n	8000be0 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3a:	f003 0310 	and.w	r3, r3, #16
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d105      	bne.n	8000b4e <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b46:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d139      	bne.n	8000bd0 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b62:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d006      	beq.n	8000b78 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d12b      	bne.n	8000bd0 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d124      	bne.n	8000bd0 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d11d      	bne.n	8000bd0 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d119      	bne.n	8000bd0 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	685a      	ldr	r2, [r3, #4]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000baa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d105      	bne.n	8000bd0 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc8:	f043 0201 	orr.w	r2, r3, #1
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f000 f888 	bl	8000ce6 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f06f 020c 	mvn.w	r2, #12
 8000bde:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	bf0c      	ite	eq
 8000bee:	2301      	moveq	r3, #1
 8000bf0:	2300      	movne	r3, #0
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c00:	2b40      	cmp	r3, #64	@ 0x40
 8000c02:	bf0c      	ite	eq
 8000c04:	2301      	moveq	r3, #1
 8000c06:	2300      	movne	r3, #0
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d017      	beq.n	8000c42 <HAL_ADC_IRQHandler+0x21a>
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d014      	beq.n	8000c42 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d10d      	bne.n	8000c42 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f000 f843 	bl	8000cbe <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f06f 0201 	mvn.w	r2, #1
 8000c40:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f003 0320 	and.w	r3, r3, #32
 8000c4c:	2b20      	cmp	r3, #32
 8000c4e:	bf0c      	ite	eq
 8000c50:	2301      	moveq	r3, #1
 8000c52:	2300      	movne	r3, #0
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000c62:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8000c66:	bf0c      	ite	eq
 8000c68:	2301      	moveq	r3, #1
 8000c6a:	2300      	movne	r3, #0
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d015      	beq.n	8000ca2 <HAL_ADC_IRQHandler+0x27a>
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d012      	beq.n	8000ca2 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c80:	f043 0202 	orr.w	r2, r3, #2
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f06f 0220 	mvn.w	r2, #32
 8000c90:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f000 f81d 	bl	8000cd2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f06f 0220 	mvn.w	r2, #32
 8000ca0:	601a      	str	r2, [r3, #0]
  }
}
 8000ca2:	bf00      	nop
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b083      	sub	sp, #12
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b083      	sub	sp, #12
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	b083      	sub	sp, #12
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
	...

08000cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d40 <__NVIC_SetPriorityGrouping+0x44>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d12:	68ba      	ldr	r2, [r7, #8]
 8000d14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d2e:	4a04      	ldr	r2, [pc, #16]	@ (8000d40 <__NVIC_SetPriorityGrouping+0x44>)
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	60d3      	str	r3, [r2, #12]
}
 8000d34:	bf00      	nop
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d48:	4b04      	ldr	r3, [pc, #16]	@ (8000d5c <__NVIC_GetPriorityGrouping+0x18>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	0a1b      	lsrs	r3, r3, #8
 8000d4e:	f003 0307 	and.w	r3, r3, #7
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	6039      	str	r1, [r7, #0]
 8000d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	db0a      	blt.n	8000d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	490c      	ldr	r1, [pc, #48]	@ (8000dac <__NVIC_SetPriority+0x4c>)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	0112      	lsls	r2, r2, #4
 8000d80:	b2d2      	uxtb	r2, r2
 8000d82:	440b      	add	r3, r1
 8000d84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d88:	e00a      	b.n	8000da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4908      	ldr	r1, [pc, #32]	@ (8000db0 <__NVIC_SetPriority+0x50>)
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	f003 030f 	and.w	r3, r3, #15
 8000d96:	3b04      	subs	r3, #4
 8000d98:	0112      	lsls	r2, r2, #4
 8000d9a:	b2d2      	uxtb	r2, r2
 8000d9c:	440b      	add	r3, r1
 8000d9e:	761a      	strb	r2, [r3, #24]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000e100 	.word	0xe000e100
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b089      	sub	sp, #36	@ 0x24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	f1c3 0307 	rsb	r3, r3, #7
 8000dce:	2b04      	cmp	r3, #4
 8000dd0:	bf28      	it	cs
 8000dd2:	2304      	movcs	r3, #4
 8000dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3304      	adds	r3, #4
 8000dda:	2b06      	cmp	r3, #6
 8000ddc:	d902      	bls.n	8000de4 <NVIC_EncodePriority+0x30>
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3b03      	subs	r3, #3
 8000de2:	e000      	b.n	8000de6 <NVIC_EncodePriority+0x32>
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43da      	mvns	r2, r3
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	401a      	ands	r2, r3
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	fa01 f303 	lsl.w	r3, r1, r3
 8000e06:	43d9      	mvns	r1, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	4313      	orrs	r3, r2
         );
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3724      	adds	r7, #36	@ 0x24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e2c:	d301      	bcc.n	8000e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e00f      	b.n	8000e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e32:	4a0a      	ldr	r2, [pc, #40]	@ (8000e5c <SysTick_Config+0x40>)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e3a:	210f      	movs	r1, #15
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e40:	f7ff ff8e 	bl	8000d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e44:	4b05      	ldr	r3, [pc, #20]	@ (8000e5c <SysTick_Config+0x40>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e4a:	4b04      	ldr	r3, [pc, #16]	@ (8000e5c <SysTick_Config+0x40>)
 8000e4c:	2207      	movs	r2, #7
 8000e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	e000e010 	.word	0xe000e010

08000e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f7ff ff47 	bl	8000cfc <__NVIC_SetPriorityGrouping>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b086      	sub	sp, #24
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	60b9      	str	r1, [r7, #8]
 8000e80:	607a      	str	r2, [r7, #4]
 8000e82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e88:	f7ff ff5c 	bl	8000d44 <__NVIC_GetPriorityGrouping>
 8000e8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	68b9      	ldr	r1, [r7, #8]
 8000e92:	6978      	ldr	r0, [r7, #20]
 8000e94:	f7ff ff8e 	bl	8000db4 <NVIC_EncodePriority>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff ff5d 	bl	8000d60 <__NVIC_SetPriority>
}
 8000ea6:	bf00      	nop
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff ffb0 	bl	8000e1c <SysTick_Config>
 8000ebc:	4603      	mov	r3, r0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b089      	sub	sp, #36	@ 0x24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
 8000ee2:	e159      	b.n	8001198 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	697a      	ldr	r2, [r7, #20]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	f040 8148 	bne.w	8001192 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d00b      	beq.n	8000f22 <HAL_GPIO_Init+0x5a>
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d007      	beq.n	8000f22 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f16:	2b11      	cmp	r3, #17
 8000f18:	d003      	beq.n	8000f22 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	2b12      	cmp	r3, #18
 8000f20:	d130      	bne.n	8000f84 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4013      	ands	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	68da      	ldr	r2, [r3, #12]
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f58:	2201      	movs	r2, #1
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	091b      	lsrs	r3, r3, #4
 8000f6e:	f003 0201 	and.w	r2, r3, #1
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	2203      	movs	r2, #3
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	689a      	ldr	r2, [r3, #8]
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d003      	beq.n	8000fc4 <HAL_GPIO_Init+0xfc>
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	2b12      	cmp	r3, #18
 8000fc2:	d123      	bne.n	800100c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	08da      	lsrs	r2, r3, #3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3208      	adds	r2, #8
 8000fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	f003 0307 	and.w	r3, r3, #7
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	220f      	movs	r2, #15
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	691a      	ldr	r2, [r3, #16]
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	08da      	lsrs	r2, r3, #3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3208      	adds	r2, #8
 8001006:	69b9      	ldr	r1, [r7, #24]
 8001008:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	2203      	movs	r2, #3
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f003 0203 	and.w	r2, r3, #3
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001048:	2b00      	cmp	r3, #0
 800104a:	f000 80a2 	beq.w	8001192 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	4b57      	ldr	r3, [pc, #348]	@ (80011b0 <HAL_GPIO_Init+0x2e8>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001056:	4a56      	ldr	r2, [pc, #344]	@ (80011b0 <HAL_GPIO_Init+0x2e8>)
 8001058:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800105c:	6453      	str	r3, [r2, #68]	@ 0x44
 800105e:	4b54      	ldr	r3, [pc, #336]	@ (80011b0 <HAL_GPIO_Init+0x2e8>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001062:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800106a:	4a52      	ldr	r2, [pc, #328]	@ (80011b4 <HAL_GPIO_Init+0x2ec>)
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	089b      	lsrs	r3, r3, #2
 8001070:	3302      	adds	r3, #2
 8001072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001076:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f003 0303 	and.w	r3, r3, #3
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	220f      	movs	r2, #15
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4013      	ands	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a49      	ldr	r2, [pc, #292]	@ (80011b8 <HAL_GPIO_Init+0x2f0>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d019      	beq.n	80010ca <HAL_GPIO_Init+0x202>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a48      	ldr	r2, [pc, #288]	@ (80011bc <HAL_GPIO_Init+0x2f4>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d013      	beq.n	80010c6 <HAL_GPIO_Init+0x1fe>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a47      	ldr	r2, [pc, #284]	@ (80011c0 <HAL_GPIO_Init+0x2f8>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d00d      	beq.n	80010c2 <HAL_GPIO_Init+0x1fa>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a46      	ldr	r2, [pc, #280]	@ (80011c4 <HAL_GPIO_Init+0x2fc>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d007      	beq.n	80010be <HAL_GPIO_Init+0x1f6>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a45      	ldr	r2, [pc, #276]	@ (80011c8 <HAL_GPIO_Init+0x300>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d101      	bne.n	80010ba <HAL_GPIO_Init+0x1f2>
 80010b6:	2304      	movs	r3, #4
 80010b8:	e008      	b.n	80010cc <HAL_GPIO_Init+0x204>
 80010ba:	2307      	movs	r3, #7
 80010bc:	e006      	b.n	80010cc <HAL_GPIO_Init+0x204>
 80010be:	2303      	movs	r3, #3
 80010c0:	e004      	b.n	80010cc <HAL_GPIO_Init+0x204>
 80010c2:	2302      	movs	r3, #2
 80010c4:	e002      	b.n	80010cc <HAL_GPIO_Init+0x204>
 80010c6:	2301      	movs	r3, #1
 80010c8:	e000      	b.n	80010cc <HAL_GPIO_Init+0x204>
 80010ca:	2300      	movs	r3, #0
 80010cc:	69fa      	ldr	r2, [r7, #28]
 80010ce:	f002 0203 	and.w	r2, r2, #3
 80010d2:	0092      	lsls	r2, r2, #2
 80010d4:	4093      	lsls	r3, r2
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4313      	orrs	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010dc:	4935      	ldr	r1, [pc, #212]	@ (80011b4 <HAL_GPIO_Init+0x2ec>)
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	089b      	lsrs	r3, r3, #2
 80010e2:	3302      	adds	r3, #2
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010ea:	4b38      	ldr	r3, [pc, #224]	@ (80011cc <HAL_GPIO_Init+0x304>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	43db      	mvns	r3, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4013      	ands	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800110e:	4a2f      	ldr	r2, [pc, #188]	@ (80011cc <HAL_GPIO_Init+0x304>)
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001114:	4b2d      	ldr	r3, [pc, #180]	@ (80011cc <HAL_GPIO_Init+0x304>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d003      	beq.n	8001138 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001138:	4a24      	ldr	r2, [pc, #144]	@ (80011cc <HAL_GPIO_Init+0x304>)
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800113e:	4b23      	ldr	r3, [pc, #140]	@ (80011cc <HAL_GPIO_Init+0x304>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001162:	4a1a      	ldr	r2, [pc, #104]	@ (80011cc <HAL_GPIO_Init+0x304>)
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001168:	4b18      	ldr	r3, [pc, #96]	@ (80011cc <HAL_GPIO_Init+0x304>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800118c:	4a0f      	ldr	r2, [pc, #60]	@ (80011cc <HAL_GPIO_Init+0x304>)
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3301      	adds	r3, #1
 8001196:	61fb      	str	r3, [r7, #28]
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	2b0f      	cmp	r3, #15
 800119c:	f67f aea2 	bls.w	8000ee4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011a0:	bf00      	nop
 80011a2:	bf00      	nop
 80011a4:	3724      	adds	r7, #36	@ 0x24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40013800 	.word	0x40013800
 80011b8:	40020000 	.word	0x40020000
 80011bc:	40020400 	.word	0x40020400
 80011c0:	40020800 	.word	0x40020800
 80011c4:	40020c00 	.word	0x40020c00
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40013c00 	.word	0x40013c00

080011d0 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	695a      	ldr	r2, [r3, #20]
 80011e0:	887b      	ldrh	r3, [r7, #2]
 80011e2:	401a      	ands	r2, r3
 80011e4:	887b      	ldrh	r3, [r7, #2]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d104      	bne.n	80011f4 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80011ea:	887b      	ldrh	r3, [r7, #2]
 80011ec:	041a      	lsls	r2, r3, #16
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80011f2:	e002      	b.n	80011fa <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80011f4:	887a      	ldrh	r2, [r7, #2]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	619a      	str	r2, [r3, #24]
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
	...

08001208 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001212:	4b08      	ldr	r3, [pc, #32]	@ (8001234 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001214:	695a      	ldr	r2, [r3, #20]
 8001216:	88fb      	ldrh	r3, [r7, #6]
 8001218:	4013      	ands	r3, r2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d006      	beq.n	800122c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800121e:	4a05      	ldr	r2, [pc, #20]	@ (8001234 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001224:	88fb      	ldrh	r3, [r7, #6]
 8001226:	4618      	mov	r0, r3
 8001228:	f001 f8cc 	bl	80023c4 <HAL_GPIO_EXTI_Callback>
  }
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40013c00 	.word	0x40013c00

08001238 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e12b      	b.n	80014a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	d106      	bne.n	8001264 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 f92e 	bl	80014c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2224      	movs	r2, #36	@ 0x24
 8001268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 0201 	bic.w	r2, r2, #1
 800127a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800128a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800129a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800129c:	f000 ff90 	bl	80021c0 <HAL_RCC_GetPCLK1Freq>
 80012a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	4a81      	ldr	r2, [pc, #516]	@ (80014ac <HAL_I2C_Init+0x274>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d807      	bhi.n	80012bc <HAL_I2C_Init+0x84>
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4a80      	ldr	r2, [pc, #512]	@ (80014b0 <HAL_I2C_Init+0x278>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	bf94      	ite	ls
 80012b4:	2301      	movls	r3, #1
 80012b6:	2300      	movhi	r3, #0
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	e006      	b.n	80012ca <HAL_I2C_Init+0x92>
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	4a7d      	ldr	r2, [pc, #500]	@ (80014b4 <HAL_I2C_Init+0x27c>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	bf94      	ite	ls
 80012c4:	2301      	movls	r3, #1
 80012c6:	2300      	movhi	r3, #0
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e0e7      	b.n	80014a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4a78      	ldr	r2, [pc, #480]	@ (80014b8 <HAL_I2C_Init+0x280>)
 80012d6:	fba2 2303 	umull	r2, r3, r2, r3
 80012da:	0c9b      	lsrs	r3, r3, #18
 80012dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	68ba      	ldr	r2, [r7, #8]
 80012ee:	430a      	orrs	r2, r1
 80012f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	6a1b      	ldr	r3, [r3, #32]
 80012f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	4a6a      	ldr	r2, [pc, #424]	@ (80014ac <HAL_I2C_Init+0x274>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d802      	bhi.n	800130c <HAL_I2C_Init+0xd4>
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	3301      	adds	r3, #1
 800130a:	e009      	b.n	8001320 <HAL_I2C_Init+0xe8>
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001312:	fb02 f303 	mul.w	r3, r2, r3
 8001316:	4a69      	ldr	r2, [pc, #420]	@ (80014bc <HAL_I2C_Init+0x284>)
 8001318:	fba2 2303 	umull	r2, r3, r2, r3
 800131c:	099b      	lsrs	r3, r3, #6
 800131e:	3301      	adds	r3, #1
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	6812      	ldr	r2, [r2, #0]
 8001324:	430b      	orrs	r3, r1
 8001326:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001332:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	495c      	ldr	r1, [pc, #368]	@ (80014ac <HAL_I2C_Init+0x274>)
 800133c:	428b      	cmp	r3, r1
 800133e:	d819      	bhi.n	8001374 <HAL_I2C_Init+0x13c>
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	1e59      	subs	r1, r3, #1
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	fbb1 f3f3 	udiv	r3, r1, r3
 800134e:	1c59      	adds	r1, r3, #1
 8001350:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001354:	400b      	ands	r3, r1
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00a      	beq.n	8001370 <HAL_I2C_Init+0x138>
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	1e59      	subs	r1, r3, #1
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	fbb1 f3f3 	udiv	r3, r1, r3
 8001368:	3301      	adds	r3, #1
 800136a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800136e:	e051      	b.n	8001414 <HAL_I2C_Init+0x1dc>
 8001370:	2304      	movs	r3, #4
 8001372:	e04f      	b.n	8001414 <HAL_I2C_Init+0x1dc>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d111      	bne.n	80013a0 <HAL_I2C_Init+0x168>
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	1e58      	subs	r0, r3, #1
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6859      	ldr	r1, [r3, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	440b      	add	r3, r1
 800138a:	fbb0 f3f3 	udiv	r3, r0, r3
 800138e:	3301      	adds	r3, #1
 8001390:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001394:	2b00      	cmp	r3, #0
 8001396:	bf0c      	ite	eq
 8001398:	2301      	moveq	r3, #1
 800139a:	2300      	movne	r3, #0
 800139c:	b2db      	uxtb	r3, r3
 800139e:	e012      	b.n	80013c6 <HAL_I2C_Init+0x18e>
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	1e58      	subs	r0, r3, #1
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6859      	ldr	r1, [r3, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	440b      	add	r3, r1
 80013ae:	0099      	lsls	r1, r3, #2
 80013b0:	440b      	add	r3, r1
 80013b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80013b6:	3301      	adds	r3, #1
 80013b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013bc:	2b00      	cmp	r3, #0
 80013be:	bf0c      	ite	eq
 80013c0:	2301      	moveq	r3, #1
 80013c2:	2300      	movne	r3, #0
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <HAL_I2C_Init+0x196>
 80013ca:	2301      	movs	r3, #1
 80013cc:	e022      	b.n	8001414 <HAL_I2C_Init+0x1dc>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d10e      	bne.n	80013f4 <HAL_I2C_Init+0x1bc>
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	1e58      	subs	r0, r3, #1
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6859      	ldr	r1, [r3, #4]
 80013de:	460b      	mov	r3, r1
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	440b      	add	r3, r1
 80013e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80013e8:	3301      	adds	r3, #1
 80013ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013f2:	e00f      	b.n	8001414 <HAL_I2C_Init+0x1dc>
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	1e58      	subs	r0, r3, #1
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6859      	ldr	r1, [r3, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	440b      	add	r3, r1
 8001402:	0099      	lsls	r1, r3, #2
 8001404:	440b      	add	r3, r1
 8001406:	fbb0 f3f3 	udiv	r3, r0, r3
 800140a:	3301      	adds	r3, #1
 800140c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001410:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	6809      	ldr	r1, [r1, #0]
 8001418:	4313      	orrs	r3, r2
 800141a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	69da      	ldr	r2, [r3, #28]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a1b      	ldr	r3, [r3, #32]
 800142e:	431a      	orrs	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	430a      	orrs	r2, r1
 8001436:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001442:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	6911      	ldr	r1, [r2, #16]
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	68d2      	ldr	r2, [r2, #12]
 800144e:	4311      	orrs	r1, r2
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	6812      	ldr	r2, [r2, #0]
 8001454:	430b      	orrs	r3, r1
 8001456:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	695a      	ldr	r2, [r3, #20]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	431a      	orrs	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	430a      	orrs	r2, r1
 8001472:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f042 0201 	orr.w	r2, r2, #1
 8001482:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2220      	movs	r2, #32
 800148e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	000186a0 	.word	0x000186a0
 80014b0:	001e847f 	.word	0x001e847f
 80014b4:	003d08ff 	.word	0x003d08ff
 80014b8:	431bde83 	.word	0x431bde83
 80014bc:	10624dd3 	.word	0x10624dd3

080014c0 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b088      	sub	sp, #32
 80014d8:	af02      	add	r7, sp, #8
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	607a      	str	r2, [r7, #4]
 80014de:	461a      	mov	r2, r3
 80014e0:	460b      	mov	r3, r1
 80014e2:	817b      	strh	r3, [r7, #10]
 80014e4:	4613      	mov	r3, r2
 80014e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80014e8:	f7ff fa6e 	bl	80009c8 <HAL_GetTick>
 80014ec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b20      	cmp	r3, #32
 80014f8:	f040 80e0 	bne.w	80016bc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	2319      	movs	r3, #25
 8001502:	2201      	movs	r2, #1
 8001504:	4970      	ldr	r1, [pc, #448]	@ (80016c8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f000 fc70 	bl	8001dec <I2C_WaitOnFlagUntilTimeout>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001512:	2302      	movs	r3, #2
 8001514:	e0d3      	b.n	80016be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800151c:	2b01      	cmp	r3, #1
 800151e:	d101      	bne.n	8001524 <HAL_I2C_Master_Transmit+0x50>
 8001520:	2302      	movs	r3, #2
 8001522:	e0cc      	b.n	80016be <HAL_I2C_Master_Transmit+0x1ea>
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2201      	movs	r2, #1
 8001528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b01      	cmp	r3, #1
 8001538:	d007      	beq.n	800154a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f042 0201 	orr.w	r2, r2, #1
 8001548:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001558:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2221      	movs	r2, #33	@ 0x21
 800155e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2210      	movs	r2, #16
 8001566:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2200      	movs	r2, #0
 800156e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	893a      	ldrh	r2, [r7, #8]
 800157a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001580:	b29a      	uxth	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	4a50      	ldr	r2, [pc, #320]	@ (80016cc <HAL_I2C_Master_Transmit+0x1f8>)
 800158a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800158c:	8979      	ldrh	r1, [r7, #10]
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	6a3a      	ldr	r2, [r7, #32]
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	f000 fac2 	bl	8001b1c <I2C_MasterRequestWrite>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e08d      	b.n	80016be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	695b      	ldr	r3, [r3, #20]
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80015b8:	e066      	b.n	8001688 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	6a39      	ldr	r1, [r7, #32]
 80015be:	68f8      	ldr	r0, [r7, #12]
 80015c0:	f000 fcea 	bl	8001f98 <I2C_WaitOnTXEFlagUntilTimeout>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d00d      	beq.n	80015e6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	d107      	bne.n	80015e2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e06b      	b.n	80016be <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ea:	781a      	ldrb	r2, [r3, #0]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f6:	1c5a      	adds	r2, r3, #1
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001600:	b29b      	uxth	r3, r3
 8001602:	3b01      	subs	r3, #1
 8001604:	b29a      	uxth	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800160e:	3b01      	subs	r3, #1
 8001610:	b29a      	uxth	r2, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	695b      	ldr	r3, [r3, #20]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	2b04      	cmp	r3, #4
 8001622:	d11b      	bne.n	800165c <HAL_I2C_Master_Transmit+0x188>
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001628:	2b00      	cmp	r3, #0
 800162a:	d017      	beq.n	800165c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001630:	781a      	ldrb	r2, [r3, #0]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800163c:	1c5a      	adds	r2, r3, #1
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001646:	b29b      	uxth	r3, r3
 8001648:	3b01      	subs	r3, #1
 800164a:	b29a      	uxth	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001654:	3b01      	subs	r3, #1
 8001656:	b29a      	uxth	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800165c:	697a      	ldr	r2, [r7, #20]
 800165e:	6a39      	ldr	r1, [r7, #32]
 8001660:	68f8      	ldr	r0, [r7, #12]
 8001662:	f000 fcda 	bl	800201a <I2C_WaitOnBTFFlagUntilTimeout>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d00d      	beq.n	8001688 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001670:	2b04      	cmp	r3, #4
 8001672:	d107      	bne.n	8001684 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001682:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e01a      	b.n	80016be <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800168c:	2b00      	cmp	r3, #0
 800168e:	d194      	bne.n	80015ba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800169e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2220      	movs	r2, #32
 80016a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80016b8:	2300      	movs	r3, #0
 80016ba:	e000      	b.n	80016be <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80016bc:	2302      	movs	r3, #2
  }
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	00100002 	.word	0x00100002
 80016cc:	ffff0000 	.word	0xffff0000

080016d0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08c      	sub	sp, #48	@ 0x30
 80016d4:	af02      	add	r7, sp, #8
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	4608      	mov	r0, r1
 80016da:	4611      	mov	r1, r2
 80016dc:	461a      	mov	r2, r3
 80016de:	4603      	mov	r3, r0
 80016e0:	817b      	strh	r3, [r7, #10]
 80016e2:	460b      	mov	r3, r1
 80016e4:	813b      	strh	r3, [r7, #8]
 80016e6:	4613      	mov	r3, r2
 80016e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80016ea:	f7ff f96d 	bl	80009c8 <HAL_GetTick>
 80016ee:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b20      	cmp	r3, #32
 80016fa:	f040 8208 	bne.w	8001b0e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	2319      	movs	r3, #25
 8001704:	2201      	movs	r2, #1
 8001706:	497b      	ldr	r1, [pc, #492]	@ (80018f4 <HAL_I2C_Mem_Read+0x224>)
 8001708:	68f8      	ldr	r0, [r7, #12]
 800170a:	f000 fb6f 	bl	8001dec <I2C_WaitOnFlagUntilTimeout>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001714:	2302      	movs	r3, #2
 8001716:	e1fb      	b.n	8001b10 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800171e:	2b01      	cmp	r3, #1
 8001720:	d101      	bne.n	8001726 <HAL_I2C_Mem_Read+0x56>
 8001722:	2302      	movs	r3, #2
 8001724:	e1f4      	b.n	8001b10 <HAL_I2C_Mem_Read+0x440>
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2201      	movs	r2, #1
 800172a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	2b01      	cmp	r3, #1
 800173a:	d007      	beq.n	800174c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f042 0201 	orr.w	r2, r2, #1
 800174a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800175a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2222      	movs	r2, #34	@ 0x22
 8001760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2240      	movs	r2, #64	@ 0x40
 8001768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2200      	movs	r2, #0
 8001770:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001776:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800177c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001782:	b29a      	uxth	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4a5b      	ldr	r2, [pc, #364]	@ (80018f8 <HAL_I2C_Mem_Read+0x228>)
 800178c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800178e:	88f8      	ldrh	r0, [r7, #6]
 8001790:	893a      	ldrh	r2, [r7, #8]
 8001792:	8979      	ldrh	r1, [r7, #10]
 8001794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001796:	9301      	str	r3, [sp, #4]
 8001798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	4603      	mov	r3, r0
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	f000 fa3e 	bl	8001c20 <I2C_RequestMemoryRead>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e1b0      	b.n	8001b10 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d113      	bne.n	80017de <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017b6:	2300      	movs	r3, #0
 80017b8:	623b      	str	r3, [r7, #32]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	695b      	ldr	r3, [r3, #20]
 80017c0:	623b      	str	r3, [r7, #32]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	623b      	str	r3, [r7, #32]
 80017ca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	e184      	b.n	8001ae8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d11b      	bne.n	800181e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80017f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	695b      	ldr	r3, [r3, #20]
 8001800:	61fb      	str	r3, [r7, #28]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	61fb      	str	r3, [r7, #28]
 800180a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	e164      	b.n	8001ae8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001822:	2b02      	cmp	r3, #2
 8001824:	d11b      	bne.n	800185e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001834:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001844:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001846:	2300      	movs	r3, #0
 8001848:	61bb      	str	r3, [r7, #24]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	61bb      	str	r3, [r7, #24]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	61bb      	str	r3, [r7, #24]
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	e144      	b.n	8001ae8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800185e:	2300      	movs	r3, #0
 8001860:	617b      	str	r3, [r7, #20]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	695b      	ldr	r3, [r3, #20]
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001874:	e138      	b.n	8001ae8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800187a:	2b03      	cmp	r3, #3
 800187c:	f200 80f1 	bhi.w	8001a62 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001884:	2b01      	cmp	r3, #1
 8001886:	d123      	bne.n	80018d0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001888:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800188a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800188c:	68f8      	ldr	r0, [r7, #12]
 800188e:	f000 fc05 	bl	800209c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e139      	b.n	8001b10 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	691a      	ldr	r2, [r3, #16]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a6:	b2d2      	uxtb	r2, r2
 80018a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ae:	1c5a      	adds	r2, r3, #1
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018b8:	3b01      	subs	r3, #1
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	3b01      	subs	r3, #1
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80018ce:	e10b      	b.n	8001ae8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d14e      	bne.n	8001976 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80018d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018de:	2200      	movs	r2, #0
 80018e0:	4906      	ldr	r1, [pc, #24]	@ (80018fc <HAL_I2C_Mem_Read+0x22c>)
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	f000 fa82 	bl	8001dec <I2C_WaitOnFlagUntilTimeout>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d008      	beq.n	8001900 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e10e      	b.n	8001b10 <HAL_I2C_Mem_Read+0x440>
 80018f2:	bf00      	nop
 80018f4:	00100002 	.word	0x00100002
 80018f8:	ffff0000 	.word	0xffff0000
 80018fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800190e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	691a      	ldr	r2, [r3, #16]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001922:	1c5a      	adds	r2, r3, #1
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800192c:	3b01      	subs	r3, #1
 800192e:	b29a      	uxth	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001938:	b29b      	uxth	r3, r3
 800193a:	3b01      	subs	r3, #1
 800193c:	b29a      	uxth	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	691a      	ldr	r2, [r3, #16]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001954:	1c5a      	adds	r2, r3, #1
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800195e:	3b01      	subs	r3, #1
 8001960:	b29a      	uxth	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800196a:	b29b      	uxth	r3, r3
 800196c:	3b01      	subs	r3, #1
 800196e:	b29a      	uxth	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001974:	e0b8      	b.n	8001ae8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800197c:	2200      	movs	r2, #0
 800197e:	4966      	ldr	r1, [pc, #408]	@ (8001b18 <HAL_I2C_Mem_Read+0x448>)
 8001980:	68f8      	ldr	r0, [r7, #12]
 8001982:	f000 fa33 	bl	8001dec <I2C_WaitOnFlagUntilTimeout>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e0bf      	b.n	8001b10 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800199e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	691a      	ldr	r2, [r3, #16]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019bc:	3b01      	subs	r3, #1
 80019be:	b29a      	uxth	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	3b01      	subs	r3, #1
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019d8:	2200      	movs	r2, #0
 80019da:	494f      	ldr	r1, [pc, #316]	@ (8001b18 <HAL_I2C_Mem_Read+0x448>)
 80019dc:	68f8      	ldr	r0, [r7, #12]
 80019de:	f000 fa05 	bl	8001dec <I2C_WaitOnFlagUntilTimeout>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e091      	b.n	8001b10 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	691a      	ldr	r2, [r3, #16]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a0e:	1c5a      	adds	r2, r3, #1
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	3b01      	subs	r3, #1
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	691a      	ldr	r2, [r3, #16]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a40:	1c5a      	adds	r2, r3, #1
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001a60:	e042      	b.n	8001ae8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a64:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f000 fb18 	bl	800209c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e04c      	b.n	8001b10 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	691a      	ldr	r2, [r3, #16]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a88:	1c5a      	adds	r2, r3, #1
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a92:	3b01      	subs	r3, #1
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	f003 0304 	and.w	r3, r3, #4
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	d118      	bne.n	8001ae8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	691a      	ldr	r2, [r3, #16]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac8:	1c5a      	adds	r2, r3, #1
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f47f aec2 	bne.w	8001876 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2220      	movs	r2, #32
 8001af6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	e000      	b.n	8001b10 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001b0e:	2302      	movs	r3, #2
  }
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3728      	adds	r7, #40	@ 0x28
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	00010004 	.word	0x00010004

08001b1c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b088      	sub	sp, #32
 8001b20:	af02      	add	r7, sp, #8
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	607a      	str	r2, [r7, #4]
 8001b26:	603b      	str	r3, [r7, #0]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b30:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	d006      	beq.n	8001b46 <I2C_MasterRequestWrite+0x2a>
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d003      	beq.n	8001b46 <I2C_MasterRequestWrite+0x2a>
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001b44:	d108      	bne.n	8001b58 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	e00b      	b.n	8001b70 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5c:	2b12      	cmp	r3, #18
 8001b5e:	d107      	bne.n	8001b70 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b6e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001b7c:	68f8      	ldr	r0, [r7, #12]
 8001b7e:	f000 f935 	bl	8001dec <I2C_WaitOnFlagUntilTimeout>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00c      	beq.n	8001ba2 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b9c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e035      	b.n	8001c0e <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001baa:	d108      	bne.n	8001bbe <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001bac:	897b      	ldrh	r3, [r7, #10]
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001bba:	611a      	str	r2, [r3, #16]
 8001bbc:	e01b      	b.n	8001bf6 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001bbe:	897b      	ldrh	r3, [r7, #10]
 8001bc0:	11db      	asrs	r3, r3, #7
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	f003 0306 	and.w	r3, r3, #6
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	f063 030f 	orn	r3, r3, #15
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	490f      	ldr	r1, [pc, #60]	@ (8001c18 <I2C_MasterRequestWrite+0xfc>)
 8001bdc:	68f8      	ldr	r0, [r7, #12]
 8001bde:	f000 f95c 	bl	8001e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e010      	b.n	8001c0e <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001bec:	897b      	ldrh	r3, [r7, #10]
 8001bee:	b2da      	uxtb	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	4908      	ldr	r1, [pc, #32]	@ (8001c1c <I2C_MasterRequestWrite+0x100>)
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f000 f94c 	bl	8001e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e000      	b.n	8001c0e <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	00010008 	.word	0x00010008
 8001c1c:	00010002 	.word	0x00010002

08001c20 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b088      	sub	sp, #32
 8001c24:	af02      	add	r7, sp, #8
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	4608      	mov	r0, r1
 8001c2a:	4611      	mov	r1, r2
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4603      	mov	r3, r0
 8001c30:	817b      	strh	r3, [r7, #10]
 8001c32:	460b      	mov	r3, r1
 8001c34:	813b      	strh	r3, [r7, #8]
 8001c36:	4613      	mov	r3, r2
 8001c38:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001c48:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	6a3b      	ldr	r3, [r7, #32]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f000 f8c0 	bl	8001dec <I2C_WaitOnFlagUntilTimeout>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00c      	beq.n	8001c8c <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c86:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e0a9      	b.n	8001de0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c8c:	897b      	ldrh	r3, [r7, #10]
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	461a      	mov	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001c9a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9e:	6a3a      	ldr	r2, [r7, #32]
 8001ca0:	4951      	ldr	r1, [pc, #324]	@ (8001de8 <I2C_RequestMemoryRead+0x1c8>)
 8001ca2:	68f8      	ldr	r0, [r7, #12]
 8001ca4:	f000 f8f9 	bl	8001e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e096      	b.n	8001de0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	617b      	str	r3, [r7, #20]
 8001cc6:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cca:	6a39      	ldr	r1, [r7, #32]
 8001ccc:	68f8      	ldr	r0, [r7, #12]
 8001cce:	f000 f963 	bl	8001f98 <I2C_WaitOnTXEFlagUntilTimeout>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00d      	beq.n	8001cf4 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cdc:	2b04      	cmp	r3, #4
 8001cde:	d107      	bne.n	8001cf0 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e075      	b.n	8001de0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001cf4:	88fb      	ldrh	r3, [r7, #6]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d105      	bne.n	8001d06 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001cfa:	893b      	ldrh	r3, [r7, #8]
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	611a      	str	r2, [r3, #16]
 8001d04:	e021      	b.n	8001d4a <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001d06:	893b      	ldrh	r3, [r7, #8]
 8001d08:	0a1b      	lsrs	r3, r3, #8
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d16:	6a39      	ldr	r1, [r7, #32]
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	f000 f93d 	bl	8001f98 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d00d      	beq.n	8001d40 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d28:	2b04      	cmp	r3, #4
 8001d2a:	d107      	bne.n	8001d3c <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d3a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e04f      	b.n	8001de0 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d40:	893b      	ldrh	r3, [r7, #8]
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d4c:	6a39      	ldr	r1, [r7, #32]
 8001d4e:	68f8      	ldr	r0, [r7, #12]
 8001d50:	f000 f922 	bl	8001f98 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00d      	beq.n	8001d76 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	d107      	bne.n	8001d72 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e034      	b.n	8001de0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	6a3b      	ldr	r3, [r7, #32]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f000 f82a 	bl	8001dec <I2C_WaitOnFlagUntilTimeout>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00c      	beq.n	8001db8 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001db2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e013      	b.n	8001de0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001db8:	897b      	ldrh	r3, [r7, #10]
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dca:	6a3a      	ldr	r2, [r7, #32]
 8001dcc:	4906      	ldr	r1, [pc, #24]	@ (8001de8 <I2C_RequestMemoryRead+0x1c8>)
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f000 f863 	bl	8001e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e000      	b.n	8001de0 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	00010002 	.word	0x00010002

08001dec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	603b      	str	r3, [r7, #0]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dfc:	e025      	b.n	8001e4a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e04:	d021      	beq.n	8001e4a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e06:	f7fe fddf 	bl	80009c8 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d302      	bcc.n	8001e1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d116      	bne.n	8001e4a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2220      	movs	r2, #32
 8001e26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e36:	f043 0220 	orr.w	r2, r3, #32
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e023      	b.n	8001e92 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	0c1b      	lsrs	r3, r3, #16
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d10d      	bne.n	8001e70 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	43da      	mvns	r2, r3
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	bf0c      	ite	eq
 8001e66:	2301      	moveq	r3, #1
 8001e68:	2300      	movne	r3, #0
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	e00c      	b.n	8001e8a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	43da      	mvns	r2, r3
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	bf0c      	ite	eq
 8001e82:	2301      	moveq	r3, #1
 8001e84:	2300      	movne	r3, #0
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	461a      	mov	r2, r3
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d0b6      	beq.n	8001dfe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b084      	sub	sp, #16
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	60f8      	str	r0, [r7, #12]
 8001ea2:	60b9      	str	r1, [r7, #8]
 8001ea4:	607a      	str	r2, [r7, #4]
 8001ea6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ea8:	e051      	b.n	8001f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eb8:	d123      	bne.n	8001f02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ec8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001ed2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2220      	movs	r2, #32
 8001ede:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eee:	f043 0204 	orr.w	r2, r3, #4
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e046      	b.n	8001f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f08:	d021      	beq.n	8001f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f0a:	f7fe fd5d 	bl	80009c8 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d302      	bcc.n	8001f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d116      	bne.n	8001f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2220      	movs	r2, #32
 8001f2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3a:	f043 0220 	orr.w	r2, r3, #32
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e020      	b.n	8001f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	0c1b      	lsrs	r3, r3, #16
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d10c      	bne.n	8001f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	43da      	mvns	r2, r3
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	4013      	ands	r3, r2
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	bf14      	ite	ne
 8001f6a:	2301      	movne	r3, #1
 8001f6c:	2300      	moveq	r3, #0
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	e00b      	b.n	8001f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	43da      	mvns	r2, r3
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	bf14      	ite	ne
 8001f84:	2301      	movne	r3, #1
 8001f86:	2300      	moveq	r3, #0
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d18d      	bne.n	8001eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fa4:	e02d      	b.n	8002002 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f000 f8ce 	bl	8002148 <I2C_IsAcknowledgeFailed>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e02d      	b.n	8002012 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fbc:	d021      	beq.n	8002002 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fbe:	f7fe fd03 	bl	80009c8 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	68ba      	ldr	r2, [r7, #8]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d302      	bcc.n	8001fd4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d116      	bne.n	8002002 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2220      	movs	r2, #32
 8001fde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fee:	f043 0220 	orr.w	r2, r3, #32
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e007      	b.n	8002012 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800200c:	2b80      	cmp	r3, #128	@ 0x80
 800200e:	d1ca      	bne.n	8001fa6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b084      	sub	sp, #16
 800201e:	af00      	add	r7, sp, #0
 8002020:	60f8      	str	r0, [r7, #12]
 8002022:	60b9      	str	r1, [r7, #8]
 8002024:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002026:	e02d      	b.n	8002084 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f000 f88d 	bl	8002148 <I2C_IsAcknowledgeFailed>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e02d      	b.n	8002094 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800203e:	d021      	beq.n	8002084 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002040:	f7fe fcc2 	bl	80009c8 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	68ba      	ldr	r2, [r7, #8]
 800204c:	429a      	cmp	r2, r3
 800204e:	d302      	bcc.n	8002056 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d116      	bne.n	8002084 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2220      	movs	r2, #32
 8002060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002070:	f043 0220 	orr.w	r2, r3, #32
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e007      	b.n	8002094 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	f003 0304 	and.w	r3, r3, #4
 800208e:	2b04      	cmp	r3, #4
 8002090:	d1ca      	bne.n	8002028 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80020a8:	e042      	b.n	8002130 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	f003 0310 	and.w	r3, r3, #16
 80020b4:	2b10      	cmp	r3, #16
 80020b6:	d119      	bne.n	80020ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f06f 0210 	mvn.w	r2, #16
 80020c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2220      	movs	r2, #32
 80020cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e029      	b.n	8002140 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ec:	f7fe fc6c 	bl	80009c8 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d302      	bcc.n	8002102 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d116      	bne.n	8002130 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2220      	movs	r2, #32
 800210c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211c:	f043 0220 	orr.w	r2, r3, #32
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e007      	b.n	8002140 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800213a:	2b40      	cmp	r3, #64	@ 0x40
 800213c:	d1b5      	bne.n	80020aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800215a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800215e:	d11b      	bne.n	8002198 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002168:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2220      	movs	r2, #32
 8002174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002184:	f043 0204 	orr.w	r2, r3, #4
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e000      	b.n	800219a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
	...

080021a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021ac:	4b03      	ldr	r3, [pc, #12]	@ (80021bc <HAL_RCC_GetHCLKFreq+0x14>)
 80021ae:	681b      	ldr	r3, [r3, #0]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	20000008 	.word	0x20000008

080021c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80021c4:	f7ff fff0 	bl	80021a8 <HAL_RCC_GetHCLKFreq>
 80021c8:	4602      	mov	r2, r0
 80021ca:	4b05      	ldr	r3, [pc, #20]	@ (80021e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	0a9b      	lsrs	r3, r3, #10
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	4903      	ldr	r1, [pc, #12]	@ (80021e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021d6:	5ccb      	ldrb	r3, [r1, r3]
 80021d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021dc:	4618      	mov	r0, r3
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40023800 	.word	0x40023800
 80021e4:	080036d8 	.word	0x080036d8

080021e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af02      	add	r7, sp, #8
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	603b      	str	r3, [r7, #0]
 80021f4:	4613      	mov	r3, r2
 80021f6:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b20      	cmp	r3, #32
 8002206:	f040 8083 	bne.w	8002310 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d002      	beq.n	8002216 <HAL_UART_Transmit+0x2e>
 8002210:	88fb      	ldrh	r3, [r7, #6]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e07b      	b.n	8002312 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002220:	2b01      	cmp	r3, #1
 8002222:	d101      	bne.n	8002228 <HAL_UART_Transmit+0x40>
 8002224:	2302      	movs	r3, #2
 8002226:	e074      	b.n	8002312 <HAL_UART_Transmit+0x12a>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2221      	movs	r2, #33	@ 0x21
 800223a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800223e:	f7fe fbc3 	bl	80009c8 <HAL_GetTick>
 8002242:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	88fa      	ldrh	r2, [r7, #6]
 8002248:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	88fa      	ldrh	r2, [r7, #6]
 800224e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    while (huart->TxXferCount > 0U)
 8002258:	e042      	b.n	80022e0 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800225e:	b29b      	uxth	r3, r3
 8002260:	3b01      	subs	r3, #1
 8002262:	b29a      	uxth	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	84da      	strh	r2, [r3, #38]	@ 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002270:	d122      	bne.n	80022b8 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	2200      	movs	r2, #0
 800227a:	2180      	movs	r1, #128	@ 0x80
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f000 f84c 	bl	800231a <UART_WaitOnFlagUntilTimeout>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e042      	b.n	8002312 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	881b      	ldrh	r3, [r3, #0]
 8002294:	461a      	mov	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800229e:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d103      	bne.n	80022b0 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	3302      	adds	r3, #2
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	e017      	b.n	80022e0 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	3301      	adds	r3, #1
 80022b4:	60bb      	str	r3, [r7, #8]
 80022b6:	e013      	b.n	80022e0 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	2200      	movs	r2, #0
 80022c0:	2180      	movs	r1, #128	@ 0x80
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f000 f829 	bl	800231a <UART_WaitOnFlagUntilTimeout>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e01f      	b.n	8002312 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	1c5a      	adds	r2, r3, #1
 80022d6:	60ba      	str	r2, [r7, #8]
 80022d8:	781a      	ldrb	r2, [r3, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1b7      	bne.n	800225a <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	2200      	movs	r2, #0
 80022f2:	2140      	movs	r1, #64	@ 0x40
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f000 f810 	bl	800231a <UART_WaitOnFlagUntilTimeout>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e006      	b.n	8002312 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2220      	movs	r2, #32
 8002308:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    return HAL_OK;
 800230c:	2300      	movs	r3, #0
 800230e:	e000      	b.n	8002312 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002310:	2302      	movs	r3, #2
  }
}
 8002312:	4618      	mov	r0, r3
 8002314:	3718      	adds	r7, #24
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b084      	sub	sp, #16
 800231e:	af00      	add	r7, sp, #0
 8002320:	60f8      	str	r0, [r7, #12]
 8002322:	60b9      	str	r1, [r7, #8]
 8002324:	603b      	str	r3, [r7, #0]
 8002326:	4613      	mov	r3, r2
 8002328:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800232a:	e02c      	b.n	8002386 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002332:	d028      	beq.n	8002386 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d007      	beq.n	800234a <UART_WaitOnFlagUntilTimeout+0x30>
 800233a:	f7fe fb45 	bl	80009c8 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	429a      	cmp	r2, r3
 8002348:	d21d      	bcs.n	8002386 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68da      	ldr	r2, [r3, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8002358:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	695a      	ldr	r2, [r3, #20]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0201 	bic.w	r2, r2, #1
 8002368:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2220      	movs	r2, #32
 800236e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2220      	movs	r2, #32
 8002376:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e00f      	b.n	80023a6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	4013      	ands	r3, r2
 8002390:	68ba      	ldr	r2, [r7, #8]
 8002392:	429a      	cmp	r2, r3
 8002394:	bf0c      	ite	eq
 8002396:	2301      	moveq	r3, #1
 8002398:	2300      	movne	r3, #0
 800239a:	b2db      	uxtb	r3, r3
 800239c:	461a      	mov	r2, r3
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d0c3      	beq.n	800232c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <ADC_IRQHandler>:
    HAL_NVIC_SetPriority(ADC_IRQn,0,0);
    HAL_NVIC_EnableIRQ(ADC_IRQn);

}

void ADC_IRQHandler(void){
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
	HAL_ADC_IRQHandler(&hadc1);
 80023b4:	4802      	ldr	r0, [pc, #8]	@ (80023c0 <ADC_IRQHandler+0x10>)
 80023b6:	f7fe fb37 	bl	8000a28 <HAL_ADC_IRQHandler>
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000088 	.word	0x20000088

080023c4 <HAL_GPIO_EXTI_Callback>:


}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	80fb      	strh	r3, [r7, #6]
	//Do something..
	HAL_GPIO_TogglePin(LED_PORT,LED_PIN);
 80023ce:	2120      	movs	r1, #32
 80023d0:	4804      	ldr	r0, [pc, #16]	@ (80023e4 <HAL_GPIO_EXTI_Callback+0x20>)
 80023d2:	f7fe fefd 	bl	80011d0 <HAL_GPIO_TogglePin>
	printf("Button pressed ! \n\r");
 80023d6:	4804      	ldr	r0, [pc, #16]	@ (80023e8 <HAL_GPIO_EXTI_Callback+0x24>)
 80023d8:	f000 fafa 	bl	80029d0 <iprintf>
}
 80023dc:	bf00      	nop
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40020000 	.word	0x40020000
 80023e8:	080036c4 	.word	0x080036c4

080023ec <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void){
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80023f0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80023f4:	f7fe ff08 	bl	8001208 <HAL_GPIO_EXTI_IRQHandler>

}
 80023f8:	bf00      	nop
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	0000      	movs	r0, r0
	...

08002400 <main>:
int16_t x,y,z;
float xg,yg,zg;


int main()
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0

  HAL_Init();
 8002404:	f7fe fa72 	bl	80008ec <HAL_Init>
  i2c1_init();
 8002408:	f000 f8e0 	bl	80025cc <i2c1_init>
  adxl_init();
 800240c:	f000 f8ca 	bl	80025a4 <adxl_init>


  while(1)
  {

	adxl_read_values (DATA_START_ADDR);
 8002410:	2032      	movs	r0, #50	@ 0x32
 8002412:	f000 f893 	bl	800253c <adxl_read_values>

	  x = ((data_rec[1]<<8)|data_rec[0]);
 8002416:	4b34      	ldr	r3, [pc, #208]	@ (80024e8 <main+0xe8>)
 8002418:	785b      	ldrb	r3, [r3, #1]
 800241a:	021b      	lsls	r3, r3, #8
 800241c:	b21a      	sxth	r2, r3
 800241e:	4b32      	ldr	r3, [pc, #200]	@ (80024e8 <main+0xe8>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	b21b      	sxth	r3, r3
 8002424:	4313      	orrs	r3, r2
 8002426:	b21a      	sxth	r2, r3
 8002428:	4b30      	ldr	r3, [pc, #192]	@ (80024ec <main+0xec>)
 800242a:	801a      	strh	r2, [r3, #0]
	  y = ((data_rec[3]<<8)|data_rec[2]);
 800242c:	4b2e      	ldr	r3, [pc, #184]	@ (80024e8 <main+0xe8>)
 800242e:	78db      	ldrb	r3, [r3, #3]
 8002430:	021b      	lsls	r3, r3, #8
 8002432:	b21a      	sxth	r2, r3
 8002434:	4b2c      	ldr	r3, [pc, #176]	@ (80024e8 <main+0xe8>)
 8002436:	789b      	ldrb	r3, [r3, #2]
 8002438:	b21b      	sxth	r3, r3
 800243a:	4313      	orrs	r3, r2
 800243c:	b21a      	sxth	r2, r3
 800243e:	4b2c      	ldr	r3, [pc, #176]	@ (80024f0 <main+0xf0>)
 8002440:	801a      	strh	r2, [r3, #0]
	  z = ((data_rec[5]<<8)|data_rec[4]);
 8002442:	4b29      	ldr	r3, [pc, #164]	@ (80024e8 <main+0xe8>)
 8002444:	795b      	ldrb	r3, [r3, #5]
 8002446:	021b      	lsls	r3, r3, #8
 8002448:	b21a      	sxth	r2, r3
 800244a:	4b27      	ldr	r3, [pc, #156]	@ (80024e8 <main+0xe8>)
 800244c:	791b      	ldrb	r3, [r3, #4]
 800244e:	b21b      	sxth	r3, r3
 8002450:	4313      	orrs	r3, r2
 8002452:	b21a      	sxth	r2, r3
 8002454:	4b27      	ldr	r3, [pc, #156]	@ (80024f4 <main+0xf4>)
 8002456:	801a      	strh	r2, [r3, #0]

	  xg = x * FOUR_G_SCALE_FACT;
 8002458:	4b24      	ldr	r3, [pc, #144]	@ (80024ec <main+0xec>)
 800245a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800245e:	4618      	mov	r0, r3
 8002460:	f7fe f98a 	bl	8000778 <__aeabi_i2d>
 8002464:	a31e      	add	r3, pc, #120	@ (adr r3, 80024e0 <main+0xe0>)
 8002466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246a:	f7fd ff09 	bl	8000280 <__aeabi_dmul>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4610      	mov	r0, r2
 8002474:	4619      	mov	r1, r3
 8002476:	f7fe f9e9 	bl	800084c <__aeabi_d2f>
 800247a:	4603      	mov	r3, r0
 800247c:	4a1e      	ldr	r2, [pc, #120]	@ (80024f8 <main+0xf8>)
 800247e:	6013      	str	r3, [r2, #0]
	  yg = y * FOUR_G_SCALE_FACT;
 8002480:	4b1b      	ldr	r3, [pc, #108]	@ (80024f0 <main+0xf0>)
 8002482:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe f976 	bl	8000778 <__aeabi_i2d>
 800248c:	a314      	add	r3, pc, #80	@ (adr r3, 80024e0 <main+0xe0>)
 800248e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002492:	f7fd fef5 	bl	8000280 <__aeabi_dmul>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	4610      	mov	r0, r2
 800249c:	4619      	mov	r1, r3
 800249e:	f7fe f9d5 	bl	800084c <__aeabi_d2f>
 80024a2:	4603      	mov	r3, r0
 80024a4:	4a15      	ldr	r2, [pc, #84]	@ (80024fc <main+0xfc>)
 80024a6:	6013      	str	r3, [r2, #0]
	  zg = z * FOUR_G_SCALE_FACT;
 80024a8:	4b12      	ldr	r3, [pc, #72]	@ (80024f4 <main+0xf4>)
 80024aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fe f962 	bl	8000778 <__aeabi_i2d>
 80024b4:	a30a      	add	r3, pc, #40	@ (adr r3, 80024e0 <main+0xe0>)
 80024b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ba:	f7fd fee1 	bl	8000280 <__aeabi_dmul>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	4610      	mov	r0, r2
 80024c4:	4619      	mov	r1, r3
 80024c6:	f7fe f9c1 	bl	800084c <__aeabi_d2f>
 80024ca:	4603      	mov	r3, r0
 80024cc:	4a0c      	ldr	r2, [pc, #48]	@ (8002500 <main+0x100>)
 80024ce:	6013      	str	r3, [r2, #0]

	  HAL_Delay(10);
 80024d0:	200a      	movs	r0, #10
 80024d2:	f7fe fa85 	bl	80009e0 <HAL_Delay>
	adxl_read_values (DATA_START_ADDR);
 80024d6:	bf00      	nop
 80024d8:	e79a      	b.n	8002410 <main+0x10>
 80024da:	bf00      	nop
 80024dc:	f3af 8000 	nop.w
 80024e0:	8e8a71de 	.word	0x8e8a71de
 80024e4:	3f7ff2e4 	.word	0x3f7ff2e4
 80024e8:	20000124 	.word	0x20000124
 80024ec:	2000012c 	.word	0x2000012c
 80024f0:	2000012e 	.word	0x2000012e
 80024f4:	20000130 	.word	0x20000130
 80024f8:	20000134 	.word	0x20000134
 80024fc:	20000138 	.word	0x20000138
 8002500:	2000013c 	.word	0x2000013c

08002504 <adxl_write>:

  }
}

void adxl_write (uint8_t reg, uint8_t value)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af02      	add	r7, sp, #8
 800250a:	4603      	mov	r3, r0
 800250c:	460a      	mov	r2, r1
 800250e:	71fb      	strb	r3, [r7, #7]
 8002510:	4613      	mov	r3, r2
 8002512:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0] = reg;
 8002514:	79fb      	ldrb	r3, [r7, #7]
 8002516:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 8002518:	79bb      	ldrb	r3, [r7, #6]
 800251a:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit (&hi2c1, DEVICE_ADDR, data, 2, 100);
 800251c:	f107 020c 	add.w	r2, r7, #12
 8002520:	2364      	movs	r3, #100	@ 0x64
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	2302      	movs	r3, #2
 8002526:	21a6      	movs	r1, #166	@ 0xa6
 8002528:	4803      	ldr	r0, [pc, #12]	@ (8002538 <adxl_write+0x34>)
 800252a:	f7fe ffd3 	bl	80014d4 <HAL_I2C_Master_Transmit>

}
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	200000d0 	.word	0x200000d0

0800253c <adxl_read_values>:

void adxl_read_values (uint8_t reg)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af04      	add	r7, sp, #16
 8002542:	4603      	mov	r3, r0
 8002544:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read (&hi2c1, DEVICE_ADDR, reg, 1, (uint8_t *)data_rec, 6, 100);
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	b29a      	uxth	r2, r3
 800254a:	2364      	movs	r3, #100	@ 0x64
 800254c:	9302      	str	r3, [sp, #8]
 800254e:	2306      	movs	r3, #6
 8002550:	9301      	str	r3, [sp, #4]
 8002552:	4b05      	ldr	r3, [pc, #20]	@ (8002568 <adxl_read_values+0x2c>)
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	2301      	movs	r3, #1
 8002558:	21a6      	movs	r1, #166	@ 0xa6
 800255a:	4804      	ldr	r0, [pc, #16]	@ (800256c <adxl_read_values+0x30>)
 800255c:	f7ff f8b8 	bl	80016d0 <HAL_I2C_Mem_Read>

}
 8002560:	bf00      	nop
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20000124 	.word	0x20000124
 800256c:	200000d0 	.word	0x200000d0

08002570 <adxl_read_address>:

void adxl_read_address (uint8_t reg)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af04      	add	r7, sp, #16
 8002576:	4603      	mov	r3, r0
 8002578:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read (&hi2c1, DEVICE_ADDR, reg, 1, &device_id, 1, 100);
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	b29a      	uxth	r2, r3
 800257e:	2364      	movs	r3, #100	@ 0x64
 8002580:	9302      	str	r3, [sp, #8]
 8002582:	2301      	movs	r3, #1
 8002584:	9301      	str	r3, [sp, #4]
 8002586:	4b05      	ldr	r3, [pc, #20]	@ (800259c <adxl_read_address+0x2c>)
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	2301      	movs	r3, #1
 800258c:	21a6      	movs	r1, #166	@ 0xa6
 800258e:	4804      	ldr	r0, [pc, #16]	@ (80025a0 <adxl_read_address+0x30>)
 8002590:	f7ff f89e 	bl	80016d0 <HAL_I2C_Mem_Read>

}
 8002594:	bf00      	nop
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	2000012a 	.word	0x2000012a
 80025a0:	200000d0 	.word	0x200000d0

080025a4 <adxl_init>:

void adxl_init(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
	//1. Read device ID
	 adxl_read_address(DEVID_R);
 80025a8:	2000      	movs	r0, #0
 80025aa:	f7ff ffe1 	bl	8002570 <adxl_read_address>

	//2. Set data format to +/- 4g
	 adxl_write (DATA_FORMAT_R, FOUR_G);
 80025ae:	2101      	movs	r1, #1
 80025b0:	2031      	movs	r0, #49	@ 0x31
 80025b2:	f7ff ffa7 	bl	8002504 <adxl_write>

	//3.Reset all bits
	 adxl_write (POWER_CTL_R, RESET);
 80025b6:	2100      	movs	r1, #0
 80025b8:	202d      	movs	r0, #45	@ 0x2d
 80025ba:	f7ff ffa3 	bl	8002504 <adxl_write>

	//4.Config PWR control
	adxl_write (POWER_CTL_R, SET_MEASURE_B);
 80025be:	2108      	movs	r1, #8
 80025c0:	202d      	movs	r0, #45	@ 0x2d
 80025c2:	f7ff ff9f 	bl	8002504 <adxl_write>

}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
	...

080025cc <i2c1_init>:


void i2c1_init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af00      	add	r7, sp, #0
   /* PB8     ------> I2C1_SCL
      PB9      ------> I2C1_SDA */

	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_GPIOB_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	60bb      	str	r3, [r7, #8]
 80025d6:	4b25      	ldr	r3, [pc, #148]	@ (800266c <i2c1_init+0xa0>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025da:	4a24      	ldr	r2, [pc, #144]	@ (800266c <i2c1_init+0xa0>)
 80025dc:	f043 0302 	orr.w	r3, r3, #2
 80025e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025e2:	4b22      	ldr	r3, [pc, #136]	@ (800266c <i2c1_init+0xa0>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	60bb      	str	r3, [r7, #8]
 80025ec:	68bb      	ldr	r3, [r7, #8]

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025ee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80025f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025f4:	2312      	movs	r3, #18
 80025f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025f8:	2301      	movs	r3, #1
 80025fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025fc:	2303      	movs	r3, #3
 80025fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002600:	2304      	movs	r3, #4
 8002602:	61fb      	str	r3, [r7, #28]

    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002604:	f107 030c 	add.w	r3, r7, #12
 8002608:	4619      	mov	r1, r3
 800260a:	4819      	ldr	r0, [pc, #100]	@ (8002670 <i2c1_init+0xa4>)
 800260c:	f7fe fc5c 	bl	8000ec8 <HAL_GPIO_Init>

    //Configure I2C

    __HAL_RCC_I2C1_CLK_ENABLE();
 8002610:	2300      	movs	r3, #0
 8002612:	607b      	str	r3, [r7, #4]
 8002614:	4b15      	ldr	r3, [pc, #84]	@ (800266c <i2c1_init+0xa0>)
 8002616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002618:	4a14      	ldr	r2, [pc, #80]	@ (800266c <i2c1_init+0xa0>)
 800261a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800261e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002620:	4b12      	ldr	r3, [pc, #72]	@ (800266c <i2c1_init+0xa0>)
 8002622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002624:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002628:	607b      	str	r3, [r7, #4]
 800262a:	687b      	ldr	r3, [r7, #4]

    hi2c1.Instance = I2C1;
 800262c:	4b11      	ldr	r3, [pc, #68]	@ (8002674 <i2c1_init+0xa8>)
 800262e:	4a12      	ldr	r2, [pc, #72]	@ (8002678 <i2c1_init+0xac>)
 8002630:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 400000;
 8002632:	4b10      	ldr	r3, [pc, #64]	@ (8002674 <i2c1_init+0xa8>)
 8002634:	4a11      	ldr	r2, [pc, #68]	@ (800267c <i2c1_init+0xb0>)
 8002636:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002638:	4b0e      	ldr	r3, [pc, #56]	@ (8002674 <i2c1_init+0xa8>)
 800263a:	2200      	movs	r2, #0
 800263c:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 800263e:	4b0d      	ldr	r3, [pc, #52]	@ (8002674 <i2c1_init+0xa8>)
 8002640:	2200      	movs	r2, #0
 8002642:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002644:	4b0b      	ldr	r3, [pc, #44]	@ (8002674 <i2c1_init+0xa8>)
 8002646:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800264a:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800264c:	4b09      	ldr	r3, [pc, #36]	@ (8002674 <i2c1_init+0xa8>)
 800264e:	2200      	movs	r2, #0
 8002650:	615a      	str	r2, [r3, #20]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002652:	4b08      	ldr	r3, [pc, #32]	@ (8002674 <i2c1_init+0xa8>)
 8002654:	2200      	movs	r2, #0
 8002656:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002658:	4b06      	ldr	r3, [pc, #24]	@ (8002674 <i2c1_init+0xa8>)
 800265a:	2200      	movs	r2, #0
 800265c:	621a      	str	r2, [r3, #32]

    HAL_I2C_Init(&hi2c1);
 800265e:	4805      	ldr	r0, [pc, #20]	@ (8002674 <i2c1_init+0xa8>)
 8002660:	f7fe fdea 	bl	8001238 <HAL_I2C_Init>

}
 8002664:	bf00      	nop
 8002666:	3720      	adds	r7, #32
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40023800 	.word	0x40023800
 8002670:	40020400 	.word	0x40020400
 8002674:	200000d0 	.word	0x200000d0
 8002678:	40005400 	.word	0x40005400
 800267c:	00061a80 	.word	0x00061a80

08002680 <SysTick_Handler>:


void  SysTick_Handler(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8002684:	f7fe f98c 	bl	80009a0 <HAL_IncTick>
}
 8002688:	bf00      	nop
 800268a:	bd80      	pop	{r7, pc}

0800268c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]
 800269c:	e00a      	b.n	80026b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800269e:	f3af 8000 	nop.w
 80026a2:	4601      	mov	r1, r0
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	1c5a      	adds	r2, r3, #1
 80026a8:	60ba      	str	r2, [r7, #8]
 80026aa:	b2ca      	uxtb	r2, r1
 80026ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	3301      	adds	r3, #1
 80026b2:	617b      	str	r3, [r7, #20]
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	dbf0      	blt.n	800269e <_read+0x12>
  }

  return len;
 80026bc:	687b      	ldr	r3, [r7, #4]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b086      	sub	sp, #24
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	60f8      	str	r0, [r7, #12]
 80026ce:	60b9      	str	r1, [r7, #8]
 80026d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
 80026d6:	e009      	b.n	80026ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	1c5a      	adds	r2, r3, #1
 80026dc:	60ba      	str	r2, [r7, #8]
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f000 f877 	bl	80027d4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	3301      	adds	r3, #1
 80026ea:	617b      	str	r3, [r7, #20]
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	dbf1      	blt.n	80026d8 <_write+0x12>
  }
  return len;
 80026f4:	687b      	ldr	r3, [r7, #4]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <_close>:

int _close(int file)
{
 80026fe:	b480      	push	{r7}
 8002700:	b083      	sub	sp, #12
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002706:	f04f 33ff 	mov.w	r3, #4294967295
}
 800270a:	4618      	mov	r0, r3
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
 800271e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002726:	605a      	str	r2, [r3, #4]
  return 0;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <_isatty>:

int _isatty(int file)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800273e:	2301      	movs	r3, #1
}
 8002740:	4618      	mov	r0, r3
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3714      	adds	r7, #20
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
	...

08002768 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002770:	4a14      	ldr	r2, [pc, #80]	@ (80027c4 <_sbrk+0x5c>)
 8002772:	4b15      	ldr	r3, [pc, #84]	@ (80027c8 <_sbrk+0x60>)
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800277c:	4b13      	ldr	r3, [pc, #76]	@ (80027cc <_sbrk+0x64>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d102      	bne.n	800278a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002784:	4b11      	ldr	r3, [pc, #68]	@ (80027cc <_sbrk+0x64>)
 8002786:	4a12      	ldr	r2, [pc, #72]	@ (80027d0 <_sbrk+0x68>)
 8002788:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800278a:	4b10      	ldr	r3, [pc, #64]	@ (80027cc <_sbrk+0x64>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4413      	add	r3, r2
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	429a      	cmp	r2, r3
 8002796:	d207      	bcs.n	80027a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002798:	f000 f9be 	bl	8002b18 <__errno>
 800279c:	4603      	mov	r3, r0
 800279e:	220c      	movs	r2, #12
 80027a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027a2:	f04f 33ff 	mov.w	r3, #4294967295
 80027a6:	e009      	b.n	80027bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027a8:	4b08      	ldr	r3, [pc, #32]	@ (80027cc <_sbrk+0x64>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027ae:	4b07      	ldr	r3, [pc, #28]	@ (80027cc <_sbrk+0x64>)
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4413      	add	r3, r2
 80027b6:	4a05      	ldr	r2, [pc, #20]	@ (80027cc <_sbrk+0x64>)
 80027b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027ba:	68fb      	ldr	r3, [r7, #12]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	20020000 	.word	0x20020000
 80027c8:	00000400 	.word	0x00000400
 80027cc:	20000140 	.word	0x20000140
 80027d0:	200002d0 	.word	0x200002d0

080027d4 <__io_putchar>:
#include "uart.h"
UART_HandleTypeDef huart2;


int __io_putchar(int ch)
	  {
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
	  	HAL_UART_Transmit(&huart2,(uint8_t*)&ch,1,10);
 80027dc:	1d39      	adds	r1, r7, #4
 80027de:	230a      	movs	r3, #10
 80027e0:	2201      	movs	r2, #1
 80027e2:	4804      	ldr	r0, [pc, #16]	@ (80027f4 <__io_putchar+0x20>)
 80027e4:	f7ff fd00 	bl	80021e8 <HAL_UART_Transmit>
	  	return ch;
 80027e8:	687b      	ldr	r3, [r7, #4]
	  }
 80027ea:	4618      	mov	r0, r3
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	20000144 	.word	0x20000144

080027f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027f8:	480d      	ldr	r0, [pc, #52]	@ (8002830 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80027fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002800:	480c      	ldr	r0, [pc, #48]	@ (8002834 <LoopForever+0x6>)
  ldr r1, =_edata
 8002802:	490d      	ldr	r1, [pc, #52]	@ (8002838 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002804:	4a0d      	ldr	r2, [pc, #52]	@ (800283c <LoopForever+0xe>)
  movs r3, #0
 8002806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002808:	e002      	b.n	8002810 <LoopCopyDataInit>

0800280a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800280a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800280c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800280e:	3304      	adds	r3, #4

08002810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002814:	d3f9      	bcc.n	800280a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002816:	4a0a      	ldr	r2, [pc, #40]	@ (8002840 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002818:	4c0a      	ldr	r4, [pc, #40]	@ (8002844 <LoopForever+0x16>)
  movs r3, #0
 800281a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800281c:	e001      	b.n	8002822 <LoopFillZerobss>

0800281e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800281e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002820:	3204      	adds	r2, #4

08002822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002824:	d3fb      	bcc.n	800281e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002826:	f000 f97d 	bl	8002b24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800282a:	f7ff fde9 	bl	8002400 <main>

0800282e <LoopForever>:

LoopForever:
  b LoopForever
 800282e:	e7fe      	b.n	800282e <LoopForever>
  ldr   r0, =_estack
 8002830:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002838:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800283c:	08003724 	.word	0x08003724
  ldr r2, =_sbss
 8002840:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002844:	200002d0 	.word	0x200002d0

08002848 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002848:	e7fe      	b.n	8002848 <BusFault_Handler>
	...

0800284c <std>:
 800284c:	2300      	movs	r3, #0
 800284e:	b510      	push	{r4, lr}
 8002850:	4604      	mov	r4, r0
 8002852:	e9c0 3300 	strd	r3, r3, [r0]
 8002856:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800285a:	6083      	str	r3, [r0, #8]
 800285c:	8181      	strh	r1, [r0, #12]
 800285e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002860:	81c2      	strh	r2, [r0, #14]
 8002862:	6183      	str	r3, [r0, #24]
 8002864:	4619      	mov	r1, r3
 8002866:	2208      	movs	r2, #8
 8002868:	305c      	adds	r0, #92	@ 0x5c
 800286a:	f000 f906 	bl	8002a7a <memset>
 800286e:	4b0d      	ldr	r3, [pc, #52]	@ (80028a4 <std+0x58>)
 8002870:	6263      	str	r3, [r4, #36]	@ 0x24
 8002872:	4b0d      	ldr	r3, [pc, #52]	@ (80028a8 <std+0x5c>)
 8002874:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002876:	4b0d      	ldr	r3, [pc, #52]	@ (80028ac <std+0x60>)
 8002878:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800287a:	4b0d      	ldr	r3, [pc, #52]	@ (80028b0 <std+0x64>)
 800287c:	6323      	str	r3, [r4, #48]	@ 0x30
 800287e:	4b0d      	ldr	r3, [pc, #52]	@ (80028b4 <std+0x68>)
 8002880:	6224      	str	r4, [r4, #32]
 8002882:	429c      	cmp	r4, r3
 8002884:	d006      	beq.n	8002894 <std+0x48>
 8002886:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800288a:	4294      	cmp	r4, r2
 800288c:	d002      	beq.n	8002894 <std+0x48>
 800288e:	33d0      	adds	r3, #208	@ 0xd0
 8002890:	429c      	cmp	r4, r3
 8002892:	d105      	bne.n	80028a0 <std+0x54>
 8002894:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800289c:	f000 b966 	b.w	8002b6c <__retarget_lock_init_recursive>
 80028a0:	bd10      	pop	{r4, pc}
 80028a2:	bf00      	nop
 80028a4:	080029f5 	.word	0x080029f5
 80028a8:	08002a17 	.word	0x08002a17
 80028ac:	08002a4f 	.word	0x08002a4f
 80028b0:	08002a73 	.word	0x08002a73
 80028b4:	20000184 	.word	0x20000184

080028b8 <stdio_exit_handler>:
 80028b8:	4a02      	ldr	r2, [pc, #8]	@ (80028c4 <stdio_exit_handler+0xc>)
 80028ba:	4903      	ldr	r1, [pc, #12]	@ (80028c8 <stdio_exit_handler+0x10>)
 80028bc:	4803      	ldr	r0, [pc, #12]	@ (80028cc <stdio_exit_handler+0x14>)
 80028be:	f000 b869 	b.w	8002994 <_fwalk_sglue>
 80028c2:	bf00      	nop
 80028c4:	2000000c 	.word	0x2000000c
 80028c8:	0800340d 	.word	0x0800340d
 80028cc:	2000001c 	.word	0x2000001c

080028d0 <cleanup_stdio>:
 80028d0:	6841      	ldr	r1, [r0, #4]
 80028d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002904 <cleanup_stdio+0x34>)
 80028d4:	4299      	cmp	r1, r3
 80028d6:	b510      	push	{r4, lr}
 80028d8:	4604      	mov	r4, r0
 80028da:	d001      	beq.n	80028e0 <cleanup_stdio+0x10>
 80028dc:	f000 fd96 	bl	800340c <_fflush_r>
 80028e0:	68a1      	ldr	r1, [r4, #8]
 80028e2:	4b09      	ldr	r3, [pc, #36]	@ (8002908 <cleanup_stdio+0x38>)
 80028e4:	4299      	cmp	r1, r3
 80028e6:	d002      	beq.n	80028ee <cleanup_stdio+0x1e>
 80028e8:	4620      	mov	r0, r4
 80028ea:	f000 fd8f 	bl	800340c <_fflush_r>
 80028ee:	68e1      	ldr	r1, [r4, #12]
 80028f0:	4b06      	ldr	r3, [pc, #24]	@ (800290c <cleanup_stdio+0x3c>)
 80028f2:	4299      	cmp	r1, r3
 80028f4:	d004      	beq.n	8002900 <cleanup_stdio+0x30>
 80028f6:	4620      	mov	r0, r4
 80028f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028fc:	f000 bd86 	b.w	800340c <_fflush_r>
 8002900:	bd10      	pop	{r4, pc}
 8002902:	bf00      	nop
 8002904:	20000184 	.word	0x20000184
 8002908:	200001ec 	.word	0x200001ec
 800290c:	20000254 	.word	0x20000254

08002910 <global_stdio_init.part.0>:
 8002910:	b510      	push	{r4, lr}
 8002912:	4b0b      	ldr	r3, [pc, #44]	@ (8002940 <global_stdio_init.part.0+0x30>)
 8002914:	4c0b      	ldr	r4, [pc, #44]	@ (8002944 <global_stdio_init.part.0+0x34>)
 8002916:	4a0c      	ldr	r2, [pc, #48]	@ (8002948 <global_stdio_init.part.0+0x38>)
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	4620      	mov	r0, r4
 800291c:	2200      	movs	r2, #0
 800291e:	2104      	movs	r1, #4
 8002920:	f7ff ff94 	bl	800284c <std>
 8002924:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002928:	2201      	movs	r2, #1
 800292a:	2109      	movs	r1, #9
 800292c:	f7ff ff8e 	bl	800284c <std>
 8002930:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002934:	2202      	movs	r2, #2
 8002936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800293a:	2112      	movs	r1, #18
 800293c:	f7ff bf86 	b.w	800284c <std>
 8002940:	200002bc 	.word	0x200002bc
 8002944:	20000184 	.word	0x20000184
 8002948:	080028b9 	.word	0x080028b9

0800294c <__sfp_lock_acquire>:
 800294c:	4801      	ldr	r0, [pc, #4]	@ (8002954 <__sfp_lock_acquire+0x8>)
 800294e:	f000 b90e 	b.w	8002b6e <__retarget_lock_acquire_recursive>
 8002952:	bf00      	nop
 8002954:	200002c5 	.word	0x200002c5

08002958 <__sfp_lock_release>:
 8002958:	4801      	ldr	r0, [pc, #4]	@ (8002960 <__sfp_lock_release+0x8>)
 800295a:	f000 b909 	b.w	8002b70 <__retarget_lock_release_recursive>
 800295e:	bf00      	nop
 8002960:	200002c5 	.word	0x200002c5

08002964 <__sinit>:
 8002964:	b510      	push	{r4, lr}
 8002966:	4604      	mov	r4, r0
 8002968:	f7ff fff0 	bl	800294c <__sfp_lock_acquire>
 800296c:	6a23      	ldr	r3, [r4, #32]
 800296e:	b11b      	cbz	r3, 8002978 <__sinit+0x14>
 8002970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002974:	f7ff bff0 	b.w	8002958 <__sfp_lock_release>
 8002978:	4b04      	ldr	r3, [pc, #16]	@ (800298c <__sinit+0x28>)
 800297a:	6223      	str	r3, [r4, #32]
 800297c:	4b04      	ldr	r3, [pc, #16]	@ (8002990 <__sinit+0x2c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1f5      	bne.n	8002970 <__sinit+0xc>
 8002984:	f7ff ffc4 	bl	8002910 <global_stdio_init.part.0>
 8002988:	e7f2      	b.n	8002970 <__sinit+0xc>
 800298a:	bf00      	nop
 800298c:	080028d1 	.word	0x080028d1
 8002990:	200002bc 	.word	0x200002bc

08002994 <_fwalk_sglue>:
 8002994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002998:	4607      	mov	r7, r0
 800299a:	4688      	mov	r8, r1
 800299c:	4614      	mov	r4, r2
 800299e:	2600      	movs	r6, #0
 80029a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80029a4:	f1b9 0901 	subs.w	r9, r9, #1
 80029a8:	d505      	bpl.n	80029b6 <_fwalk_sglue+0x22>
 80029aa:	6824      	ldr	r4, [r4, #0]
 80029ac:	2c00      	cmp	r4, #0
 80029ae:	d1f7      	bne.n	80029a0 <_fwalk_sglue+0xc>
 80029b0:	4630      	mov	r0, r6
 80029b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80029b6:	89ab      	ldrh	r3, [r5, #12]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d907      	bls.n	80029cc <_fwalk_sglue+0x38>
 80029bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80029c0:	3301      	adds	r3, #1
 80029c2:	d003      	beq.n	80029cc <_fwalk_sglue+0x38>
 80029c4:	4629      	mov	r1, r5
 80029c6:	4638      	mov	r0, r7
 80029c8:	47c0      	blx	r8
 80029ca:	4306      	orrs	r6, r0
 80029cc:	3568      	adds	r5, #104	@ 0x68
 80029ce:	e7e9      	b.n	80029a4 <_fwalk_sglue+0x10>

080029d0 <iprintf>:
 80029d0:	b40f      	push	{r0, r1, r2, r3}
 80029d2:	b507      	push	{r0, r1, r2, lr}
 80029d4:	4906      	ldr	r1, [pc, #24]	@ (80029f0 <iprintf+0x20>)
 80029d6:	ab04      	add	r3, sp, #16
 80029d8:	6808      	ldr	r0, [r1, #0]
 80029da:	f853 2b04 	ldr.w	r2, [r3], #4
 80029de:	6881      	ldr	r1, [r0, #8]
 80029e0:	9301      	str	r3, [sp, #4]
 80029e2:	f000 f9e9 	bl	8002db8 <_vfiprintf_r>
 80029e6:	b003      	add	sp, #12
 80029e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80029ec:	b004      	add	sp, #16
 80029ee:	4770      	bx	lr
 80029f0:	20000018 	.word	0x20000018

080029f4 <__sread>:
 80029f4:	b510      	push	{r4, lr}
 80029f6:	460c      	mov	r4, r1
 80029f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029fc:	f000 f868 	bl	8002ad0 <_read_r>
 8002a00:	2800      	cmp	r0, #0
 8002a02:	bfab      	itete	ge
 8002a04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002a06:	89a3      	ldrhlt	r3, [r4, #12]
 8002a08:	181b      	addge	r3, r3, r0
 8002a0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002a0e:	bfac      	ite	ge
 8002a10:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002a12:	81a3      	strhlt	r3, [r4, #12]
 8002a14:	bd10      	pop	{r4, pc}

08002a16 <__swrite>:
 8002a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a1a:	461f      	mov	r7, r3
 8002a1c:	898b      	ldrh	r3, [r1, #12]
 8002a1e:	05db      	lsls	r3, r3, #23
 8002a20:	4605      	mov	r5, r0
 8002a22:	460c      	mov	r4, r1
 8002a24:	4616      	mov	r6, r2
 8002a26:	d505      	bpl.n	8002a34 <__swrite+0x1e>
 8002a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f000 f83c 	bl	8002aac <_lseek_r>
 8002a34:	89a3      	ldrh	r3, [r4, #12]
 8002a36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a3e:	81a3      	strh	r3, [r4, #12]
 8002a40:	4632      	mov	r2, r6
 8002a42:	463b      	mov	r3, r7
 8002a44:	4628      	mov	r0, r5
 8002a46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002a4a:	f000 b853 	b.w	8002af4 <_write_r>

08002a4e <__sseek>:
 8002a4e:	b510      	push	{r4, lr}
 8002a50:	460c      	mov	r4, r1
 8002a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a56:	f000 f829 	bl	8002aac <_lseek_r>
 8002a5a:	1c43      	adds	r3, r0, #1
 8002a5c:	89a3      	ldrh	r3, [r4, #12]
 8002a5e:	bf15      	itete	ne
 8002a60:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002a62:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002a66:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002a6a:	81a3      	strheq	r3, [r4, #12]
 8002a6c:	bf18      	it	ne
 8002a6e:	81a3      	strhne	r3, [r4, #12]
 8002a70:	bd10      	pop	{r4, pc}

08002a72 <__sclose>:
 8002a72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a76:	f000 b809 	b.w	8002a8c <_close_r>

08002a7a <memset>:
 8002a7a:	4402      	add	r2, r0
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d100      	bne.n	8002a84 <memset+0xa>
 8002a82:	4770      	bx	lr
 8002a84:	f803 1b01 	strb.w	r1, [r3], #1
 8002a88:	e7f9      	b.n	8002a7e <memset+0x4>
	...

08002a8c <_close_r>:
 8002a8c:	b538      	push	{r3, r4, r5, lr}
 8002a8e:	4d06      	ldr	r5, [pc, #24]	@ (8002aa8 <_close_r+0x1c>)
 8002a90:	2300      	movs	r3, #0
 8002a92:	4604      	mov	r4, r0
 8002a94:	4608      	mov	r0, r1
 8002a96:	602b      	str	r3, [r5, #0]
 8002a98:	f7ff fe31 	bl	80026fe <_close>
 8002a9c:	1c43      	adds	r3, r0, #1
 8002a9e:	d102      	bne.n	8002aa6 <_close_r+0x1a>
 8002aa0:	682b      	ldr	r3, [r5, #0]
 8002aa2:	b103      	cbz	r3, 8002aa6 <_close_r+0x1a>
 8002aa4:	6023      	str	r3, [r4, #0]
 8002aa6:	bd38      	pop	{r3, r4, r5, pc}
 8002aa8:	200002c0 	.word	0x200002c0

08002aac <_lseek_r>:
 8002aac:	b538      	push	{r3, r4, r5, lr}
 8002aae:	4d07      	ldr	r5, [pc, #28]	@ (8002acc <_lseek_r+0x20>)
 8002ab0:	4604      	mov	r4, r0
 8002ab2:	4608      	mov	r0, r1
 8002ab4:	4611      	mov	r1, r2
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	602a      	str	r2, [r5, #0]
 8002aba:	461a      	mov	r2, r3
 8002abc:	f7ff fe46 	bl	800274c <_lseek>
 8002ac0:	1c43      	adds	r3, r0, #1
 8002ac2:	d102      	bne.n	8002aca <_lseek_r+0x1e>
 8002ac4:	682b      	ldr	r3, [r5, #0]
 8002ac6:	b103      	cbz	r3, 8002aca <_lseek_r+0x1e>
 8002ac8:	6023      	str	r3, [r4, #0]
 8002aca:	bd38      	pop	{r3, r4, r5, pc}
 8002acc:	200002c0 	.word	0x200002c0

08002ad0 <_read_r>:
 8002ad0:	b538      	push	{r3, r4, r5, lr}
 8002ad2:	4d07      	ldr	r5, [pc, #28]	@ (8002af0 <_read_r+0x20>)
 8002ad4:	4604      	mov	r4, r0
 8002ad6:	4608      	mov	r0, r1
 8002ad8:	4611      	mov	r1, r2
 8002ada:	2200      	movs	r2, #0
 8002adc:	602a      	str	r2, [r5, #0]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	f7ff fdd4 	bl	800268c <_read>
 8002ae4:	1c43      	adds	r3, r0, #1
 8002ae6:	d102      	bne.n	8002aee <_read_r+0x1e>
 8002ae8:	682b      	ldr	r3, [r5, #0]
 8002aea:	b103      	cbz	r3, 8002aee <_read_r+0x1e>
 8002aec:	6023      	str	r3, [r4, #0]
 8002aee:	bd38      	pop	{r3, r4, r5, pc}
 8002af0:	200002c0 	.word	0x200002c0

08002af4 <_write_r>:
 8002af4:	b538      	push	{r3, r4, r5, lr}
 8002af6:	4d07      	ldr	r5, [pc, #28]	@ (8002b14 <_write_r+0x20>)
 8002af8:	4604      	mov	r4, r0
 8002afa:	4608      	mov	r0, r1
 8002afc:	4611      	mov	r1, r2
 8002afe:	2200      	movs	r2, #0
 8002b00:	602a      	str	r2, [r5, #0]
 8002b02:	461a      	mov	r2, r3
 8002b04:	f7ff fddf 	bl	80026c6 <_write>
 8002b08:	1c43      	adds	r3, r0, #1
 8002b0a:	d102      	bne.n	8002b12 <_write_r+0x1e>
 8002b0c:	682b      	ldr	r3, [r5, #0]
 8002b0e:	b103      	cbz	r3, 8002b12 <_write_r+0x1e>
 8002b10:	6023      	str	r3, [r4, #0]
 8002b12:	bd38      	pop	{r3, r4, r5, pc}
 8002b14:	200002c0 	.word	0x200002c0

08002b18 <__errno>:
 8002b18:	4b01      	ldr	r3, [pc, #4]	@ (8002b20 <__errno+0x8>)
 8002b1a:	6818      	ldr	r0, [r3, #0]
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	20000018 	.word	0x20000018

08002b24 <__libc_init_array>:
 8002b24:	b570      	push	{r4, r5, r6, lr}
 8002b26:	4d0d      	ldr	r5, [pc, #52]	@ (8002b5c <__libc_init_array+0x38>)
 8002b28:	4c0d      	ldr	r4, [pc, #52]	@ (8002b60 <__libc_init_array+0x3c>)
 8002b2a:	1b64      	subs	r4, r4, r5
 8002b2c:	10a4      	asrs	r4, r4, #2
 8002b2e:	2600      	movs	r6, #0
 8002b30:	42a6      	cmp	r6, r4
 8002b32:	d109      	bne.n	8002b48 <__libc_init_array+0x24>
 8002b34:	4d0b      	ldr	r5, [pc, #44]	@ (8002b64 <__libc_init_array+0x40>)
 8002b36:	4c0c      	ldr	r4, [pc, #48]	@ (8002b68 <__libc_init_array+0x44>)
 8002b38:	f000 fdb8 	bl	80036ac <_init>
 8002b3c:	1b64      	subs	r4, r4, r5
 8002b3e:	10a4      	asrs	r4, r4, #2
 8002b40:	2600      	movs	r6, #0
 8002b42:	42a6      	cmp	r6, r4
 8002b44:	d105      	bne.n	8002b52 <__libc_init_array+0x2e>
 8002b46:	bd70      	pop	{r4, r5, r6, pc}
 8002b48:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b4c:	4798      	blx	r3
 8002b4e:	3601      	adds	r6, #1
 8002b50:	e7ee      	b.n	8002b30 <__libc_init_array+0xc>
 8002b52:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b56:	4798      	blx	r3
 8002b58:	3601      	adds	r6, #1
 8002b5a:	e7f2      	b.n	8002b42 <__libc_init_array+0x1e>
 8002b5c:	0800371c 	.word	0x0800371c
 8002b60:	0800371c 	.word	0x0800371c
 8002b64:	0800371c 	.word	0x0800371c
 8002b68:	08003720 	.word	0x08003720

08002b6c <__retarget_lock_init_recursive>:
 8002b6c:	4770      	bx	lr

08002b6e <__retarget_lock_acquire_recursive>:
 8002b6e:	4770      	bx	lr

08002b70 <__retarget_lock_release_recursive>:
 8002b70:	4770      	bx	lr
	...

08002b74 <_free_r>:
 8002b74:	b538      	push	{r3, r4, r5, lr}
 8002b76:	4605      	mov	r5, r0
 8002b78:	2900      	cmp	r1, #0
 8002b7a:	d041      	beq.n	8002c00 <_free_r+0x8c>
 8002b7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b80:	1f0c      	subs	r4, r1, #4
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	bfb8      	it	lt
 8002b86:	18e4      	addlt	r4, r4, r3
 8002b88:	f000 f8e0 	bl	8002d4c <__malloc_lock>
 8002b8c:	4a1d      	ldr	r2, [pc, #116]	@ (8002c04 <_free_r+0x90>)
 8002b8e:	6813      	ldr	r3, [r2, #0]
 8002b90:	b933      	cbnz	r3, 8002ba0 <_free_r+0x2c>
 8002b92:	6063      	str	r3, [r4, #4]
 8002b94:	6014      	str	r4, [r2, #0]
 8002b96:	4628      	mov	r0, r5
 8002b98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b9c:	f000 b8dc 	b.w	8002d58 <__malloc_unlock>
 8002ba0:	42a3      	cmp	r3, r4
 8002ba2:	d908      	bls.n	8002bb6 <_free_r+0x42>
 8002ba4:	6820      	ldr	r0, [r4, #0]
 8002ba6:	1821      	adds	r1, r4, r0
 8002ba8:	428b      	cmp	r3, r1
 8002baa:	bf01      	itttt	eq
 8002bac:	6819      	ldreq	r1, [r3, #0]
 8002bae:	685b      	ldreq	r3, [r3, #4]
 8002bb0:	1809      	addeq	r1, r1, r0
 8002bb2:	6021      	streq	r1, [r4, #0]
 8002bb4:	e7ed      	b.n	8002b92 <_free_r+0x1e>
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	b10b      	cbz	r3, 8002bc0 <_free_r+0x4c>
 8002bbc:	42a3      	cmp	r3, r4
 8002bbe:	d9fa      	bls.n	8002bb6 <_free_r+0x42>
 8002bc0:	6811      	ldr	r1, [r2, #0]
 8002bc2:	1850      	adds	r0, r2, r1
 8002bc4:	42a0      	cmp	r0, r4
 8002bc6:	d10b      	bne.n	8002be0 <_free_r+0x6c>
 8002bc8:	6820      	ldr	r0, [r4, #0]
 8002bca:	4401      	add	r1, r0
 8002bcc:	1850      	adds	r0, r2, r1
 8002bce:	4283      	cmp	r3, r0
 8002bd0:	6011      	str	r1, [r2, #0]
 8002bd2:	d1e0      	bne.n	8002b96 <_free_r+0x22>
 8002bd4:	6818      	ldr	r0, [r3, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	6053      	str	r3, [r2, #4]
 8002bda:	4408      	add	r0, r1
 8002bdc:	6010      	str	r0, [r2, #0]
 8002bde:	e7da      	b.n	8002b96 <_free_r+0x22>
 8002be0:	d902      	bls.n	8002be8 <_free_r+0x74>
 8002be2:	230c      	movs	r3, #12
 8002be4:	602b      	str	r3, [r5, #0]
 8002be6:	e7d6      	b.n	8002b96 <_free_r+0x22>
 8002be8:	6820      	ldr	r0, [r4, #0]
 8002bea:	1821      	adds	r1, r4, r0
 8002bec:	428b      	cmp	r3, r1
 8002bee:	bf04      	itt	eq
 8002bf0:	6819      	ldreq	r1, [r3, #0]
 8002bf2:	685b      	ldreq	r3, [r3, #4]
 8002bf4:	6063      	str	r3, [r4, #4]
 8002bf6:	bf04      	itt	eq
 8002bf8:	1809      	addeq	r1, r1, r0
 8002bfa:	6021      	streq	r1, [r4, #0]
 8002bfc:	6054      	str	r4, [r2, #4]
 8002bfe:	e7ca      	b.n	8002b96 <_free_r+0x22>
 8002c00:	bd38      	pop	{r3, r4, r5, pc}
 8002c02:	bf00      	nop
 8002c04:	200002cc 	.word	0x200002cc

08002c08 <sbrk_aligned>:
 8002c08:	b570      	push	{r4, r5, r6, lr}
 8002c0a:	4e0f      	ldr	r6, [pc, #60]	@ (8002c48 <sbrk_aligned+0x40>)
 8002c0c:	460c      	mov	r4, r1
 8002c0e:	6831      	ldr	r1, [r6, #0]
 8002c10:	4605      	mov	r5, r0
 8002c12:	b911      	cbnz	r1, 8002c1a <sbrk_aligned+0x12>
 8002c14:	f000 fcb6 	bl	8003584 <_sbrk_r>
 8002c18:	6030      	str	r0, [r6, #0]
 8002c1a:	4621      	mov	r1, r4
 8002c1c:	4628      	mov	r0, r5
 8002c1e:	f000 fcb1 	bl	8003584 <_sbrk_r>
 8002c22:	1c43      	adds	r3, r0, #1
 8002c24:	d103      	bne.n	8002c2e <sbrk_aligned+0x26>
 8002c26:	f04f 34ff 	mov.w	r4, #4294967295
 8002c2a:	4620      	mov	r0, r4
 8002c2c:	bd70      	pop	{r4, r5, r6, pc}
 8002c2e:	1cc4      	adds	r4, r0, #3
 8002c30:	f024 0403 	bic.w	r4, r4, #3
 8002c34:	42a0      	cmp	r0, r4
 8002c36:	d0f8      	beq.n	8002c2a <sbrk_aligned+0x22>
 8002c38:	1a21      	subs	r1, r4, r0
 8002c3a:	4628      	mov	r0, r5
 8002c3c:	f000 fca2 	bl	8003584 <_sbrk_r>
 8002c40:	3001      	adds	r0, #1
 8002c42:	d1f2      	bne.n	8002c2a <sbrk_aligned+0x22>
 8002c44:	e7ef      	b.n	8002c26 <sbrk_aligned+0x1e>
 8002c46:	bf00      	nop
 8002c48:	200002c8 	.word	0x200002c8

08002c4c <_malloc_r>:
 8002c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c50:	1ccd      	adds	r5, r1, #3
 8002c52:	f025 0503 	bic.w	r5, r5, #3
 8002c56:	3508      	adds	r5, #8
 8002c58:	2d0c      	cmp	r5, #12
 8002c5a:	bf38      	it	cc
 8002c5c:	250c      	movcc	r5, #12
 8002c5e:	2d00      	cmp	r5, #0
 8002c60:	4606      	mov	r6, r0
 8002c62:	db01      	blt.n	8002c68 <_malloc_r+0x1c>
 8002c64:	42a9      	cmp	r1, r5
 8002c66:	d904      	bls.n	8002c72 <_malloc_r+0x26>
 8002c68:	230c      	movs	r3, #12
 8002c6a:	6033      	str	r3, [r6, #0]
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002d48 <_malloc_r+0xfc>
 8002c76:	f000 f869 	bl	8002d4c <__malloc_lock>
 8002c7a:	f8d8 3000 	ldr.w	r3, [r8]
 8002c7e:	461c      	mov	r4, r3
 8002c80:	bb44      	cbnz	r4, 8002cd4 <_malloc_r+0x88>
 8002c82:	4629      	mov	r1, r5
 8002c84:	4630      	mov	r0, r6
 8002c86:	f7ff ffbf 	bl	8002c08 <sbrk_aligned>
 8002c8a:	1c43      	adds	r3, r0, #1
 8002c8c:	4604      	mov	r4, r0
 8002c8e:	d158      	bne.n	8002d42 <_malloc_r+0xf6>
 8002c90:	f8d8 4000 	ldr.w	r4, [r8]
 8002c94:	4627      	mov	r7, r4
 8002c96:	2f00      	cmp	r7, #0
 8002c98:	d143      	bne.n	8002d22 <_malloc_r+0xd6>
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d04b      	beq.n	8002d36 <_malloc_r+0xea>
 8002c9e:	6823      	ldr	r3, [r4, #0]
 8002ca0:	4639      	mov	r1, r7
 8002ca2:	4630      	mov	r0, r6
 8002ca4:	eb04 0903 	add.w	r9, r4, r3
 8002ca8:	f000 fc6c 	bl	8003584 <_sbrk_r>
 8002cac:	4581      	cmp	r9, r0
 8002cae:	d142      	bne.n	8002d36 <_malloc_r+0xea>
 8002cb0:	6821      	ldr	r1, [r4, #0]
 8002cb2:	1a6d      	subs	r5, r5, r1
 8002cb4:	4629      	mov	r1, r5
 8002cb6:	4630      	mov	r0, r6
 8002cb8:	f7ff ffa6 	bl	8002c08 <sbrk_aligned>
 8002cbc:	3001      	adds	r0, #1
 8002cbe:	d03a      	beq.n	8002d36 <_malloc_r+0xea>
 8002cc0:	6823      	ldr	r3, [r4, #0]
 8002cc2:	442b      	add	r3, r5
 8002cc4:	6023      	str	r3, [r4, #0]
 8002cc6:	f8d8 3000 	ldr.w	r3, [r8]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	bb62      	cbnz	r2, 8002d28 <_malloc_r+0xdc>
 8002cce:	f8c8 7000 	str.w	r7, [r8]
 8002cd2:	e00f      	b.n	8002cf4 <_malloc_r+0xa8>
 8002cd4:	6822      	ldr	r2, [r4, #0]
 8002cd6:	1b52      	subs	r2, r2, r5
 8002cd8:	d420      	bmi.n	8002d1c <_malloc_r+0xd0>
 8002cda:	2a0b      	cmp	r2, #11
 8002cdc:	d917      	bls.n	8002d0e <_malloc_r+0xc2>
 8002cde:	1961      	adds	r1, r4, r5
 8002ce0:	42a3      	cmp	r3, r4
 8002ce2:	6025      	str	r5, [r4, #0]
 8002ce4:	bf18      	it	ne
 8002ce6:	6059      	strne	r1, [r3, #4]
 8002ce8:	6863      	ldr	r3, [r4, #4]
 8002cea:	bf08      	it	eq
 8002cec:	f8c8 1000 	streq.w	r1, [r8]
 8002cf0:	5162      	str	r2, [r4, r5]
 8002cf2:	604b      	str	r3, [r1, #4]
 8002cf4:	4630      	mov	r0, r6
 8002cf6:	f000 f82f 	bl	8002d58 <__malloc_unlock>
 8002cfa:	f104 000b 	add.w	r0, r4, #11
 8002cfe:	1d23      	adds	r3, r4, #4
 8002d00:	f020 0007 	bic.w	r0, r0, #7
 8002d04:	1ac2      	subs	r2, r0, r3
 8002d06:	bf1c      	itt	ne
 8002d08:	1a1b      	subne	r3, r3, r0
 8002d0a:	50a3      	strne	r3, [r4, r2]
 8002d0c:	e7af      	b.n	8002c6e <_malloc_r+0x22>
 8002d0e:	6862      	ldr	r2, [r4, #4]
 8002d10:	42a3      	cmp	r3, r4
 8002d12:	bf0c      	ite	eq
 8002d14:	f8c8 2000 	streq.w	r2, [r8]
 8002d18:	605a      	strne	r2, [r3, #4]
 8002d1a:	e7eb      	b.n	8002cf4 <_malloc_r+0xa8>
 8002d1c:	4623      	mov	r3, r4
 8002d1e:	6864      	ldr	r4, [r4, #4]
 8002d20:	e7ae      	b.n	8002c80 <_malloc_r+0x34>
 8002d22:	463c      	mov	r4, r7
 8002d24:	687f      	ldr	r7, [r7, #4]
 8002d26:	e7b6      	b.n	8002c96 <_malloc_r+0x4a>
 8002d28:	461a      	mov	r2, r3
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	42a3      	cmp	r3, r4
 8002d2e:	d1fb      	bne.n	8002d28 <_malloc_r+0xdc>
 8002d30:	2300      	movs	r3, #0
 8002d32:	6053      	str	r3, [r2, #4]
 8002d34:	e7de      	b.n	8002cf4 <_malloc_r+0xa8>
 8002d36:	230c      	movs	r3, #12
 8002d38:	6033      	str	r3, [r6, #0]
 8002d3a:	4630      	mov	r0, r6
 8002d3c:	f000 f80c 	bl	8002d58 <__malloc_unlock>
 8002d40:	e794      	b.n	8002c6c <_malloc_r+0x20>
 8002d42:	6005      	str	r5, [r0, #0]
 8002d44:	e7d6      	b.n	8002cf4 <_malloc_r+0xa8>
 8002d46:	bf00      	nop
 8002d48:	200002cc 	.word	0x200002cc

08002d4c <__malloc_lock>:
 8002d4c:	4801      	ldr	r0, [pc, #4]	@ (8002d54 <__malloc_lock+0x8>)
 8002d4e:	f7ff bf0e 	b.w	8002b6e <__retarget_lock_acquire_recursive>
 8002d52:	bf00      	nop
 8002d54:	200002c4 	.word	0x200002c4

08002d58 <__malloc_unlock>:
 8002d58:	4801      	ldr	r0, [pc, #4]	@ (8002d60 <__malloc_unlock+0x8>)
 8002d5a:	f7ff bf09 	b.w	8002b70 <__retarget_lock_release_recursive>
 8002d5e:	bf00      	nop
 8002d60:	200002c4 	.word	0x200002c4

08002d64 <__sfputc_r>:
 8002d64:	6893      	ldr	r3, [r2, #8]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	b410      	push	{r4}
 8002d6c:	6093      	str	r3, [r2, #8]
 8002d6e:	da08      	bge.n	8002d82 <__sfputc_r+0x1e>
 8002d70:	6994      	ldr	r4, [r2, #24]
 8002d72:	42a3      	cmp	r3, r4
 8002d74:	db01      	blt.n	8002d7a <__sfputc_r+0x16>
 8002d76:	290a      	cmp	r1, #10
 8002d78:	d103      	bne.n	8002d82 <__sfputc_r+0x1e>
 8002d7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d7e:	f000 bb6d 	b.w	800345c <__swbuf_r>
 8002d82:	6813      	ldr	r3, [r2, #0]
 8002d84:	1c58      	adds	r0, r3, #1
 8002d86:	6010      	str	r0, [r2, #0]
 8002d88:	7019      	strb	r1, [r3, #0]
 8002d8a:	4608      	mov	r0, r1
 8002d8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <__sfputs_r>:
 8002d92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d94:	4606      	mov	r6, r0
 8002d96:	460f      	mov	r7, r1
 8002d98:	4614      	mov	r4, r2
 8002d9a:	18d5      	adds	r5, r2, r3
 8002d9c:	42ac      	cmp	r4, r5
 8002d9e:	d101      	bne.n	8002da4 <__sfputs_r+0x12>
 8002da0:	2000      	movs	r0, #0
 8002da2:	e007      	b.n	8002db4 <__sfputs_r+0x22>
 8002da4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002da8:	463a      	mov	r2, r7
 8002daa:	4630      	mov	r0, r6
 8002dac:	f7ff ffda 	bl	8002d64 <__sfputc_r>
 8002db0:	1c43      	adds	r3, r0, #1
 8002db2:	d1f3      	bne.n	8002d9c <__sfputs_r+0xa>
 8002db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002db8 <_vfiprintf_r>:
 8002db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dbc:	460d      	mov	r5, r1
 8002dbe:	b09d      	sub	sp, #116	@ 0x74
 8002dc0:	4614      	mov	r4, r2
 8002dc2:	4698      	mov	r8, r3
 8002dc4:	4606      	mov	r6, r0
 8002dc6:	b118      	cbz	r0, 8002dd0 <_vfiprintf_r+0x18>
 8002dc8:	6a03      	ldr	r3, [r0, #32]
 8002dca:	b90b      	cbnz	r3, 8002dd0 <_vfiprintf_r+0x18>
 8002dcc:	f7ff fdca 	bl	8002964 <__sinit>
 8002dd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002dd2:	07d9      	lsls	r1, r3, #31
 8002dd4:	d405      	bmi.n	8002de2 <_vfiprintf_r+0x2a>
 8002dd6:	89ab      	ldrh	r3, [r5, #12]
 8002dd8:	059a      	lsls	r2, r3, #22
 8002dda:	d402      	bmi.n	8002de2 <_vfiprintf_r+0x2a>
 8002ddc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002dde:	f7ff fec6 	bl	8002b6e <__retarget_lock_acquire_recursive>
 8002de2:	89ab      	ldrh	r3, [r5, #12]
 8002de4:	071b      	lsls	r3, r3, #28
 8002de6:	d501      	bpl.n	8002dec <_vfiprintf_r+0x34>
 8002de8:	692b      	ldr	r3, [r5, #16]
 8002dea:	b99b      	cbnz	r3, 8002e14 <_vfiprintf_r+0x5c>
 8002dec:	4629      	mov	r1, r5
 8002dee:	4630      	mov	r0, r6
 8002df0:	f000 fb72 	bl	80034d8 <__swsetup_r>
 8002df4:	b170      	cbz	r0, 8002e14 <_vfiprintf_r+0x5c>
 8002df6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002df8:	07dc      	lsls	r4, r3, #31
 8002dfa:	d504      	bpl.n	8002e06 <_vfiprintf_r+0x4e>
 8002dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002e00:	b01d      	add	sp, #116	@ 0x74
 8002e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e06:	89ab      	ldrh	r3, [r5, #12]
 8002e08:	0598      	lsls	r0, r3, #22
 8002e0a:	d4f7      	bmi.n	8002dfc <_vfiprintf_r+0x44>
 8002e0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002e0e:	f7ff feaf 	bl	8002b70 <__retarget_lock_release_recursive>
 8002e12:	e7f3      	b.n	8002dfc <_vfiprintf_r+0x44>
 8002e14:	2300      	movs	r3, #0
 8002e16:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e18:	2320      	movs	r3, #32
 8002e1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002e1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e22:	2330      	movs	r3, #48	@ 0x30
 8002e24:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002fd4 <_vfiprintf_r+0x21c>
 8002e28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002e2c:	f04f 0901 	mov.w	r9, #1
 8002e30:	4623      	mov	r3, r4
 8002e32:	469a      	mov	sl, r3
 8002e34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e38:	b10a      	cbz	r2, 8002e3e <_vfiprintf_r+0x86>
 8002e3a:	2a25      	cmp	r2, #37	@ 0x25
 8002e3c:	d1f9      	bne.n	8002e32 <_vfiprintf_r+0x7a>
 8002e3e:	ebba 0b04 	subs.w	fp, sl, r4
 8002e42:	d00b      	beq.n	8002e5c <_vfiprintf_r+0xa4>
 8002e44:	465b      	mov	r3, fp
 8002e46:	4622      	mov	r2, r4
 8002e48:	4629      	mov	r1, r5
 8002e4a:	4630      	mov	r0, r6
 8002e4c:	f7ff ffa1 	bl	8002d92 <__sfputs_r>
 8002e50:	3001      	adds	r0, #1
 8002e52:	f000 80a7 	beq.w	8002fa4 <_vfiprintf_r+0x1ec>
 8002e56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002e58:	445a      	add	r2, fp
 8002e5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8002e5c:	f89a 3000 	ldrb.w	r3, [sl]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 809f 	beq.w	8002fa4 <_vfiprintf_r+0x1ec>
 8002e66:	2300      	movs	r3, #0
 8002e68:	f04f 32ff 	mov.w	r2, #4294967295
 8002e6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e70:	f10a 0a01 	add.w	sl, sl, #1
 8002e74:	9304      	str	r3, [sp, #16]
 8002e76:	9307      	str	r3, [sp, #28]
 8002e78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002e7c:	931a      	str	r3, [sp, #104]	@ 0x68
 8002e7e:	4654      	mov	r4, sl
 8002e80:	2205      	movs	r2, #5
 8002e82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e86:	4853      	ldr	r0, [pc, #332]	@ (8002fd4 <_vfiprintf_r+0x21c>)
 8002e88:	f7fd f9aa 	bl	80001e0 <memchr>
 8002e8c:	9a04      	ldr	r2, [sp, #16]
 8002e8e:	b9d8      	cbnz	r0, 8002ec8 <_vfiprintf_r+0x110>
 8002e90:	06d1      	lsls	r1, r2, #27
 8002e92:	bf44      	itt	mi
 8002e94:	2320      	movmi	r3, #32
 8002e96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002e9a:	0713      	lsls	r3, r2, #28
 8002e9c:	bf44      	itt	mi
 8002e9e:	232b      	movmi	r3, #43	@ 0x2b
 8002ea0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002ea4:	f89a 3000 	ldrb.w	r3, [sl]
 8002ea8:	2b2a      	cmp	r3, #42	@ 0x2a
 8002eaa:	d015      	beq.n	8002ed8 <_vfiprintf_r+0x120>
 8002eac:	9a07      	ldr	r2, [sp, #28]
 8002eae:	4654      	mov	r4, sl
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	f04f 0c0a 	mov.w	ip, #10
 8002eb6:	4621      	mov	r1, r4
 8002eb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ebc:	3b30      	subs	r3, #48	@ 0x30
 8002ebe:	2b09      	cmp	r3, #9
 8002ec0:	d94b      	bls.n	8002f5a <_vfiprintf_r+0x1a2>
 8002ec2:	b1b0      	cbz	r0, 8002ef2 <_vfiprintf_r+0x13a>
 8002ec4:	9207      	str	r2, [sp, #28]
 8002ec6:	e014      	b.n	8002ef2 <_vfiprintf_r+0x13a>
 8002ec8:	eba0 0308 	sub.w	r3, r0, r8
 8002ecc:	fa09 f303 	lsl.w	r3, r9, r3
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	9304      	str	r3, [sp, #16]
 8002ed4:	46a2      	mov	sl, r4
 8002ed6:	e7d2      	b.n	8002e7e <_vfiprintf_r+0xc6>
 8002ed8:	9b03      	ldr	r3, [sp, #12]
 8002eda:	1d19      	adds	r1, r3, #4
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	9103      	str	r1, [sp, #12]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	bfbb      	ittet	lt
 8002ee4:	425b      	neglt	r3, r3
 8002ee6:	f042 0202 	orrlt.w	r2, r2, #2
 8002eea:	9307      	strge	r3, [sp, #28]
 8002eec:	9307      	strlt	r3, [sp, #28]
 8002eee:	bfb8      	it	lt
 8002ef0:	9204      	strlt	r2, [sp, #16]
 8002ef2:	7823      	ldrb	r3, [r4, #0]
 8002ef4:	2b2e      	cmp	r3, #46	@ 0x2e
 8002ef6:	d10a      	bne.n	8002f0e <_vfiprintf_r+0x156>
 8002ef8:	7863      	ldrb	r3, [r4, #1]
 8002efa:	2b2a      	cmp	r3, #42	@ 0x2a
 8002efc:	d132      	bne.n	8002f64 <_vfiprintf_r+0x1ac>
 8002efe:	9b03      	ldr	r3, [sp, #12]
 8002f00:	1d1a      	adds	r2, r3, #4
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	9203      	str	r2, [sp, #12]
 8002f06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002f0a:	3402      	adds	r4, #2
 8002f0c:	9305      	str	r3, [sp, #20]
 8002f0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002fe4 <_vfiprintf_r+0x22c>
 8002f12:	7821      	ldrb	r1, [r4, #0]
 8002f14:	2203      	movs	r2, #3
 8002f16:	4650      	mov	r0, sl
 8002f18:	f7fd f962 	bl	80001e0 <memchr>
 8002f1c:	b138      	cbz	r0, 8002f2e <_vfiprintf_r+0x176>
 8002f1e:	9b04      	ldr	r3, [sp, #16]
 8002f20:	eba0 000a 	sub.w	r0, r0, sl
 8002f24:	2240      	movs	r2, #64	@ 0x40
 8002f26:	4082      	lsls	r2, r0
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	3401      	adds	r4, #1
 8002f2c:	9304      	str	r3, [sp, #16]
 8002f2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f32:	4829      	ldr	r0, [pc, #164]	@ (8002fd8 <_vfiprintf_r+0x220>)
 8002f34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002f38:	2206      	movs	r2, #6
 8002f3a:	f7fd f951 	bl	80001e0 <memchr>
 8002f3e:	2800      	cmp	r0, #0
 8002f40:	d03f      	beq.n	8002fc2 <_vfiprintf_r+0x20a>
 8002f42:	4b26      	ldr	r3, [pc, #152]	@ (8002fdc <_vfiprintf_r+0x224>)
 8002f44:	bb1b      	cbnz	r3, 8002f8e <_vfiprintf_r+0x1d6>
 8002f46:	9b03      	ldr	r3, [sp, #12]
 8002f48:	3307      	adds	r3, #7
 8002f4a:	f023 0307 	bic.w	r3, r3, #7
 8002f4e:	3308      	adds	r3, #8
 8002f50:	9303      	str	r3, [sp, #12]
 8002f52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002f54:	443b      	add	r3, r7
 8002f56:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f58:	e76a      	b.n	8002e30 <_vfiprintf_r+0x78>
 8002f5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f5e:	460c      	mov	r4, r1
 8002f60:	2001      	movs	r0, #1
 8002f62:	e7a8      	b.n	8002eb6 <_vfiprintf_r+0xfe>
 8002f64:	2300      	movs	r3, #0
 8002f66:	3401      	adds	r4, #1
 8002f68:	9305      	str	r3, [sp, #20]
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	f04f 0c0a 	mov.w	ip, #10
 8002f70:	4620      	mov	r0, r4
 8002f72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f76:	3a30      	subs	r2, #48	@ 0x30
 8002f78:	2a09      	cmp	r2, #9
 8002f7a:	d903      	bls.n	8002f84 <_vfiprintf_r+0x1cc>
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0c6      	beq.n	8002f0e <_vfiprintf_r+0x156>
 8002f80:	9105      	str	r1, [sp, #20]
 8002f82:	e7c4      	b.n	8002f0e <_vfiprintf_r+0x156>
 8002f84:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f88:	4604      	mov	r4, r0
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e7f0      	b.n	8002f70 <_vfiprintf_r+0x1b8>
 8002f8e:	ab03      	add	r3, sp, #12
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	462a      	mov	r2, r5
 8002f94:	4b12      	ldr	r3, [pc, #72]	@ (8002fe0 <_vfiprintf_r+0x228>)
 8002f96:	a904      	add	r1, sp, #16
 8002f98:	4630      	mov	r0, r6
 8002f9a:	f3af 8000 	nop.w
 8002f9e:	4607      	mov	r7, r0
 8002fa0:	1c78      	adds	r0, r7, #1
 8002fa2:	d1d6      	bne.n	8002f52 <_vfiprintf_r+0x19a>
 8002fa4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002fa6:	07d9      	lsls	r1, r3, #31
 8002fa8:	d405      	bmi.n	8002fb6 <_vfiprintf_r+0x1fe>
 8002faa:	89ab      	ldrh	r3, [r5, #12]
 8002fac:	059a      	lsls	r2, r3, #22
 8002fae:	d402      	bmi.n	8002fb6 <_vfiprintf_r+0x1fe>
 8002fb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002fb2:	f7ff fddd 	bl	8002b70 <__retarget_lock_release_recursive>
 8002fb6:	89ab      	ldrh	r3, [r5, #12]
 8002fb8:	065b      	lsls	r3, r3, #25
 8002fba:	f53f af1f 	bmi.w	8002dfc <_vfiprintf_r+0x44>
 8002fbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002fc0:	e71e      	b.n	8002e00 <_vfiprintf_r+0x48>
 8002fc2:	ab03      	add	r3, sp, #12
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	462a      	mov	r2, r5
 8002fc8:	4b05      	ldr	r3, [pc, #20]	@ (8002fe0 <_vfiprintf_r+0x228>)
 8002fca:	a904      	add	r1, sp, #16
 8002fcc:	4630      	mov	r0, r6
 8002fce:	f000 f879 	bl	80030c4 <_printf_i>
 8002fd2:	e7e4      	b.n	8002f9e <_vfiprintf_r+0x1e6>
 8002fd4:	080036e0 	.word	0x080036e0
 8002fd8:	080036ea 	.word	0x080036ea
 8002fdc:	00000000 	.word	0x00000000
 8002fe0:	08002d93 	.word	0x08002d93
 8002fe4:	080036e6 	.word	0x080036e6

08002fe8 <_printf_common>:
 8002fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fec:	4616      	mov	r6, r2
 8002fee:	4698      	mov	r8, r3
 8002ff0:	688a      	ldr	r2, [r1, #8]
 8002ff2:	690b      	ldr	r3, [r1, #16]
 8002ff4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	bfb8      	it	lt
 8002ffc:	4613      	movlt	r3, r2
 8002ffe:	6033      	str	r3, [r6, #0]
 8003000:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003004:	4607      	mov	r7, r0
 8003006:	460c      	mov	r4, r1
 8003008:	b10a      	cbz	r2, 800300e <_printf_common+0x26>
 800300a:	3301      	adds	r3, #1
 800300c:	6033      	str	r3, [r6, #0]
 800300e:	6823      	ldr	r3, [r4, #0]
 8003010:	0699      	lsls	r1, r3, #26
 8003012:	bf42      	ittt	mi
 8003014:	6833      	ldrmi	r3, [r6, #0]
 8003016:	3302      	addmi	r3, #2
 8003018:	6033      	strmi	r3, [r6, #0]
 800301a:	6825      	ldr	r5, [r4, #0]
 800301c:	f015 0506 	ands.w	r5, r5, #6
 8003020:	d106      	bne.n	8003030 <_printf_common+0x48>
 8003022:	f104 0a19 	add.w	sl, r4, #25
 8003026:	68e3      	ldr	r3, [r4, #12]
 8003028:	6832      	ldr	r2, [r6, #0]
 800302a:	1a9b      	subs	r3, r3, r2
 800302c:	42ab      	cmp	r3, r5
 800302e:	dc26      	bgt.n	800307e <_printf_common+0x96>
 8003030:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003034:	6822      	ldr	r2, [r4, #0]
 8003036:	3b00      	subs	r3, #0
 8003038:	bf18      	it	ne
 800303a:	2301      	movne	r3, #1
 800303c:	0692      	lsls	r2, r2, #26
 800303e:	d42b      	bmi.n	8003098 <_printf_common+0xb0>
 8003040:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003044:	4641      	mov	r1, r8
 8003046:	4638      	mov	r0, r7
 8003048:	47c8      	blx	r9
 800304a:	3001      	adds	r0, #1
 800304c:	d01e      	beq.n	800308c <_printf_common+0xa4>
 800304e:	6823      	ldr	r3, [r4, #0]
 8003050:	6922      	ldr	r2, [r4, #16]
 8003052:	f003 0306 	and.w	r3, r3, #6
 8003056:	2b04      	cmp	r3, #4
 8003058:	bf02      	ittt	eq
 800305a:	68e5      	ldreq	r5, [r4, #12]
 800305c:	6833      	ldreq	r3, [r6, #0]
 800305e:	1aed      	subeq	r5, r5, r3
 8003060:	68a3      	ldr	r3, [r4, #8]
 8003062:	bf0c      	ite	eq
 8003064:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003068:	2500      	movne	r5, #0
 800306a:	4293      	cmp	r3, r2
 800306c:	bfc4      	itt	gt
 800306e:	1a9b      	subgt	r3, r3, r2
 8003070:	18ed      	addgt	r5, r5, r3
 8003072:	2600      	movs	r6, #0
 8003074:	341a      	adds	r4, #26
 8003076:	42b5      	cmp	r5, r6
 8003078:	d11a      	bne.n	80030b0 <_printf_common+0xc8>
 800307a:	2000      	movs	r0, #0
 800307c:	e008      	b.n	8003090 <_printf_common+0xa8>
 800307e:	2301      	movs	r3, #1
 8003080:	4652      	mov	r2, sl
 8003082:	4641      	mov	r1, r8
 8003084:	4638      	mov	r0, r7
 8003086:	47c8      	blx	r9
 8003088:	3001      	adds	r0, #1
 800308a:	d103      	bne.n	8003094 <_printf_common+0xac>
 800308c:	f04f 30ff 	mov.w	r0, #4294967295
 8003090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003094:	3501      	adds	r5, #1
 8003096:	e7c6      	b.n	8003026 <_printf_common+0x3e>
 8003098:	18e1      	adds	r1, r4, r3
 800309a:	1c5a      	adds	r2, r3, #1
 800309c:	2030      	movs	r0, #48	@ 0x30
 800309e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80030a2:	4422      	add	r2, r4
 80030a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80030a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80030ac:	3302      	adds	r3, #2
 80030ae:	e7c7      	b.n	8003040 <_printf_common+0x58>
 80030b0:	2301      	movs	r3, #1
 80030b2:	4622      	mov	r2, r4
 80030b4:	4641      	mov	r1, r8
 80030b6:	4638      	mov	r0, r7
 80030b8:	47c8      	blx	r9
 80030ba:	3001      	adds	r0, #1
 80030bc:	d0e6      	beq.n	800308c <_printf_common+0xa4>
 80030be:	3601      	adds	r6, #1
 80030c0:	e7d9      	b.n	8003076 <_printf_common+0x8e>
	...

080030c4 <_printf_i>:
 80030c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80030c8:	7e0f      	ldrb	r7, [r1, #24]
 80030ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80030cc:	2f78      	cmp	r7, #120	@ 0x78
 80030ce:	4691      	mov	r9, r2
 80030d0:	4680      	mov	r8, r0
 80030d2:	460c      	mov	r4, r1
 80030d4:	469a      	mov	sl, r3
 80030d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80030da:	d807      	bhi.n	80030ec <_printf_i+0x28>
 80030dc:	2f62      	cmp	r7, #98	@ 0x62
 80030de:	d80a      	bhi.n	80030f6 <_printf_i+0x32>
 80030e0:	2f00      	cmp	r7, #0
 80030e2:	f000 80d2 	beq.w	800328a <_printf_i+0x1c6>
 80030e6:	2f58      	cmp	r7, #88	@ 0x58
 80030e8:	f000 80b9 	beq.w	800325e <_printf_i+0x19a>
 80030ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80030f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80030f4:	e03a      	b.n	800316c <_printf_i+0xa8>
 80030f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80030fa:	2b15      	cmp	r3, #21
 80030fc:	d8f6      	bhi.n	80030ec <_printf_i+0x28>
 80030fe:	a101      	add	r1, pc, #4	@ (adr r1, 8003104 <_printf_i+0x40>)
 8003100:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003104:	0800315d 	.word	0x0800315d
 8003108:	08003171 	.word	0x08003171
 800310c:	080030ed 	.word	0x080030ed
 8003110:	080030ed 	.word	0x080030ed
 8003114:	080030ed 	.word	0x080030ed
 8003118:	080030ed 	.word	0x080030ed
 800311c:	08003171 	.word	0x08003171
 8003120:	080030ed 	.word	0x080030ed
 8003124:	080030ed 	.word	0x080030ed
 8003128:	080030ed 	.word	0x080030ed
 800312c:	080030ed 	.word	0x080030ed
 8003130:	08003271 	.word	0x08003271
 8003134:	0800319b 	.word	0x0800319b
 8003138:	0800322b 	.word	0x0800322b
 800313c:	080030ed 	.word	0x080030ed
 8003140:	080030ed 	.word	0x080030ed
 8003144:	08003293 	.word	0x08003293
 8003148:	080030ed 	.word	0x080030ed
 800314c:	0800319b 	.word	0x0800319b
 8003150:	080030ed 	.word	0x080030ed
 8003154:	080030ed 	.word	0x080030ed
 8003158:	08003233 	.word	0x08003233
 800315c:	6833      	ldr	r3, [r6, #0]
 800315e:	1d1a      	adds	r2, r3, #4
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6032      	str	r2, [r6, #0]
 8003164:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003168:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800316c:	2301      	movs	r3, #1
 800316e:	e09d      	b.n	80032ac <_printf_i+0x1e8>
 8003170:	6833      	ldr	r3, [r6, #0]
 8003172:	6820      	ldr	r0, [r4, #0]
 8003174:	1d19      	adds	r1, r3, #4
 8003176:	6031      	str	r1, [r6, #0]
 8003178:	0606      	lsls	r6, r0, #24
 800317a:	d501      	bpl.n	8003180 <_printf_i+0xbc>
 800317c:	681d      	ldr	r5, [r3, #0]
 800317e:	e003      	b.n	8003188 <_printf_i+0xc4>
 8003180:	0645      	lsls	r5, r0, #25
 8003182:	d5fb      	bpl.n	800317c <_printf_i+0xb8>
 8003184:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003188:	2d00      	cmp	r5, #0
 800318a:	da03      	bge.n	8003194 <_printf_i+0xd0>
 800318c:	232d      	movs	r3, #45	@ 0x2d
 800318e:	426d      	negs	r5, r5
 8003190:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003194:	4859      	ldr	r0, [pc, #356]	@ (80032fc <_printf_i+0x238>)
 8003196:	230a      	movs	r3, #10
 8003198:	e011      	b.n	80031be <_printf_i+0xfa>
 800319a:	6821      	ldr	r1, [r4, #0]
 800319c:	6833      	ldr	r3, [r6, #0]
 800319e:	0608      	lsls	r0, r1, #24
 80031a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80031a4:	d402      	bmi.n	80031ac <_printf_i+0xe8>
 80031a6:	0649      	lsls	r1, r1, #25
 80031a8:	bf48      	it	mi
 80031aa:	b2ad      	uxthmi	r5, r5
 80031ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80031ae:	4853      	ldr	r0, [pc, #332]	@ (80032fc <_printf_i+0x238>)
 80031b0:	6033      	str	r3, [r6, #0]
 80031b2:	bf14      	ite	ne
 80031b4:	230a      	movne	r3, #10
 80031b6:	2308      	moveq	r3, #8
 80031b8:	2100      	movs	r1, #0
 80031ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80031be:	6866      	ldr	r6, [r4, #4]
 80031c0:	60a6      	str	r6, [r4, #8]
 80031c2:	2e00      	cmp	r6, #0
 80031c4:	bfa2      	ittt	ge
 80031c6:	6821      	ldrge	r1, [r4, #0]
 80031c8:	f021 0104 	bicge.w	r1, r1, #4
 80031cc:	6021      	strge	r1, [r4, #0]
 80031ce:	b90d      	cbnz	r5, 80031d4 <_printf_i+0x110>
 80031d0:	2e00      	cmp	r6, #0
 80031d2:	d04b      	beq.n	800326c <_printf_i+0x1a8>
 80031d4:	4616      	mov	r6, r2
 80031d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80031da:	fb03 5711 	mls	r7, r3, r1, r5
 80031de:	5dc7      	ldrb	r7, [r0, r7]
 80031e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80031e4:	462f      	mov	r7, r5
 80031e6:	42bb      	cmp	r3, r7
 80031e8:	460d      	mov	r5, r1
 80031ea:	d9f4      	bls.n	80031d6 <_printf_i+0x112>
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d10b      	bne.n	8003208 <_printf_i+0x144>
 80031f0:	6823      	ldr	r3, [r4, #0]
 80031f2:	07df      	lsls	r7, r3, #31
 80031f4:	d508      	bpl.n	8003208 <_printf_i+0x144>
 80031f6:	6923      	ldr	r3, [r4, #16]
 80031f8:	6861      	ldr	r1, [r4, #4]
 80031fa:	4299      	cmp	r1, r3
 80031fc:	bfde      	ittt	le
 80031fe:	2330      	movle	r3, #48	@ 0x30
 8003200:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003204:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003208:	1b92      	subs	r2, r2, r6
 800320a:	6122      	str	r2, [r4, #16]
 800320c:	f8cd a000 	str.w	sl, [sp]
 8003210:	464b      	mov	r3, r9
 8003212:	aa03      	add	r2, sp, #12
 8003214:	4621      	mov	r1, r4
 8003216:	4640      	mov	r0, r8
 8003218:	f7ff fee6 	bl	8002fe8 <_printf_common>
 800321c:	3001      	adds	r0, #1
 800321e:	d14a      	bne.n	80032b6 <_printf_i+0x1f2>
 8003220:	f04f 30ff 	mov.w	r0, #4294967295
 8003224:	b004      	add	sp, #16
 8003226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800322a:	6823      	ldr	r3, [r4, #0]
 800322c:	f043 0320 	orr.w	r3, r3, #32
 8003230:	6023      	str	r3, [r4, #0]
 8003232:	4833      	ldr	r0, [pc, #204]	@ (8003300 <_printf_i+0x23c>)
 8003234:	2778      	movs	r7, #120	@ 0x78
 8003236:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800323a:	6823      	ldr	r3, [r4, #0]
 800323c:	6831      	ldr	r1, [r6, #0]
 800323e:	061f      	lsls	r7, r3, #24
 8003240:	f851 5b04 	ldr.w	r5, [r1], #4
 8003244:	d402      	bmi.n	800324c <_printf_i+0x188>
 8003246:	065f      	lsls	r7, r3, #25
 8003248:	bf48      	it	mi
 800324a:	b2ad      	uxthmi	r5, r5
 800324c:	6031      	str	r1, [r6, #0]
 800324e:	07d9      	lsls	r1, r3, #31
 8003250:	bf44      	itt	mi
 8003252:	f043 0320 	orrmi.w	r3, r3, #32
 8003256:	6023      	strmi	r3, [r4, #0]
 8003258:	b11d      	cbz	r5, 8003262 <_printf_i+0x19e>
 800325a:	2310      	movs	r3, #16
 800325c:	e7ac      	b.n	80031b8 <_printf_i+0xf4>
 800325e:	4827      	ldr	r0, [pc, #156]	@ (80032fc <_printf_i+0x238>)
 8003260:	e7e9      	b.n	8003236 <_printf_i+0x172>
 8003262:	6823      	ldr	r3, [r4, #0]
 8003264:	f023 0320 	bic.w	r3, r3, #32
 8003268:	6023      	str	r3, [r4, #0]
 800326a:	e7f6      	b.n	800325a <_printf_i+0x196>
 800326c:	4616      	mov	r6, r2
 800326e:	e7bd      	b.n	80031ec <_printf_i+0x128>
 8003270:	6833      	ldr	r3, [r6, #0]
 8003272:	6825      	ldr	r5, [r4, #0]
 8003274:	6961      	ldr	r1, [r4, #20]
 8003276:	1d18      	adds	r0, r3, #4
 8003278:	6030      	str	r0, [r6, #0]
 800327a:	062e      	lsls	r6, r5, #24
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	d501      	bpl.n	8003284 <_printf_i+0x1c0>
 8003280:	6019      	str	r1, [r3, #0]
 8003282:	e002      	b.n	800328a <_printf_i+0x1c6>
 8003284:	0668      	lsls	r0, r5, #25
 8003286:	d5fb      	bpl.n	8003280 <_printf_i+0x1bc>
 8003288:	8019      	strh	r1, [r3, #0]
 800328a:	2300      	movs	r3, #0
 800328c:	6123      	str	r3, [r4, #16]
 800328e:	4616      	mov	r6, r2
 8003290:	e7bc      	b.n	800320c <_printf_i+0x148>
 8003292:	6833      	ldr	r3, [r6, #0]
 8003294:	1d1a      	adds	r2, r3, #4
 8003296:	6032      	str	r2, [r6, #0]
 8003298:	681e      	ldr	r6, [r3, #0]
 800329a:	6862      	ldr	r2, [r4, #4]
 800329c:	2100      	movs	r1, #0
 800329e:	4630      	mov	r0, r6
 80032a0:	f7fc ff9e 	bl	80001e0 <memchr>
 80032a4:	b108      	cbz	r0, 80032aa <_printf_i+0x1e6>
 80032a6:	1b80      	subs	r0, r0, r6
 80032a8:	6060      	str	r0, [r4, #4]
 80032aa:	6863      	ldr	r3, [r4, #4]
 80032ac:	6123      	str	r3, [r4, #16]
 80032ae:	2300      	movs	r3, #0
 80032b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80032b4:	e7aa      	b.n	800320c <_printf_i+0x148>
 80032b6:	6923      	ldr	r3, [r4, #16]
 80032b8:	4632      	mov	r2, r6
 80032ba:	4649      	mov	r1, r9
 80032bc:	4640      	mov	r0, r8
 80032be:	47d0      	blx	sl
 80032c0:	3001      	adds	r0, #1
 80032c2:	d0ad      	beq.n	8003220 <_printf_i+0x15c>
 80032c4:	6823      	ldr	r3, [r4, #0]
 80032c6:	079b      	lsls	r3, r3, #30
 80032c8:	d413      	bmi.n	80032f2 <_printf_i+0x22e>
 80032ca:	68e0      	ldr	r0, [r4, #12]
 80032cc:	9b03      	ldr	r3, [sp, #12]
 80032ce:	4298      	cmp	r0, r3
 80032d0:	bfb8      	it	lt
 80032d2:	4618      	movlt	r0, r3
 80032d4:	e7a6      	b.n	8003224 <_printf_i+0x160>
 80032d6:	2301      	movs	r3, #1
 80032d8:	4632      	mov	r2, r6
 80032da:	4649      	mov	r1, r9
 80032dc:	4640      	mov	r0, r8
 80032de:	47d0      	blx	sl
 80032e0:	3001      	adds	r0, #1
 80032e2:	d09d      	beq.n	8003220 <_printf_i+0x15c>
 80032e4:	3501      	adds	r5, #1
 80032e6:	68e3      	ldr	r3, [r4, #12]
 80032e8:	9903      	ldr	r1, [sp, #12]
 80032ea:	1a5b      	subs	r3, r3, r1
 80032ec:	42ab      	cmp	r3, r5
 80032ee:	dcf2      	bgt.n	80032d6 <_printf_i+0x212>
 80032f0:	e7eb      	b.n	80032ca <_printf_i+0x206>
 80032f2:	2500      	movs	r5, #0
 80032f4:	f104 0619 	add.w	r6, r4, #25
 80032f8:	e7f5      	b.n	80032e6 <_printf_i+0x222>
 80032fa:	bf00      	nop
 80032fc:	080036f1 	.word	0x080036f1
 8003300:	08003702 	.word	0x08003702

08003304 <__sflush_r>:
 8003304:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800330c:	0716      	lsls	r6, r2, #28
 800330e:	4605      	mov	r5, r0
 8003310:	460c      	mov	r4, r1
 8003312:	d454      	bmi.n	80033be <__sflush_r+0xba>
 8003314:	684b      	ldr	r3, [r1, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	dc02      	bgt.n	8003320 <__sflush_r+0x1c>
 800331a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800331c:	2b00      	cmp	r3, #0
 800331e:	dd48      	ble.n	80033b2 <__sflush_r+0xae>
 8003320:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003322:	2e00      	cmp	r6, #0
 8003324:	d045      	beq.n	80033b2 <__sflush_r+0xae>
 8003326:	2300      	movs	r3, #0
 8003328:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800332c:	682f      	ldr	r7, [r5, #0]
 800332e:	6a21      	ldr	r1, [r4, #32]
 8003330:	602b      	str	r3, [r5, #0]
 8003332:	d030      	beq.n	8003396 <__sflush_r+0x92>
 8003334:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003336:	89a3      	ldrh	r3, [r4, #12]
 8003338:	0759      	lsls	r1, r3, #29
 800333a:	d505      	bpl.n	8003348 <__sflush_r+0x44>
 800333c:	6863      	ldr	r3, [r4, #4]
 800333e:	1ad2      	subs	r2, r2, r3
 8003340:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003342:	b10b      	cbz	r3, 8003348 <__sflush_r+0x44>
 8003344:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003346:	1ad2      	subs	r2, r2, r3
 8003348:	2300      	movs	r3, #0
 800334a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800334c:	6a21      	ldr	r1, [r4, #32]
 800334e:	4628      	mov	r0, r5
 8003350:	47b0      	blx	r6
 8003352:	1c43      	adds	r3, r0, #1
 8003354:	89a3      	ldrh	r3, [r4, #12]
 8003356:	d106      	bne.n	8003366 <__sflush_r+0x62>
 8003358:	6829      	ldr	r1, [r5, #0]
 800335a:	291d      	cmp	r1, #29
 800335c:	d82b      	bhi.n	80033b6 <__sflush_r+0xb2>
 800335e:	4a2a      	ldr	r2, [pc, #168]	@ (8003408 <__sflush_r+0x104>)
 8003360:	410a      	asrs	r2, r1
 8003362:	07d6      	lsls	r6, r2, #31
 8003364:	d427      	bmi.n	80033b6 <__sflush_r+0xb2>
 8003366:	2200      	movs	r2, #0
 8003368:	6062      	str	r2, [r4, #4]
 800336a:	04d9      	lsls	r1, r3, #19
 800336c:	6922      	ldr	r2, [r4, #16]
 800336e:	6022      	str	r2, [r4, #0]
 8003370:	d504      	bpl.n	800337c <__sflush_r+0x78>
 8003372:	1c42      	adds	r2, r0, #1
 8003374:	d101      	bne.n	800337a <__sflush_r+0x76>
 8003376:	682b      	ldr	r3, [r5, #0]
 8003378:	b903      	cbnz	r3, 800337c <__sflush_r+0x78>
 800337a:	6560      	str	r0, [r4, #84]	@ 0x54
 800337c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800337e:	602f      	str	r7, [r5, #0]
 8003380:	b1b9      	cbz	r1, 80033b2 <__sflush_r+0xae>
 8003382:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003386:	4299      	cmp	r1, r3
 8003388:	d002      	beq.n	8003390 <__sflush_r+0x8c>
 800338a:	4628      	mov	r0, r5
 800338c:	f7ff fbf2 	bl	8002b74 <_free_r>
 8003390:	2300      	movs	r3, #0
 8003392:	6363      	str	r3, [r4, #52]	@ 0x34
 8003394:	e00d      	b.n	80033b2 <__sflush_r+0xae>
 8003396:	2301      	movs	r3, #1
 8003398:	4628      	mov	r0, r5
 800339a:	47b0      	blx	r6
 800339c:	4602      	mov	r2, r0
 800339e:	1c50      	adds	r0, r2, #1
 80033a0:	d1c9      	bne.n	8003336 <__sflush_r+0x32>
 80033a2:	682b      	ldr	r3, [r5, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0c6      	beq.n	8003336 <__sflush_r+0x32>
 80033a8:	2b1d      	cmp	r3, #29
 80033aa:	d001      	beq.n	80033b0 <__sflush_r+0xac>
 80033ac:	2b16      	cmp	r3, #22
 80033ae:	d11e      	bne.n	80033ee <__sflush_r+0xea>
 80033b0:	602f      	str	r7, [r5, #0]
 80033b2:	2000      	movs	r0, #0
 80033b4:	e022      	b.n	80033fc <__sflush_r+0xf8>
 80033b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033ba:	b21b      	sxth	r3, r3
 80033bc:	e01b      	b.n	80033f6 <__sflush_r+0xf2>
 80033be:	690f      	ldr	r7, [r1, #16]
 80033c0:	2f00      	cmp	r7, #0
 80033c2:	d0f6      	beq.n	80033b2 <__sflush_r+0xae>
 80033c4:	0793      	lsls	r3, r2, #30
 80033c6:	680e      	ldr	r6, [r1, #0]
 80033c8:	bf08      	it	eq
 80033ca:	694b      	ldreq	r3, [r1, #20]
 80033cc:	600f      	str	r7, [r1, #0]
 80033ce:	bf18      	it	ne
 80033d0:	2300      	movne	r3, #0
 80033d2:	eba6 0807 	sub.w	r8, r6, r7
 80033d6:	608b      	str	r3, [r1, #8]
 80033d8:	f1b8 0f00 	cmp.w	r8, #0
 80033dc:	dde9      	ble.n	80033b2 <__sflush_r+0xae>
 80033de:	6a21      	ldr	r1, [r4, #32]
 80033e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80033e2:	4643      	mov	r3, r8
 80033e4:	463a      	mov	r2, r7
 80033e6:	4628      	mov	r0, r5
 80033e8:	47b0      	blx	r6
 80033ea:	2800      	cmp	r0, #0
 80033ec:	dc08      	bgt.n	8003400 <__sflush_r+0xfc>
 80033ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033f6:	81a3      	strh	r3, [r4, #12]
 80033f8:	f04f 30ff 	mov.w	r0, #4294967295
 80033fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003400:	4407      	add	r7, r0
 8003402:	eba8 0800 	sub.w	r8, r8, r0
 8003406:	e7e7      	b.n	80033d8 <__sflush_r+0xd4>
 8003408:	dfbffffe 	.word	0xdfbffffe

0800340c <_fflush_r>:
 800340c:	b538      	push	{r3, r4, r5, lr}
 800340e:	690b      	ldr	r3, [r1, #16]
 8003410:	4605      	mov	r5, r0
 8003412:	460c      	mov	r4, r1
 8003414:	b913      	cbnz	r3, 800341c <_fflush_r+0x10>
 8003416:	2500      	movs	r5, #0
 8003418:	4628      	mov	r0, r5
 800341a:	bd38      	pop	{r3, r4, r5, pc}
 800341c:	b118      	cbz	r0, 8003426 <_fflush_r+0x1a>
 800341e:	6a03      	ldr	r3, [r0, #32]
 8003420:	b90b      	cbnz	r3, 8003426 <_fflush_r+0x1a>
 8003422:	f7ff fa9f 	bl	8002964 <__sinit>
 8003426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0f3      	beq.n	8003416 <_fflush_r+0xa>
 800342e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003430:	07d0      	lsls	r0, r2, #31
 8003432:	d404      	bmi.n	800343e <_fflush_r+0x32>
 8003434:	0599      	lsls	r1, r3, #22
 8003436:	d402      	bmi.n	800343e <_fflush_r+0x32>
 8003438:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800343a:	f7ff fb98 	bl	8002b6e <__retarget_lock_acquire_recursive>
 800343e:	4628      	mov	r0, r5
 8003440:	4621      	mov	r1, r4
 8003442:	f7ff ff5f 	bl	8003304 <__sflush_r>
 8003446:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003448:	07da      	lsls	r2, r3, #31
 800344a:	4605      	mov	r5, r0
 800344c:	d4e4      	bmi.n	8003418 <_fflush_r+0xc>
 800344e:	89a3      	ldrh	r3, [r4, #12]
 8003450:	059b      	lsls	r3, r3, #22
 8003452:	d4e1      	bmi.n	8003418 <_fflush_r+0xc>
 8003454:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003456:	f7ff fb8b 	bl	8002b70 <__retarget_lock_release_recursive>
 800345a:	e7dd      	b.n	8003418 <_fflush_r+0xc>

0800345c <__swbuf_r>:
 800345c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800345e:	460e      	mov	r6, r1
 8003460:	4614      	mov	r4, r2
 8003462:	4605      	mov	r5, r0
 8003464:	b118      	cbz	r0, 800346e <__swbuf_r+0x12>
 8003466:	6a03      	ldr	r3, [r0, #32]
 8003468:	b90b      	cbnz	r3, 800346e <__swbuf_r+0x12>
 800346a:	f7ff fa7b 	bl	8002964 <__sinit>
 800346e:	69a3      	ldr	r3, [r4, #24]
 8003470:	60a3      	str	r3, [r4, #8]
 8003472:	89a3      	ldrh	r3, [r4, #12]
 8003474:	071a      	lsls	r2, r3, #28
 8003476:	d501      	bpl.n	800347c <__swbuf_r+0x20>
 8003478:	6923      	ldr	r3, [r4, #16]
 800347a:	b943      	cbnz	r3, 800348e <__swbuf_r+0x32>
 800347c:	4621      	mov	r1, r4
 800347e:	4628      	mov	r0, r5
 8003480:	f000 f82a 	bl	80034d8 <__swsetup_r>
 8003484:	b118      	cbz	r0, 800348e <__swbuf_r+0x32>
 8003486:	f04f 37ff 	mov.w	r7, #4294967295
 800348a:	4638      	mov	r0, r7
 800348c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800348e:	6823      	ldr	r3, [r4, #0]
 8003490:	6922      	ldr	r2, [r4, #16]
 8003492:	1a98      	subs	r0, r3, r2
 8003494:	6963      	ldr	r3, [r4, #20]
 8003496:	b2f6      	uxtb	r6, r6
 8003498:	4283      	cmp	r3, r0
 800349a:	4637      	mov	r7, r6
 800349c:	dc05      	bgt.n	80034aa <__swbuf_r+0x4e>
 800349e:	4621      	mov	r1, r4
 80034a0:	4628      	mov	r0, r5
 80034a2:	f7ff ffb3 	bl	800340c <_fflush_r>
 80034a6:	2800      	cmp	r0, #0
 80034a8:	d1ed      	bne.n	8003486 <__swbuf_r+0x2a>
 80034aa:	68a3      	ldr	r3, [r4, #8]
 80034ac:	3b01      	subs	r3, #1
 80034ae:	60a3      	str	r3, [r4, #8]
 80034b0:	6823      	ldr	r3, [r4, #0]
 80034b2:	1c5a      	adds	r2, r3, #1
 80034b4:	6022      	str	r2, [r4, #0]
 80034b6:	701e      	strb	r6, [r3, #0]
 80034b8:	6962      	ldr	r2, [r4, #20]
 80034ba:	1c43      	adds	r3, r0, #1
 80034bc:	429a      	cmp	r2, r3
 80034be:	d004      	beq.n	80034ca <__swbuf_r+0x6e>
 80034c0:	89a3      	ldrh	r3, [r4, #12]
 80034c2:	07db      	lsls	r3, r3, #31
 80034c4:	d5e1      	bpl.n	800348a <__swbuf_r+0x2e>
 80034c6:	2e0a      	cmp	r6, #10
 80034c8:	d1df      	bne.n	800348a <__swbuf_r+0x2e>
 80034ca:	4621      	mov	r1, r4
 80034cc:	4628      	mov	r0, r5
 80034ce:	f7ff ff9d 	bl	800340c <_fflush_r>
 80034d2:	2800      	cmp	r0, #0
 80034d4:	d0d9      	beq.n	800348a <__swbuf_r+0x2e>
 80034d6:	e7d6      	b.n	8003486 <__swbuf_r+0x2a>

080034d8 <__swsetup_r>:
 80034d8:	b538      	push	{r3, r4, r5, lr}
 80034da:	4b29      	ldr	r3, [pc, #164]	@ (8003580 <__swsetup_r+0xa8>)
 80034dc:	4605      	mov	r5, r0
 80034de:	6818      	ldr	r0, [r3, #0]
 80034e0:	460c      	mov	r4, r1
 80034e2:	b118      	cbz	r0, 80034ec <__swsetup_r+0x14>
 80034e4:	6a03      	ldr	r3, [r0, #32]
 80034e6:	b90b      	cbnz	r3, 80034ec <__swsetup_r+0x14>
 80034e8:	f7ff fa3c 	bl	8002964 <__sinit>
 80034ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034f0:	0719      	lsls	r1, r3, #28
 80034f2:	d422      	bmi.n	800353a <__swsetup_r+0x62>
 80034f4:	06da      	lsls	r2, r3, #27
 80034f6:	d407      	bmi.n	8003508 <__swsetup_r+0x30>
 80034f8:	2209      	movs	r2, #9
 80034fa:	602a      	str	r2, [r5, #0]
 80034fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003500:	81a3      	strh	r3, [r4, #12]
 8003502:	f04f 30ff 	mov.w	r0, #4294967295
 8003506:	e033      	b.n	8003570 <__swsetup_r+0x98>
 8003508:	0758      	lsls	r0, r3, #29
 800350a:	d512      	bpl.n	8003532 <__swsetup_r+0x5a>
 800350c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800350e:	b141      	cbz	r1, 8003522 <__swsetup_r+0x4a>
 8003510:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003514:	4299      	cmp	r1, r3
 8003516:	d002      	beq.n	800351e <__swsetup_r+0x46>
 8003518:	4628      	mov	r0, r5
 800351a:	f7ff fb2b 	bl	8002b74 <_free_r>
 800351e:	2300      	movs	r3, #0
 8003520:	6363      	str	r3, [r4, #52]	@ 0x34
 8003522:	89a3      	ldrh	r3, [r4, #12]
 8003524:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003528:	81a3      	strh	r3, [r4, #12]
 800352a:	2300      	movs	r3, #0
 800352c:	6063      	str	r3, [r4, #4]
 800352e:	6923      	ldr	r3, [r4, #16]
 8003530:	6023      	str	r3, [r4, #0]
 8003532:	89a3      	ldrh	r3, [r4, #12]
 8003534:	f043 0308 	orr.w	r3, r3, #8
 8003538:	81a3      	strh	r3, [r4, #12]
 800353a:	6923      	ldr	r3, [r4, #16]
 800353c:	b94b      	cbnz	r3, 8003552 <__swsetup_r+0x7a>
 800353e:	89a3      	ldrh	r3, [r4, #12]
 8003540:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003544:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003548:	d003      	beq.n	8003552 <__swsetup_r+0x7a>
 800354a:	4621      	mov	r1, r4
 800354c:	4628      	mov	r0, r5
 800354e:	f000 f84f 	bl	80035f0 <__smakebuf_r>
 8003552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003556:	f013 0201 	ands.w	r2, r3, #1
 800355a:	d00a      	beq.n	8003572 <__swsetup_r+0x9a>
 800355c:	2200      	movs	r2, #0
 800355e:	60a2      	str	r2, [r4, #8]
 8003560:	6962      	ldr	r2, [r4, #20]
 8003562:	4252      	negs	r2, r2
 8003564:	61a2      	str	r2, [r4, #24]
 8003566:	6922      	ldr	r2, [r4, #16]
 8003568:	b942      	cbnz	r2, 800357c <__swsetup_r+0xa4>
 800356a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800356e:	d1c5      	bne.n	80034fc <__swsetup_r+0x24>
 8003570:	bd38      	pop	{r3, r4, r5, pc}
 8003572:	0799      	lsls	r1, r3, #30
 8003574:	bf58      	it	pl
 8003576:	6962      	ldrpl	r2, [r4, #20]
 8003578:	60a2      	str	r2, [r4, #8]
 800357a:	e7f4      	b.n	8003566 <__swsetup_r+0x8e>
 800357c:	2000      	movs	r0, #0
 800357e:	e7f7      	b.n	8003570 <__swsetup_r+0x98>
 8003580:	20000018 	.word	0x20000018

08003584 <_sbrk_r>:
 8003584:	b538      	push	{r3, r4, r5, lr}
 8003586:	4d06      	ldr	r5, [pc, #24]	@ (80035a0 <_sbrk_r+0x1c>)
 8003588:	2300      	movs	r3, #0
 800358a:	4604      	mov	r4, r0
 800358c:	4608      	mov	r0, r1
 800358e:	602b      	str	r3, [r5, #0]
 8003590:	f7ff f8ea 	bl	8002768 <_sbrk>
 8003594:	1c43      	adds	r3, r0, #1
 8003596:	d102      	bne.n	800359e <_sbrk_r+0x1a>
 8003598:	682b      	ldr	r3, [r5, #0]
 800359a:	b103      	cbz	r3, 800359e <_sbrk_r+0x1a>
 800359c:	6023      	str	r3, [r4, #0]
 800359e:	bd38      	pop	{r3, r4, r5, pc}
 80035a0:	200002c0 	.word	0x200002c0

080035a4 <__swhatbuf_r>:
 80035a4:	b570      	push	{r4, r5, r6, lr}
 80035a6:	460c      	mov	r4, r1
 80035a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035ac:	2900      	cmp	r1, #0
 80035ae:	b096      	sub	sp, #88	@ 0x58
 80035b0:	4615      	mov	r5, r2
 80035b2:	461e      	mov	r6, r3
 80035b4:	da0d      	bge.n	80035d2 <__swhatbuf_r+0x2e>
 80035b6:	89a3      	ldrh	r3, [r4, #12]
 80035b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80035bc:	f04f 0100 	mov.w	r1, #0
 80035c0:	bf14      	ite	ne
 80035c2:	2340      	movne	r3, #64	@ 0x40
 80035c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80035c8:	2000      	movs	r0, #0
 80035ca:	6031      	str	r1, [r6, #0]
 80035cc:	602b      	str	r3, [r5, #0]
 80035ce:	b016      	add	sp, #88	@ 0x58
 80035d0:	bd70      	pop	{r4, r5, r6, pc}
 80035d2:	466a      	mov	r2, sp
 80035d4:	f000 f848 	bl	8003668 <_fstat_r>
 80035d8:	2800      	cmp	r0, #0
 80035da:	dbec      	blt.n	80035b6 <__swhatbuf_r+0x12>
 80035dc:	9901      	ldr	r1, [sp, #4]
 80035de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80035e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80035e6:	4259      	negs	r1, r3
 80035e8:	4159      	adcs	r1, r3
 80035ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80035ee:	e7eb      	b.n	80035c8 <__swhatbuf_r+0x24>

080035f0 <__smakebuf_r>:
 80035f0:	898b      	ldrh	r3, [r1, #12]
 80035f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035f4:	079d      	lsls	r5, r3, #30
 80035f6:	4606      	mov	r6, r0
 80035f8:	460c      	mov	r4, r1
 80035fa:	d507      	bpl.n	800360c <__smakebuf_r+0x1c>
 80035fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003600:	6023      	str	r3, [r4, #0]
 8003602:	6123      	str	r3, [r4, #16]
 8003604:	2301      	movs	r3, #1
 8003606:	6163      	str	r3, [r4, #20]
 8003608:	b003      	add	sp, #12
 800360a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800360c:	ab01      	add	r3, sp, #4
 800360e:	466a      	mov	r2, sp
 8003610:	f7ff ffc8 	bl	80035a4 <__swhatbuf_r>
 8003614:	9f00      	ldr	r7, [sp, #0]
 8003616:	4605      	mov	r5, r0
 8003618:	4639      	mov	r1, r7
 800361a:	4630      	mov	r0, r6
 800361c:	f7ff fb16 	bl	8002c4c <_malloc_r>
 8003620:	b948      	cbnz	r0, 8003636 <__smakebuf_r+0x46>
 8003622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003626:	059a      	lsls	r2, r3, #22
 8003628:	d4ee      	bmi.n	8003608 <__smakebuf_r+0x18>
 800362a:	f023 0303 	bic.w	r3, r3, #3
 800362e:	f043 0302 	orr.w	r3, r3, #2
 8003632:	81a3      	strh	r3, [r4, #12]
 8003634:	e7e2      	b.n	80035fc <__smakebuf_r+0xc>
 8003636:	89a3      	ldrh	r3, [r4, #12]
 8003638:	6020      	str	r0, [r4, #0]
 800363a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800363e:	81a3      	strh	r3, [r4, #12]
 8003640:	9b01      	ldr	r3, [sp, #4]
 8003642:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003646:	b15b      	cbz	r3, 8003660 <__smakebuf_r+0x70>
 8003648:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800364c:	4630      	mov	r0, r6
 800364e:	f000 f81d 	bl	800368c <_isatty_r>
 8003652:	b128      	cbz	r0, 8003660 <__smakebuf_r+0x70>
 8003654:	89a3      	ldrh	r3, [r4, #12]
 8003656:	f023 0303 	bic.w	r3, r3, #3
 800365a:	f043 0301 	orr.w	r3, r3, #1
 800365e:	81a3      	strh	r3, [r4, #12]
 8003660:	89a3      	ldrh	r3, [r4, #12]
 8003662:	431d      	orrs	r5, r3
 8003664:	81a5      	strh	r5, [r4, #12]
 8003666:	e7cf      	b.n	8003608 <__smakebuf_r+0x18>

08003668 <_fstat_r>:
 8003668:	b538      	push	{r3, r4, r5, lr}
 800366a:	4d07      	ldr	r5, [pc, #28]	@ (8003688 <_fstat_r+0x20>)
 800366c:	2300      	movs	r3, #0
 800366e:	4604      	mov	r4, r0
 8003670:	4608      	mov	r0, r1
 8003672:	4611      	mov	r1, r2
 8003674:	602b      	str	r3, [r5, #0]
 8003676:	f7ff f84e 	bl	8002716 <_fstat>
 800367a:	1c43      	adds	r3, r0, #1
 800367c:	d102      	bne.n	8003684 <_fstat_r+0x1c>
 800367e:	682b      	ldr	r3, [r5, #0]
 8003680:	b103      	cbz	r3, 8003684 <_fstat_r+0x1c>
 8003682:	6023      	str	r3, [r4, #0]
 8003684:	bd38      	pop	{r3, r4, r5, pc}
 8003686:	bf00      	nop
 8003688:	200002c0 	.word	0x200002c0

0800368c <_isatty_r>:
 800368c:	b538      	push	{r3, r4, r5, lr}
 800368e:	4d06      	ldr	r5, [pc, #24]	@ (80036a8 <_isatty_r+0x1c>)
 8003690:	2300      	movs	r3, #0
 8003692:	4604      	mov	r4, r0
 8003694:	4608      	mov	r0, r1
 8003696:	602b      	str	r3, [r5, #0]
 8003698:	f7ff f84d 	bl	8002736 <_isatty>
 800369c:	1c43      	adds	r3, r0, #1
 800369e:	d102      	bne.n	80036a6 <_isatty_r+0x1a>
 80036a0:	682b      	ldr	r3, [r5, #0]
 80036a2:	b103      	cbz	r3, 80036a6 <_isatty_r+0x1a>
 80036a4:	6023      	str	r3, [r4, #0]
 80036a6:	bd38      	pop	{r3, r4, r5, pc}
 80036a8:	200002c0 	.word	0x200002c0

080036ac <_init>:
 80036ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ae:	bf00      	nop
 80036b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036b2:	bc08      	pop	{r3}
 80036b4:	469e      	mov	lr, r3
 80036b6:	4770      	bx	lr

080036b8 <_fini>:
 80036b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ba:	bf00      	nop
 80036bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036be:	bc08      	pop	{r3}
 80036c0:	469e      	mov	lr, r3
 80036c2:	4770      	bx	lr
